!!!!!!!!!!!!!!!
!!  ATTRIBUTE CATEGORIES
!!!!!!!!!!!!!!!

function = "@+FAUXV" "@\+FAUXV" "@\+FMAINV" "@+FMAINV" "@-F←ADVL" "@-F←ADVL-ine" "@-F←ADVL-ela" "@-F←OBJ" "@-F←OPRED" "@-F←SUBJ" "@-FADVL→" "@-FAUXV" "@-FMAINV" "@-FOBJ→" "@-FSUBJ→" "@←ADVL" "@←ADVL-ela" "@←ADVL-ine" "@←OBJ" "@←OPRED" "@←PPRED" "@←SPRED" "@←SUBJ" "@→A" "@→ADVL" "@→CC" "@→N" "@→Num" "@→P" "@→Pron" "@A←" "@ADVL" "@ADVL←" "@ADVL→" "@ADVL-ela→" "@ADVL-ine→" "@ADVLcs-ela→" "@ADVLcs-ine→" "@ADVLqst-ela→" "@ADVLqst-ine→" "@ADVLhab→" "@←ADVLhab" "@←SUBJext" "@ADVL→CS" "@APP-ADVL←" "@APP-N←" "@APP-Pron←" "@CNP" "@COMP-CS←" "@CVP" "@HNOUN" "@INTERJ" "@N←" "@Num←" "@OBJ→" "@OPRED→" "@P←" "@PCLE" "@Pron←" "@SPRED←OBJ" "@SPRED→" "@SUBJ→" "@VOC" "@X"  ;
fsubj = "@-FSUBJ→" ;
leftobj = "@-F←OBJ" "@←OBJ" ;
fsubjadvl = "@-FSUBJ→" "@←ADVL-ela" "@←ADVL-ine" "@←ADVL" "@ADVLhab→" ;
leftspred = "@←SPRED" ;
argument = "@-F←ADVL" "@-F←ADVL-ine" "@-F←ADVL-ela" "@-F←OBJ" "@-F←OPRED" "@-FADVL→" "@-FOBJ→" "@-FSUBJ→" "@←ADVL" "@←ADVL-ela" "@←ADVL-ine" "@←OBJ" "@←OPRED" "@←PPRED" "@←SPRED" "@←SUBJ" "@ADVL" "@ADVL→" "@ADVL-ela→" "@ADVL-ine→"  "@←SUBJext" "@HNOUN" "@OBJ→" "@OPRED→" "@SPRED→" "@SUBJ→" "@ADVLhab→" "@←ADVLhab"  ; 
rightargument = "@-FADVL→" "@-FOBJ→" "@-FSUBJ→" "@ADVL→" "@ADVL-ela→" "@ADVL-ine→" "@HNOUN" "@OBJ→" "@OPRED→" "@SPRED→" "@SUBJ→" "@ADVLhab→"   ; 
notattr = [argument] "@Pron←" "@X" "@N←" ; 

mainv = "@+FMAINV" "@-FMAINV" ;
notauxv = "@+FMAINV" "@-FMAINV" "@←OBJ" "@←ADVL" "@SUBJ→" ;
supnfunction = "@←ADVL" ;
right = "@→N" "@→A" ;
leftobjadvl = "@-F←OBJ" "@←ADVL-ine" "@←ADVL-ela" "@←ADVL" "@-F←ADVL-ine" "@-F←ADVL-ela" "@←OBJ" ;
advlleft = "@←ADVL-ine" "@←ADVL-ela" "@←ADVL" "@-F←ADVL-ine" "@-F←ADVL-ela";
advline = "@←ADVL-ine" "@ADVL-ine→" "@ADVLqst-ine→" "@ADVLcs-ine→" "@-F←ADVL-ine" ;
advlela = "@←ADVL-ela" "@ADVL-ela→" "@ADVLcs-ela→" "@ADVLqst-ela→" "@-F←ADVL-ela" "@N←" "@Num←"   ;
gender = f m ;
number = sg du pl ;
prn_type_other = rel dem ind itg res ;
prn_type = pers ref [prn_type_other] ;
np_type_other = top cog org sem_ani ;
prnref = ref ;
prn_notres = rel dem ind itg pers ref ;
prn_notref = rel dem ind itg pers res ;
prn_demind = rel dem ind itg pers res ;
c_type = "@ADVLcs-ine→" "@ADVLcs-ela→" ;
np_type = ant [np_type_other] ;
n_type = g3 nomag coll ;
acr = acr ;
num_type = arab sem_year ;
sentinit = sentinit ;
adj_type = ord ;
abbr = abbr ;
gramtag = gram_tabbr gram_iabbr gram_numnoabbr gram_tnumabbr  ; 
gramtnumabbr = gram_tnumabbr ;
case = acc nom gen loc ine ela com ess ill ;
caseattr = acc nom gen loc ine ela com ess ill attr ;
casenotacc = nom gen ine ela com ess ill loc ;
comine = com ine ;
poss = ("" "") px1sg px1du px1pl px2sg px2du px2pl px3sg px3du px3pl ;
person = p1 p2 p3 ;
attr = attr ;
trigger = SUPN ;
inf = inf ;
foc = foc_neg-ge foc_pos-ge foc_neg-k foc_pos-k ;
comp = der_comp der_superl ;
infin = supn inf prfprc vabess prsprc ger "actio.ess" "actio.gen" "actio.loc" "actio.ela" "actio.ess" ;
accinfitforms = prfprc "actio.ess" ;
conneg = conneg ;
actiocase = "actio.ess" "actio.gen" "actio.loc" "actio.ela" ;
actioloc = "actio.loc" ;
actioela = "actio.ela" ;
neg = neg ;
qst = qst ;
cltl = cltl ;
trans = tv iv ;
mood = indic imp cond pot ;
mood_tense = "pot.pres" "cond.pres" ;
tense = pres pret ;
a_nomag = nomag ;
a_actio = actio ;
a_hab = ←hab→ ;
adpos = pr post ;
marks = cm sent ;
cc = cnjcoo ;
cs = cnjsub ;
pcle = pcle ;
a_vuota = ex_attr ;
person_number = "p1.sg" "p1.du" "p1.pl"
                "p2.sg" "p2.du" "p2.pl"
                "p3.sg" "p3.du" "p3.pl" ;
first_sec_person_number = "p1.sg" "p1.du" "p1.pl" "p2.sg" "p2.du" "p2.pl" ;
                
deriv = der_aadv der_adda der_ahkes der_ahtes der_ahtja der_ahtte der_ahttjá der_ahtti der_alla der_asste der_car der_caus der_d der_dahka der_dahtte der_dalla der_dasste der_dibme der_dimin der_duhtte der_duvva der_geahtes der_h der_halla der_inchl der_k der_l der_laagasj der_laakan der_ladda der_lahtte der_lasj der_lasste der_lágan der_lágán der_lis der_muš der_mus der_n der_nammasaš der_nammasasj der_nomact der_nomag der_nominstr der_passd der_passl der_passs der_r der_saš der_sasj der_segak der_st der_stahtte der_stalla der_stasste der_t der_tj der_u_a_åd der_vuota ;

adj2adj = der_dimin ;
pass = der_passl der_passs der_passd ;
v2n = der_dahka der_mus der_muš der_nomact der_nomag der_nominstr der_r ;
v2v = der_adda der_ahtti der_ahttjá der_asste der_caus der_d der_dahtte der_dalla der_dasste der_duhtte der_duvva der_h der_halla der_l der_ladda der_lahtte der_lasste  der_st der_stahtte der_stalla der_stasste der_tj der_u_a_åd  ;
v2vv = der_ahtja der_inchl der_passs der_passl der_passd der_alla ;
np2n = der_k ;
v2adj = der_lis der_ahkes  ;
n2n = der_dimin ;
n2adj = der_ahtes der_car der_geahtes der_lasj der_n der_sasj der_segak ; 
adj2n = der_vuota ;
adj2adv = der_aadv ;
cmp = cmp_sggen cmp_sgnom cmp_attr cmp_plgen cmp_sh cmp_oblhyph cmp_cit ;
hyph = cmp_hyph ;
onlycmp = cmp ;
cmpsplitr = cmp_splitr ;

semhum = sem_group sem_hum sem_hum-abstr sem_hum-prof sem_act_hum sem_ani_body-abstr_hum sem_ani_build_hum_txt sem_ani_group_hum sem_ani_hum sem_ani_hum_plc sem_ani_hum_time sem_aniprod_hum sem_body_group_hum sem_body_group_hum_time sem_body_hum sem_cat_group_hum sem_cat_group_hum_plc sem_clth_hum sem_domain_hum sem_edu_group_hum sem_edu_hum sem_event_hum sem_feat-psych_hum sem_fruit_hum sem_geom_hum_plc sem_group_hum sem_group_hum_org sem_group_hum_plc sem_group_hum_plc-abstr sem_group_hum_prod-vis sem_group_hum_time sem_hum_lang sem_hum_lang_plc sem_hum_lang_time sem_hum_mat_tool sem_hum_obj sem_hum_org sem_hum_part sem_hum_plant sem_hum_plc sem_hum_sign sem_hum_tool sem_hum_tool-it sem_hum_veh sem_hum_wthr ;

semtime = sem_time sem_time-clock sem_ani_hum_time sem_ani_time sem_body_group_hum_time sem_body_time sem_event_time sem_group_hum_time sem_hum_lang_time sem_measr_obj_time sem_measr_time sem_plc_time sem_plc_time_wthr sem_time_wthr ;

semother = sem_act sem_adr sem_amount sem_ani sem_aniprod sem_body sem_body-abstr sem_build sem_build-room sem_buildpart sem_cat sem_clth sem_clth-jewl sem_clthpart sem_ctain sem_ctain-abstr sem_ctain-clth sem_curr sem_date sem_dance sem_dir sem_domain sem_drink sem_dummytag sem_edu sem_event sem_feat sem_feat-phys sem_feat-psych sem_feat-measr sem_fem sem_food sem_food-med sem_fruit sem_furn sem_game sem_geom sem_ideol sem_id sem_lang sem_mal sem_mat sem_measr sem_money sem_obj sem_obj-clo sem_obj-cogn sem_obj-el sem_obj-ling sem_obj-rope sem_obj-surfc sem_org sem_part sem_perc-cogn sem_perc-emo sem_perc-phys sem_perc-psych sem_phonenr sem_plant sem_plantpart sem_plc sem_plc-abstr sem_plc-elevate sem_plc-line sem_plc-water sem_pos sem_process sem_prod sem_prod-audio sem_prod-cogn sem_prod-ling sem_prod-vis sem_rel sem_route sem_rule sem_semcon sem_sign sem_sport sem_state sem_state-sick sem_substnc sem_sur sem_symbol sem_tool sem_tool-catch sem_tool-clean sem_tool-it sem_tool-measr sem_tool-music sem_tool-write sem_txt sem_veh sem_wpn sem_wthr sem_year sem_act_fruit sem_act_group sem_act_plc sem_act_route sem_act_tool-it sem_amount_build sem_amount_semcon sem_ani_build sem_ani_buildpart sem_ani-fish sem_ani_group sem_ani_group_prod-vis sem_ani_plc sem_ani_plc_txt sem_ani_veh sem_aniprod_obj-clo sem_aniprod_perc-phys sem_aniprod_plc sem_aniprod_plc_route sem_body-abstr_feat-psych sem_body-abstr_prod-audio_semcon sem_body_body-abstr sem_body_clth sem_body_food sem_body_mat sem_body_measr sem_body_obj_tool-catch sem_body_plc sem_body_plc-elevate sem_build_clthpart sem_build_edu_org sem_build_event_org sem_build_obj sem_build_org sem_build_route sem_build-room_cat_ctain_mat sem_buildpart_cat sem_buildpart_cat_ctain sem_buildpart_cat_ctain_mat sem_buildpart_ctain sem_buildpart_ctain_mat sem_buildpart_ctain_obj sem_cat_edu sem_cat_obj sem_clth-jewl_curr sem_clth-jewl_curr_obj sem_clth-jewl_curr_obj_org sem_clth-jewl_fruit sem_clth-jewl_money sem_clth-jewl_plant sem_clth_obj-clo sem_ctain-abstr_org sem_ctain-clth_plant sem_ctain-clth_veh sem_ctain_feat-phys sem_ctain_furn sem_ctain_plc sem_ctain_tool sem_ctain_tool-measr sem_curr_org sem_dance_org sem_dance_prod-audio sem_domain_food-med sem_domain_prod-audio sem_drink_plant sem_edu_event sem_edu_geom sem_edu_mat sem_edu_org sem_event_food sem_event_plc sem_event_plc-elevate sem_feat-measr_plc sem_feat-phys_tool-write sem_feat-phys_veh sem_feat-phys_wthr sem_feat-psych_plc sem_food_obj-surfc sem_feat_plant sem_food_perc-phys sem_food_plant sem_food_sign sem_game_obj-play sem_geom_obj sem_group_org sem_group_prod-vis sem_group_sign sem_group_txt sem_lang_tool sem_mat_plant sem_mat_txt sem_measr_sign sem_money_obj sem_money_org sem_money_part sem_money_txt sem_obj-play sem_obj-play_sport sem_obj_semcon sem_obj_sign sem_obj_veh sem_clth-jewl_org sem_obj_symbol sem_org_rule sem_org_buildpart sem_org_txt sem_org_veh sem_part_prod-cogn sem_part_substnc sem_perc-emo_wthr sem_plant_plantpart sem_plant_tool sem_plant_tool-measr sem_plc-abstr_rel_state sem_plc-abstr_route sem_plc_pos sem_plc_route sem_plc_semcon sem_plc_state sem_plc_substnc sem_plc_substnc_wthr sem_plc_tool-catch sem_plc_txt sem_plc_wthr sem_prod-audio_txt sem_prod-cogn_txt sem_semcon_txt sem_obj_state sem_substnc_wthr sem_state-sick_substnc sem_obj-ling_obj-surfc sem_org_prod-audio sem_org_prod-cogn sem_org_prod-vis ;

semtag = [semtime] [semhum] [semother] ;

!!!!!!!!!!!!!!!
!! OUTPUT PATTERNS
!!!!!!!!!!!!!!!

VP: _.mood.tense.person.number.infin.sentinit ; !?
V: _.mood.tense.person.number.infin.function.sentinit ; !?
NegVP:  _.neg.mood.tense.conneg.function ;
NP: _.number.case.poss.cmp.hyph.onlycmp.foc.function ; 
PRN: _.prn_type.person.number.case.poss.attr.foc.sentinit.function ; 
S: _.function ; !?
InfinS: _ ;
AdvP: _.abbr.poss.function ;
A: _ ;
AP: _.attr.function ;
PP: _ ;
C: _ ;
PCLE: _ ;
CLB: _ ;
cm: _ ;
punct: _ ;
PCT: _ ;
ij: _ ;
IJ: _ ;
sent: _ ;
unknown: _ ;
APP: _ ;
cnjcoo: _ ;
cnjsub: _ ;
lquot: _ ;
rquot: _ ;
QUOT: _ ;
Name: _.np_type.number.case.function ; 
N: _.number.case.poss.cmp.hyph.onlycmp.function ; 
NUM: _.number.case ; 
n_only: <n>.acr.number.case.attr.poss.cmp.hyph.cmpsplitr.onlycmp ; 
n_abbr: <n>.abbr.gramtag.number.case.attr.hyph.cmpsplitr.onlycmp ;  !!! 
n_abbr_hyph: <n>.abbr.number.case.attr.hyph.onlycmp ;  !!! bare gramtnumabbr
n_abbr_splitr: <n>.abbr.cmp.cmpsplitr.onlycmp ;  !!! bare gramtnumabbr
ntype: <n>.n_type.number.case.poss.cmp.hyph.cmpsplitr.onlycmp ; 
nsplitr: <n>.n_type.cmp.cmpsplitr.onlycmp ; 
n_n: <n>.deriv.<n>.number.case.poss.cmp.hyph.onlycmp ;
n_type_n: <n>.n_type.deriv.<n>.number.case.poss.cmp.hyph.onlycmp ;
n_adj: <n>.deriv.<adj>.number.case.attr.poss.cmp.hyph.onlycmp ;
n_comp: <n>.comp.<adj>.number.case.attr.poss.cmp.hyph.onlycmp ;
n_adj_n: <n>.n2adj.<adj>.adj2n.<n>.number.case.attr.poss.cmp.hyph.onlycmp ;
n_adj_adv: <n>.n2adj.<adj>.adj2adv.<adv> ;
n_adj_comp_adv: <n>.n2adj.<adj>.comp.<adj>.adj2adv.<adv> ;


n: (if (1.abbr=abbr and 1.hyph = cmp_hyph) 1(n_abbr_hyph)
      elif (1.n2adj in n2adj and 1.adj2n in adj2n) 1(n_adj_n)
      elif (1.n2adj in n2adj and 1.comp in comp and 1.adj2adv in adj2adv) 1(n_adj_comp_adv)
      elif (1.n2adj in n2adj and 1.adj2adv in adj2adv) 1(n_adj_adv)
      elif (1.deriv in n2adj) 1(n_adj)
      elif (1.abbr=abbr and 1.cmpsplitr = cmp_splitr) 1(n_abbr_splitr)
      elif (1.abbr=abbr and 1.hyph="") 1(n_abbr)
      elif (1.pos_tag/tl=np and 1.deriv in np2n) 1(np_n)
      elif (1.pos_tag/tl=np) 1(np_other)
      elif (1.pos_tag/tl=prn) 1(prn_other)
      elif (1.pos_tag/tl=adj) 1(adj_pred)
      elif (1.pos_tag/tl=adv) 1(adv_only)
      elif (1.pos_tag/tl=vblex) 1(vblex_n)
      elif (1.n_type/tl in n_type and 1.deriv in n2n) 1(n_type_n) 
      elif (1.n_type/tl in n_type) 1(ntype) 
      elif (1.deriv in n2n) 1(n_n)
      elif (1.comp in comp) 1(n_comp)
      else 1(n_only)) ;


post_only: _ ;
post: (if (1.pos_tag/tl=adj) 1(adj_pred)
      elif (1.pos_tag/tl=n) 1(n_only)
    else 1(post_only)) ;
pr_only: _ ;
pr: (if (1.pos_tag/tl=adj) 1(adj_pred)
      elif (1.pos_tag/tl=n) 1(n_only)
    else 1(pr_only)) ;

adpos: _ ;
qst: _ ;
pcle : _.qst ;
adv_only: _.abbr.gramtag.poss ;
adv_to_noun: <n>.number.case ;  
adv_to_prn: <prn>.prn_type.case.person.number.attr ;  
adv_to_vblex: <vblex>.infin ;  

adv: (if (1.pos_tag/tl=n) 1(adv_to_noun)
     elif (1.pos_tag/tl=prn) 1(prn_other)
     elif (1.pos_tag/tl=vblex) 1(adv_to_vblex)
     elif (1.pos_tag/tl=adj) 1(adj_pred)
     elif (1.pos_tag/tl=cnjcoo) 1(cnjcoo)
     elif (1.pos_tag/tl=prn) 1(adv_to_prn)
     else 1(adv_only)) ;

num_only: _.num_type.number.case.attr.cmp.hyph.cmpsplitr.onlycmp ;
num: (if (1.pos_tag/tl=prn) 1(prn_other)
	  elif (1.num_type = arab and 1.case = acc) 1(num_only)[case=nom]
	  else 1(num_only)) ;

np_ant: <np>.<ant>.gender.number.case.attr.cmp.hyph.onlycmp ;
np_other: <np>.acr.number.case.attr.cmp.hyph.onlycmp ;
np_n: <np>.deriv.<n>.number.case ;
np: (if (1.np_type = ant) 1(np_ant)
     elif (1.deriv in np2n) 1(np_n)
      else 1(np_other)) ;
n_cmp : <n>.cmp.onlycmp ;

prn_pers: <prn>.<pers>.person.number.case ;
prn_ref: <prn>.<ref>.number.case.poss ;
prn_res: <prn>.<res>.case.person.number ;

prn_other: <prn>.prn_type_other.number.case.attr.foc ;
prn: (if (1.prn_type = pers) 1(prn_pers)
      elif (1.prn_type = ref) 1(prn_ref)
      elif (1.pos_tag/tl=adj) 1(adj)
      elif (1.pos_tag/tl=n) 1(n_only)
      else 1(prn_other)) ;

adj_to_noungen: <n>.n_type.<sg>.<gen> ;
adj_attr: <adj>.num_type.adj_type.attr.cmp.cmpsplitr.onlycmp ;
adj_pred: <adj>.adj_type.number.case.poss.cmp.cmpsplitr.onlycmp ;
adj_comp: <adj>.comp.<adj>.number.attr.case.poss.cmp.onlycmp ;
adj_adv_comp:<adj>.comp.<adj>.<der_aadv>.<adv> ;
adj_adv:_.<der_aadv>.<adv> ;
adj_adj:_.<der_dimin>.<adj>.number.case.attr  ;
adj_comp_adj:_.comp.<adj>.<der_dimin>.<adj>.number.case.attr  ;
adj_n: <adj>.adj2n.<n>.number.case.poss.cmp.hyph.onlycmp ;
adj_to_n: <n>.number.case.poss.cmp.hyph.onlycmp ;

adj: (if (1.pos_tag/tl=n and 1.case/tl=gen) 1(adj_to_noungen)
     elif (1.pos_tag/tl=n and 1.deriv in n2adj) 1(n_adj)
     elif (1.pos_tag/tl=n) 1(adj_to_n)
     elif (1.pos_tag/tl=prn) 1(prn_other)
     elif (1.pos_tag/tl=vblex) 1(vblex_infin)
     elif (1.deriv = der_aadv and 1.comp ="") 1(adj_adv)
     elif (1.deriv = der_aadv and 1.comp in comp) 1(adj_adv_comp)
     elif (1.deriv in adj2adj and 1.comp in comp) 1(adj_comp_adj)
     elif (1.deriv in adj2adj) 1(adj_adj)
     elif (1.adj2n in adj2n) 1(adj_n)
     elif (1.adj2adv = "" and 1.comp in comp) 1(adj_comp) 
     elif (1.attr = attr) 1(adj_attr)
     else 1(adj_pred)) ;


vblex_inchl: <vblex>.<der_inchl>.<vblex>.mood.tense.person.number ;     
vblex_fin: <vblex>.neg.mood.tense.person.number.qst ; 
vblex_liehket_fin: <vblex>.neg.mood.tense.person.number.qst.sentinit ; 
vblex_infin: <vblex>.tense.infin ;
vblex_conneg: <vblex>.mood.conneg ;
vblex_cmpsplitr: <vblex>.v2n.<n>.cmp.cmpsplitr.onlycmp  ;
vblex_vblex_cmpsplitr: <vblex>.deriv.<vblex>.v2n.<n>.cmp.cmpsplitr.onlycmp  ;
vblex_liehket_conneg: <vblex>.mood.tense.conneg ;
vblex_mood2: <vblex>.neg.mood.person.number.qst ;
vblex_n: <vblex>.v2n.<n>.number.case.poss.cmp.onlycmp ;
vblex_vblex: <vblex>.v2v.<vblex>.mood.infin.tense.person.number.qst ;
vblex_v2vv: <vblex>.v2vv.<vblex>.mood.infin.tense.person.number.qst ;
vblex_vblex_vblex: <vblex>.v2v.<vblex>.v2vv.<vblex>.mood.infin.tense.person.number.qst ;
vblex_vblex_n: <vblex>.v2v.<vblex>.v2n.<n>.number.case.poss.cmp.onlycmp ;
vblex_vblex_vblex_n: <vblex>.v2v.<vblex>.v2vv.<vblex>.v2n.<n>.number.case.poss.cmp.onlycmp ;
vblex_n_adj: <vblex>.v2n.<n>.n2adj.<adj>.attr ;
vblex_v2vv_conneg: <vblex>.v2vv.<vblex>.mood.conneg ;
vblex_v2v_conneg: <vblex>.v2v.<vblex>.mood.conneg ;
vblex_vblex_vblex_conneg: <vblex>.v2v.<vblex>.v2vv.<vblex>.mood.conneg ;
vblex_v2vv_conneg: <vblex>.v2vv.<vblex>.mood.conneg ;
vblex_to_adj: <adj>.attr.number.case ;

vblex_splitr: (if (1.cmpsplitr in cmpsplitr and 1.v2v in v2v) 1(vblex_vblex_cmpsplitr)
               else 1(vblex_cmpsplitr)
               );


vblex: (if (1.conneg = conneg and 1.lem/tl incl liehket and 1.mood = "indic") 1(vblex_liehket_conneg)
        elif (1.pos_tag/tl=adj) 1(vblex_to_adj)
        elif (1.infin = "" and 1.conneg = "" and 1.lem/tl incl liehket and 1.mood = "indic") 1(vblex_liehket_fin)
        elif (1.v2v in v2v and 1.v2vv in v2vv and 1.v2n in v2n) 1(vblex_vblex_vblex_n)
        elif (1.v2v in v2v and 1.v2n in v2n) 1(vblex_vblex_n)
        elif (1.v2v in v2v and 1.v2vv in v2vv and 1.conneg = "") 1(vblex_vblex_vblex)
        elif (1.v2v="" and 1.v2vv in v2vv and 1.conneg = "") 1(vblex_v2vv)
        elif (1.v2v in v2v and 1.conneg = "") 1(vblex_vblex)
        elif (1.v2vv in v2vv and 1.conneg = "") 1(vblex_v2vv)
        elif (1.v2v in v2v and 1.v2vv in v2vv and 1.conneg = conneg) 1(vblex_vblex_vblex_conneg)
        elif (1.v2v="" and 1.v2vv in v2vv and 1.conneg = conneg) 1(vblex_v2vv_conneg)
        elif (1.v2v in v2v and 1.conneg = conneg) 1(vblex_v2v_conneg)
        elif (1.v2n in v2n and 1.n2adj in n2adj) 1(vblex_n_adj)
        elif (1.v2n in v2n) 1(vblex_n)
        elif (1.pos_tag/tl=adv) 1(adv_only)
        elif (1.conneg = conneg) 1(vblex_conneg)
        elif (1.mood = "cond" or 1.mood = "pot") 1(vblex_mood2)
        elif  (1.infin = "") 1(vblex_fin)
        else 1(vblex_infin)
       ) ;

vblex_v2v: (
          if (1.v2vv=der_inchl and 1.lem incl verb3st)   1(vblex)[v2vv=der_ahtja]
        elif (1.v2v=der_h)                              1(vblex)[v2v=der_d]
        elif (1.v2v=der_halla)                          1(vblex)[v2v=der_dalla]
        elif (1.v2v=der_d and 1.v2vv=der_passl)         1(vblex)[v2v=""]
        elif (1.v2v=der_h and 1.lem in verb3st)         1(vblex)[v2v=der_caus]
        elif (1.v2vv=der_passs)                          1(vblex)[v2vv=der_passl]
        else                                            1(vblex)
       ) ;


refl2pers: (
          if (1.poss=px1sg)   1(prn_pers)[lem=mån,number=sg,person=p1]
          elif (1.poss=px2sg)   1(prn_pers)[lem=dån,number=sg,person=p2]
          elif (1.poss=px3sg)   1(prn_pers)[lem=sån,number=sg,person=p3]
          if (1.poss=px1du)   1(prn_pers)[lem=mån,number=du,person=p1]
          elif (1.poss=px2du)   1(prn_pers)[lem=dån,number=du,person=p2]
          elif (1.poss=px3du)   1(prn_pers)[lem=sån,number=du,person=p3]
          if (1.poss=px1pl)   1(prn_pers)[lem=mån,number=pl,person=p1]
          elif (1.poss=px2pl)   1(prn_pers)[lem=dån,number=pl,person=p2]
          elif (1.poss=px3pl)   1(prn_pers)[lem=sån,number=pl,person=p3]
      else 1(prn_pers)
       ) ;



!!!!!!!!!!!!!!!
!! TAG-REWRITE RULES
!!!!!!!!!!!!!!!

!person_number > poss : "p1.sg" px1sg, "p1.du" px1du, "p1.pl" px1pl,
!                       "p2.sg" px2sg, "p2.du" px2du, "p2.pl" px2pl,
!                       "p3.sg" px3sg, "p3.du" px3du, "p3.pl" px3pl ;
!poss > person_number : px1sg "p1.sg", px1du "p1.du", px1pl "p1.pl",
!                            px2sg "p2.sg", px2du "p2.du", px2pl "p2.pl",
!                            px3sg "p3.sg", px3du "p3.du", px3pl "p3.pl" ;
! a rule for converting person+number tag pairs to possessive tags
! this applies if you write poss=1.person_number or 1.person_number>poss
! "" because these are pairs instead of single tags

poss > person : px1sg p1, px1du p1, px1pl p1,
                px2sg p2, px2du p2, px2pl p2,
                px3sg p3, px3du p3, px3pl p3 ;

poss > number : px1sg sg, px1du du, px1pl pl,
                px2sg sg, px2du du, px2pl pl,
                px3sg sg, px3du du, px3pl pl ;

case > case : loc ine ;

foc > foc : foc_pos-ge foc_pos-k, foc_neg-ge foc_neg-k ; !from sme to smj type

!!!!!!!!!!!!!!!
!! REDUCTION RULES
!!!!!!!!!!!!!!!

kin-nouns = "ieddne" "niejdda" "báhttja" "áhttje" "áhkko" "áddjá" "viellja" "oabbá" ;

foclemmas = "okta" ;

not-move-adv = "aj" "duodaj" "vargga" "náv" "nav" "gal" "de" ;

smj-supn-triggerverbs = "bivddit" "bovdet" "barggat" "dahkat" "hásstalit" "vælggogissan dahkat" "ávvudallat" "ávttjit" "geatnegahttit" "åhtsåt" "ohcat" ;

adj_nottriggingsupn = "ahket" "ájnas" "álkke" "gássjel" "gievrra" "guhkálasj" "hiebalasj" "suohtas" "tjiehppe" "vájvve" "váttis" ;

not-usually-supn-verbs = "subtsastit" "liehket" ;

sme-rek-verbs = "lijkkut" "berustit" "ballat" ;

moveverbs = "vuolgget" "mannat" "bisánit" ;

copulas = "liehket" "leat" "šaddat" "sjaddat" ;
liehket = "liehket" ;
ij = "ij" ;
nonumprn = "visot" ;

possadv = "bieles" "gaskan" "vuolen" ;
elapost = "rájes" ;
actio_ill_verbs = "liikot" ;
loc2acc_verbs = "guossidit" ;
ill2ine_verbs = "báhtset" "báhcit" ;
birrapx_verbs = "geahččat" ;
loc_verbs = "hållat" "subtsastit" "ságastallat" "báhtset" "hupmat" "muitalit" "ságastallat" ;
muitalit_vblex = "subtsastit" "almodit" "javllat" "mierredit" ; 
hållat_verbs = "hållat" "ságastallat" ;
loc2ill_verbs = "sæbrrat" ;
acc2ela_verbs = "hieredit" ;
acc2ill_verbs = "vájkkudit" "tjágŋat" "guosskat" ;
com2ill_verbs = "vásstedit" "oktiivástidit" ;
loc2com_verbs = "rahtjat" ;
auxverbs = "áigut" "ájggot" "ájádallat" "berret" "bierrit" "galgat" "galggat" "dáhttut" "háliidit" "hæhttut" "leat" "liehket" "máhttet" "máhttit" "sáhttit" "sihtat" ;
attrprn = "eará" "ietjá" "juohke" "juohkka" "dakkár" "iešguhte" "iesjguhti" "iešguhtet" "galle" "galla" "buot" "makkir" "makkár" "moadde" "muhtem" "muhtin" "muhtun" ;
prnnotfocsme =  "mihkke" "guhtemuš" "iešguhtet" ;
prnnotfocsmj = "soames" "mige" ;
placetimeadv = "odne" "ikte" "ihttin" "dalle" "uddni" "idet" "iektu" "dalloj" "doppe" "gos" "gånnå" "álo" "ain" "ájn" ;

dadjat_verbs = "almmuhit" "almodit" "ballat" "čájehit" "dadjat" "doaivut" "doajvvot" "dovdat" "dåbddåt" "dåbddåt¹" "dåbdåstit" "gáibidit" "gájbbedit" "gielestit" "javllat" "jáhkket" "jáhkkit" "jurddahit" "jurddašit" "lohkat" "låhkåt" "meidnet" "miejnnit" "meroštallat" "merustallat" "miejnnit" "mierredit" "muitalit" "navdit" "oaidnit" "oaivvildit" "subtsastit" "sávvat" "sárnnot" "tjielggit" "tjuottjodit" "vuojnnet"  "vuornnot" "vuosedit"  ;

lohkat_verbs = "lohkat" "dadjat" "javllat" ; !ii loga váttisin

passshortverbs = "vuojnnet" ;

verb3st = "vájbbadit" "hiebadit" "sjaddadit" "gájddadit" "suddadit" "navddadit" "vavddadit" "gievddadit" "rievddadit" "háldadit" "niegadit" "jegadit" "segadit" "tsieggadit" "salggadit" "tjálggadit" "gærggadit" "ravggadit" "tjielgadit" "vuolgadit" "álgadit" "juogadit" "bargadit" "njágadit" "idjadit" "dádjadit" "biejadit" "goarjjadit" "tjuojadit" "gehtjadit" "gáhtjadit" "tjuottjadit" "báhkadit" "sáhkadit" "liekkadit" "tsiekkadit" "vikkadit" "davkkadit" "hávkkadit" "jávkkadit" "valkadit" "sjåpkadit" "jaskadit" "miesskadit" "guosskadit" "njuosskadit" "huvkadit" "gieladit" "bievlladit" "dibmadit" "semadit" "tjajmadit" "dåjmadit" "tjuolmadit" "nammadit" "almmadit" "tjalmmadit" "tjuolmmadit" "ármmadit" "gámadit" "dåmadit" "jiednadit" "viednadit" "vihpadit" "åhpadit" "låhpadit" "gahppadit" "sieradit" "bátsadit" "vuovsadit" "nahtadit" "giehtadit" "duhtadit" "ruhtadit" "láktadit" "mastadit" "asstadit" "masstadit" "goasstadit" "gástadit" "sjiehttadit" "suhttadit" "buvtadit" "åjvadit" "dálvadit" "livvadit" "oajvvadit" "suovvadit" "hærvvadit" "luvvadit" "sagŋadit" "loabedit" "gájbbedit" "álbedit" "hálbedit" "tjuorbedit" "gåbdedit" "diededit" "miededit" "bidedit" "vijdedit" "sirdedit" "åvdedit" "gåvdedit" "rádedit" "jådedit" "ráfedit" "irggedit" "bárggedit" "moalgedit" "tjuovgedit" "sjuvgedit" "bajedit" "ruodjedit" "galjedit" "sjivnnjedit" "givnjedit" "vuojedit" "galsjedit" "gietjedit" "miehtjedit" "bultjedit" "gártjedit" "loattjedit" "stávtjedit" "sloahkedit" "viehkedit" "sjuohkedit" "guhkedit" "gajkedit" "biesjkedit" "siekkedit" "bilkkedit" "rákkedit" "båkkedit" "njalkedit" "skoalkedit" "hielkedit" "baskedit" "tjoaskedit" "nuoskedit" "biesskedit" "tsuskedit" "nåskedit" "tsavkedit" "livkedit" "nivkedit" "bávkedit" "jaledit" "skoaledit" "tsieledit" "vieledit" "biledit" "bielledit" "vuoledit" "háledit" "tjáledit" "hábmedit" "galmmedit" "gåmedit" "banedit" "manedit" "oanedit" "loanedit" "guddnedit" "ienedit" "dienedit" "jienedit" "linedit" "riejnedit" "bijnedit" "binnedit" "sárnnedit" "unnedit" "gánnedit" "iehpedit" "giehpedit" "duoppedit" "dáppedit" "dåppedit" "smaredit" "goaredit" "goabredit" "ieredit" "hieredit" "vieredit" "buoredit" "stuoredit" "doarredit" "dierredit" "mierredit" "láhkamierredit" "lasedit" "lamsedit" "vuosedit" "dássedit" "joatsedit" "uhtsedit" "giettsedit" "váttsedit" "gåtsedit" "givsedit" "mávsedit" "másedit" "vásedit" "låsedit" "luohtedit" "hiejtedit" "goastedit" "koastedit" "vásstedit" "moattedit" "guottedit" "gáttedit" "davedit" "slijvedit" "rujvedit" "vájvedit" "gárvedit" "buolvvedit" "árvvedit" "maŋedit" "tjieŋedit" "sagŋedit" "sisŋedit" "sahkkidit" "tsahkkidit" "dåhkkidit" "tjåhkkidit" "validit" "gallidit" "viellidit" "buollidit" "ållidit" "dållidit" "háhppidit" "sjierridit" "ánssidit" "guossidit" "aktidit" "duolvvidit" "guggŋidit" "dåbdijdit" "bådijdit" "salgijdit" "njálgijdit" "gålgijdit" "njålgijdit" "gurgijdit" "bårgijdit" "jårgijdit" "tjuovgijdit" "risjijdit" "tjátjijdit" "smáhkijdit" "låsjkijdit" "mukkijdit" "tjåskijdit" "guosmijdit" "tsivnijdit" "dabrijdit" "jurijdit" "tjivrijdit" "suvrijdit" "gárijdit" "mårijdit" "habsijdit" "bisijdit" "hapsijdit" "guohtsijdit" "båhtsijdit" "njattijdit" "skilájdit" "imájdit" "vájaldit" "syhkaldit" "jakkaldit" "jiekkaldit" "suojvaldit" "bárggeldit" "tjuottjeldit" "åskeldit" "maneldit" "vuosteldit" "vatteldit" "naveldit" "sájveldit" "tjievvildit" "vajoldit" "budáldit" "ganjáldit" "biváldit" "njárbbodit" "tjábbodit" "noadodit" "vijddodit" "buojddodit" "vájddodit" "gærddodit" "suddodit" "vuododit" "bivdodit" "soaggodit" "lijggodit" "rájggodit" "nælggodit" "ålgodit" "gurgodit" "vágodit" "oadjodit" "vuodjodit" "lådjodit" "galljodit" "luojodit" "girjodit" "buossjodit" "rássjodit" "gártjodit" "tjuottjodit" "tsoahkodit" "suohkodit" "buojkodit" "næjkodit" "boakkodit" "biekkodit" "goalkodit" "tsoalkodit" "nuoskodit" "basskodit" "tjoasskodit" "båŋkodit" "boalodit" "allodit" "tjallodit" "goallodit" "sillodit" "juollodit" "vuollodit" "gálodit" "hibmodit" "fábmodit" "almodit" "ilmodit" "joajmmodit" "slæmmodit" "gåmodit" "binnodit" "sánodit" "gihpodit" "dæhppodit" "vuorodit" "garrodit" "irrodit" "hirrodit" "skirrodit" "gievrrodit" "divrrodit" "suvrrodit" "várrodit" "værrodit" "návrodit" "basodit" "hasodit" "bisodit" "guossodit" "låssodit" "hæssodit" "håhtsodit" "njátsodit" "viertodit" "goasstodit" "vasstodit" "ruosstodit" "hástodit" "dættodit" "ævtodit" "gárvodit" "livvodit" "tjiegŋodit" "slimbardit" "slåbardit" "skuoldardit" "vándardit" "tjiegardit" "guokkardit" "lillardit" "gabmardit" "giemardit" "sáŋardit" "náberdit" "skutjerdit" "gåbmerdit" "dieverdit" "skidárdit" "slidárdit" "tjagárdit" "gitjárdit" "gamárdit" "vitsárdit" "jårbudit" "rádudit" "ráfudit" "vielgudit" "gilgudit" "suorgudit" "tjuovgudit" "bahudit" "addjudit" "sjevnjudit" "gåhtjudit" "åttjudit" "måjudit" "tsehkudit" "rusjkudit" "vájkkudit" "låkkudit" "småkkudit" "vuorkudit" "viskudit" "tjeludit" "jalludit" "lásjmudit" "almmudit" "germudit" "gámudit" "ruonudit" "lånudit" "tjáhpudit" "smårudit" "ruopsudit" "juvsudit" "fásstudit" "dålvudit" "ávvudit" "vuorbbádit" "tjadádit" "noaddádit" "hávddádit" "bagádit" "lagádit" "riegádit" "fággádit" "virgádit" "snjurgádit" "mugádit" "mægádit" "rægádit" "risjádit" "gatjádit" "snjibtjádit" "tjiehkádit" "goajkádit" "jæskádit" "njoaládit" "ælládit" "suoládit" "tjajmádit" "tjanádit" "manádit" "tjáhppádit" "moarádit" "sirádit" "basádit" "muossádit" "gæssádit" "luojttádit" "mujttádit" "såjddådit" "nårddådit" "håjggådit" "tjålggådit" "dåssjådit" "gåttjådit" "måjådit" "tjåhkådit" "gåjkkådit" "tsåkkådit" "gållådit" "mållådit" "gålådit" "tjårmmådit" "bårådit" "håhtsådit" "åtsådit" "gåtsådit" "njåtsådit" "jåvsådit" "båsådit" "gåsådit" "jåttådit" "gåvådit" "dågŋådit" "sjánjagit" "bávtjagit" "ganugit" "dárbahit" "návddahit" "givnnjahit" "jalkkahit" "merkahit" "vellahit" "vællahit" "huomahit" "dabrrahit" "gahtsahit" "huhttahit" "vájvahit" "duodjuhit" "háhkuhit" "ræjnnuhit" "ruhtsuhit" "huomáhit" "tjåhkkåhit" "idatjit" "girdatjit" "vuordatjit" "bårdatjit" "bivdatjit" "ådatjit" "begatjit" "sjavnjatjit" "vuotjatjit" "bajkatjit" "belkatjit" "gáskatjit" "buolatjit" "gálatjit" "tjálatjit" "tsábmatjit" "bájnatjit" "bånatjit" "váratjit" "váttsatjit" "mávsatjit" "bájtatjit" "májstatjit" "åstatjit" "garvatjit" "harvatjit" "baldáskit" "vaddalit" "rijddalit" "guoddalit" "tjoavddalit" "bivddalit" "balldalit" "gulldalit" "válldalit" "tsirggalit" "gurggalit" "gárggalit" "suodjalit" "dådjalit" "doarjjalit" "várjjalit" "sáhtjalit" "gæhttjalit" "næjkkalit" "goalkkalit" "ravkkalit" "livkkalit" "nivkkalit" "gasskalit" "adnalit" "vuojnnalit" "bassalit" "diehtalit" "båhtalit" "biktalit" "buktalit" "nuktalit" "hásstalit" "bæsstalit" "bæhttalit" "gijttalit" "luojttalit" "mujttalit" "hæjttalit" "æjvvalit" "árvvalit" "dieddelit" "vuodjelit" "tjuodtjelit" "tjuovvolit" "skerrulit" "navválit" "gåddålit" "bårggålit" "jårggålit" "tsåggålit" "dådjålit" "råhkålit" "åhtsålit" "håhttsålit" "jåhtålit" "båktålit" "giddanit" "liegganit" "suorgganit" "sadjanit" "lahkanit" "sahkanit" "sehkanit" "tjåhkanit" "báhkkanit" "boarkkanit" "tsuovkkanit" "gibmanit" "almmanit" "rájnnanit" "hehpanit" "duohpanit" "sierranit" "njuorranit" "bæjsstanit" "luottanit" "hevvanit" "gæjvvanit" "luovvanit" "ålggunit" "bahunit" "hedjunit" "vádnunit" "nannunit" "guorrunit" "gárvvunit" "sjávvunit" "maŋŋunit" "duobbánit" "dábbánit" "vijddánit" "gáddánit" "rájggánit" "badjánit" "ádjánit" "hádjánit" "tjádjánit" "hárjjánit" "lassjánit" "boaktjánit" "gajkkánit" "hoavkkánit" "allánit" "gallánit" "doallánit" "vuollánit" "lullánit" "hállánit" "vællánit" "gæhppánit" "buorránit" "ærránit" "værránit" "bisánit" "lassánit" "bissánit" "guoktánit" "davvánit" "gárvvánit" "åvddånit" "gåvddånit" "hådjånit" "bårjjånit" "håhkkånit" "smållånit" "gåbmånit" "sårmmånit" "dårrånit" "båhtånit" "báhtarit" "stávttjurit" "njimmurit" "ginntsurit" "tsaggasit" "tjavggasit" "tsakkasit" "tjiesskasit" "nuollasit" "njámmasit" "tjadnasit" "rahpasit" "dahppasit" "guorrasit" "sárrasit" "njadtsasit" "máhttsasit" "harttsasit" "rahtasit" "basstasit" "konkurssit" "buodusit" "hádjusit" "mådjusit" "målssusit" "ávvusit" "tjoavddásit" "tjuolldásit" "juohkásit" "njuohkásit" "gásskásit" "tjállásit" "jávvásit" "tjávvásit" "bådnjåsit" "båhtjåsit" "råhtåsit" "rábastit" "duodastit" "sárgastit" "ságastit" "berjastit" "vilsjastit" "ruossjastit" "gehtjastit" "tjuottjastit" "njahkastit" "svahkastit" "sihkastit" "tsakkastit" "biekkastit" "dálkastit" "njaskastit" "illastit" "lávlastit" "tjuojmastit" "duolmastit" "suomastit" "tjuormastit" "åmastit" "jienastit" "májnastit" "tjerastit" "subtsastit" "gartsastit" "hartsastit" "gattsastit" "njattsastit" "ruohtastit" "suovastit" "skielbestit" "rubestit" "srubestit" "strubestit" "oadestit" "soadestit" "bidestit" "tjidestit" "suojgestit" "doargestit" "gurgestit" "gárgestit" "bårgestit" "jårgestit" "jugestit" "sluvgestit" "bávtjestit" "rájkestit" "bálkestit" "dárkestit" "duvkestit" "alestit" "gielestit" "málestit" "njamestit" "ármestit" "lånestit" "oahpestit" "doarestit" "oasestit" "tsåjtsestit" "luojtestit" "vattestit" "rejddistit" "boagostit" "boakkostit" "gaskostit" "bælostit" "tjalmostit" "njálmostit" "guovdustit" "berustit" "merustit" "ájrustit" "dárustit" "vástustit" "ladástit" "jugástit" "ijástit" "salástit" "gulástit" "sulástit" "sámástit" "ganástit" "nuppástit" "birástit" "gæsástit" "dåbdåstit" "låjdåstit" "åvdåstit" "ådåstit" "bådåstit" "jårgåstit" "bårjåstit" "måhkåstit" "råkkåstit" "bålåstit" "båråstit" "måråstit" "målsåstit" "måttsåstit" "båsåstit" "båltåstit" "gåvåstit" ;

NP ->  "N:n" 1: %n.*.[case] { %1[lemcase=$lemcase]} 
	| "N:n.cmp n" 3: n.*.cmp %n.*.[case] { 1[lemcase=$lemcase,cmp=(if (1.pos_tag/tr=adj) cmp_attr else 1.cmp)] + %2 } 
	| "N:np.cmp n" 3: np.*.cmp %n.*.[case] { 1[lemcase=$lemcase,hyph=cmp_hyph] + %2} 
	| "N:np.cmp n" 3: np.*.cmp n.*.cmp %n.*.[case] { 1[lemcase=$lemcase,hyph=cmp_hyph] + 2 + %3} ! Norggameašttirgilvvut
	| "N:n.cmp n.cmp n" 3: n.*.cmp n.*.cmp %n.*.[case] { 1[lemcase=$lemcase] + 2 + %3} ! ráđđeaddinbálvalus
	| "N:n.cmp n.cmp n.cmp n" 3: n.*.cmp n.*.cmp n.*.cmp %n.*.[case] { 1[lemcase=$lemcase] + 2 + 3 + %4} !!! skuvlaohcanáigemearit
	| "N:np.cmp n" 3: np.*.cmp %n.*.[case] { 1[lemcase=$lemcase,hyph=cmp_hyph] + %2} !!! Nobelkomitea
	| "N:num.cmp n" 3: num.*.cmp %n.*.[case] { 1[lemcase=$lemcase,hyph=cmp_hyph] + %2} !!! njealje-bearraša
	| "N:adj.cmp n" 3: adj.*.cmp %n.*.[case] { 1[lemcase=$lemcase,cmp=(if (1.adj_type="") cmp_attr else 1.cmp)] + %2} 
	| "N:adj.cmp n n" 3: adj.*.cmp n.*.cmp %n.*.[case] { 1[lemcase=$lemcase,cmp=(if (1.pos_tag/tl=n) cmp_sgnom elif (1.adj_type="") cmp_attr else 1.cmp)] + 2 + %3} 
	| "N:n.cmp vblex" 3: n.*.cmp %vblex ?(2.onlycmp= "") { 1[lemcase=$lemcase] + %2(vblex_v2v) } !!! koronačavgen
	| "N:n.cmp vblex n" 2: n.*.cmp vblex.*.cmp %n.*.[case] { 1[lemcase=$lemcase] + 2 + %3} 
	| "N:n.cmp n.cmp vblex" 2: n.*.cmp n.*.cmp %vblex ?(3.onlycmp= "") { 1[lemcase=$lemcase] + 2 + %3} 
	| "N:vblex.cmp n" 2: vblex.*.cmp %n.*.[case] { 1(vblex_v2v)[lemcase=$lemcase] + %2} 
	| "N:vblex.cmp vblex" 2: vblex.*.cmp %vblex ?(2.onlycmp= "") { 1(vblex_v2v)[lemcase=$lemcase] + %2(vblex_v2v) } 
	| "N:vblex.cmp vblex.cmp n" 2: vblex.*.cmp vblex.*.cmp %n.*.[case] { 1(vblex_v2v)[lemcase=$lemcase] + 2(vblex_v2v) + %3} 
	| "N:vblex.cmp n.cmp vblex" 2: vblex.*.cmp n.*.cmp %vblex ?(3.onlycmp= "") { 1(vblex_v2v)[lemcase=$lemcase] + 2 + %3(vblex_v2v) } 
	| "N:vblex.cmp n.cmp n" 2: vblex.*.cmp n.*.cmp %n.*.[case] { 1(vblex_v2v)[lemcase=$lemcase] + 2 + %3} 
	| "N:vblex.v2n" 2: %vblex.*.[v2n].*.$function ?(1.onlycmp = "") { %1[lemcase=$lemcase,v2n=(if (1.v2n=der_muš) 
	der_mus else 1.v2n),v2v=(if (1.v2v=der_h and 1.lem in verb3st) der_caus elif (1.v2v=der_h) der_d elif (1.v2v=der_halla) der_dalla else 1.v2v)]} !
	| "n.splitr" 3: %n.*."cmp_splitr" { %1[lemcase=$lemcase] } ! A-
	| "n.splitr" 3: %vblex.*.[v2n].*."cmp_splitr" { %1(vblex_splitr)[lemcase=$lemcase,deriv=(if (1.v2v=der_h) der_d elif (1.v2v=der_halla) der_dalla else 1.deriv)] } ! várren- ja ohcanlobiid
	| "NP:maid NP" 1: maid@adv %NP.*.[argument] { %2[lemcase=1.lemcase] _ 1[lemcase=2.lemcase]}
	| "NP:NP maid" 1:  %NP maid@adv { %1[lemcase=$lemcase] _ 2}
	| "NP:NP ieš" 1:  %NP prn.*."@N←" { %1[lemcase=$lemcase] _ 2}
	| "NP:NP prn" 1:  %NP prn.*."@Num←" { %1[lemcase=$lemcase] _ 2}
	| "NP:NP vblex" 1:  %NP vblex.*."@N←" { %1[lemcase=$lemcase] _ 2}
	;

NP -> "Name:np" 1: %np.*.[case].$function { %1 } 
	| "Name:np eret" 1: %np.*.ela eret@adv { %1 }
	| "Name:np.cmp np" 3: np.*.cmp %np.*.[caseattr] { 1[lemcase=$lemcase,hyph=cmp_hyph] + %2 } !!! Ann-Marie
	| "Name:np.cmp np.cmp np" 3: np.*.cmp np.*.cmp %np { 1[lemcase=$lemcase,hyph=cmp_hyph] + 2[hyph=cmp_hyph] + %3 } !!! 
	| "Name:np.cmp np.cmp np" 3: np.*.cmp np.*.cmp %n { 1[lemcase=$lemcase,hyph=cmp_hyph] + 2[hyph=cmp_hyph] + %3 } !!! 
	| "Name:n.cmp np" 3: n.*.cmp %np { 1[lemcase=$lemcase,hyph=cmp_hyph] + %2 } !!! Davvi-Suopma	
	| "Name:N Name" 1: np.*."@→N" %NP {1 _ %2 } !Samuel John N. Anti, Verdens Gang aviisii
	| "Name:N Name" 1: n.*."@→N" %np {1 _ %2 } !Nils I. Hætta
	| "Name:N Name" 1: np.*."@→N" adj.*."@→N" %NP {1 _ 2 _ %3 } ! ! Suoma Alimushálddáhusriektái
	| "Name:N Name" 1: np.*."@→N" adj.*."@→N" adj.*."@→N" %NP {1 _ 2 _ 3 _ %4 } ! ! Deanu gieldda ođđa sadjásaš ráđđealmmái
!!!	| "Name:np cnp np" 1: NP cnjcoo."@CNP" %NP.*.$function [$number=(if (1.np_type=ant and 3.np_type=ant) du else 3.number)] { 1[lemcase=$lemcase] _ 2 _ %3[number=3.number] }
	| "Name:np missing" %np.*.attr unknown  { %1 _ 2 }
	;

NP -> "NP:N PCLE" 1: %NP PCLE { %1[lemcase=$lemcase] _ 2 }
	| "NP:N num.arab" 1: %NP  num.arab (if (1.lem=paragráffa){ 2[pos_tag="adj.arab.ord",num_type="",case=attr,number=""] _ %1[case=(if (2.case = ela) ine else 2.case)] } else { %1[lemcase=$lemcase] _ 2 })
	| "NP:NP cnjcoo N" 2: NP cnjcoo."@CNP" %NP { 1[lemcase=$lemcase] _ 2 _ %3 } !!! coordination
	| "NP:NP cnjcoo NP" 1: NP cnjcoo."@CNP" %NP { 1[lemcase=$lemcase] _ 2 _ %3 } !!! coordination
	| "NP:NP cnjcoo N" 1: NP.*."@→N" cnjcoo."@CNP" %NP { 1[lemcase=$lemcase] _ 2 _ %3 } !!! coordination
!!!	| "NP:NP, NP cnjcoo NP" 1: NP ,@cm NP cnjcoo."@CNP" %NP { 1[lemcase=$lemcase] 2 _ 3 _ 4 _ %5 } !!! coordination
!!!	| "NP:NP, NP, NP cnjcoo NP" 1: NP ,@cm NP ,@cm NP cnjcoo."@CNP" %NP { 1[lemcase=$lemcase] 2 _ 3 4 _ 5 _ 6 _ %7 } !!! coordination
	| "NP:NP N" 2: NP.*."@→N" %NP { 1 _ 2} !sámi máná
	| "NP:NP N" 2: adv.[right] NP.*."@→N" %NP { 1 _ 2 _ %3} !
!!!	| "NP:NP N" 2: adv.[right] NP.*."@→N" %Name { 1 _ 2 _ %3} !nu fámolaš Suomas
	| "NP:AP N" 1: AP.*."@→N" %NP { 1 _ %2 }
	| "NP:vblex@→N N" 1: vblex.*."@→N" %NP { 1 _ %2 }
	| "NP:AP N" 1: n.[n2adj].*."@→N" %NP { 1 _ %2 } !ulbmillaš áŋgiruššan
	| "NP:A to N" 1: %adj.*.[adj2n] {%1(adj_n)[lemcase=$lemcase] } !girjáivuođa
	| "NP:adv N" 1: adv."@→N" %NP { 1 _ %2}
!!!	| "NP:buorre N" 1: buorre@adj %NP { 1 _ %2}
	| "okta nubbi NP" 3: okta@num nubbi@prn %NP { 2[lem=muhtem] _ %3[number=pl] }
	| "NP:attrprn N" 4: [attrprn]@prn.*."@→N" %NP { 1[foc=(if (1.lem in prnnotfocsmj) "" else 1.foc)] _ %2} 
	| "NP:prn N" 3: prn.*."@→N" %NP { 1[lemcase=$lemcase,case=(if (1.case=loc and 2.function in advlela) ela elif (1.case=loc) ine elif (1.lem=moadda and 1.number="sg" and 2.case=gen) nom else 1.case)] _ %2} 
	| "NP:prn AP N" 3: prn.*."@→A" AP.attr %NP { 1[lemcase=$lemcase,attr=(if (1.lem=moadda) "" else 1.attr)] _ 2 _ %3[case=(if (1.case=nom) gen else 3.case)]} 
	| "NP:prn AP" 3: prn.dem.*.nom %adj.*.nom { 1[lemcase=$lemcase,case=(if (1.case=loc and 2.function in advlela) ela elif (1.case=loc) ine else 1.case)] _ %2} 
	| "NP:prn N" 3: prn.*."@→N" %NP { 1[lemcase=$lemcase] _ %2} 
	| "NP:prn AP N" 3: prn.*."@→N" adj.*."@→N" %NP { 1[lemcase=$lemcase] _ 2 _ %3} 
	| "NP:gohcuid alde > V" 4: %gohcu@n.*.pl.gen { %1(vblex_infin)[lemcase=$lemcase] } !denne må generaliseres, hvordan uttrykke pos?

!!!	| "NP:Name" 1: %Name { %1 }

	| "NP:jagi num.sem_year" 1: %jahki@n.*.gen num.sem_year {  %1[case=ine] _ 2 }
	| "NP:num.sem_year" 1: %num.sem_year { %1[case=nom] }
	| "NP:num.sem_year.ine" 3: %num.sem_year.sg.loc { jahke@n.sg.ine _ %1[case=nom] }
	| "NP:num.sem_year.ine" 3: %num.sem_year.sg.ine { jahke@n.sg.ine _ %1[case=nom] }
	| "NP:num.sem_year.ela" 3: %num.sem_year.sg.ela { jahke@n.sg.ela _ %1[case=nom] }
	| "NP:num.sem_year.ill" 3: %num.sem_year.sg.ill { jahke@n.sg.ill _ %1[case=nom] }
	| "NP:NP pcle" 1: %NP pcle (if (2.lem/tl="") { %1 } else { %1 _ 2})
	| "NP:num N" 2: num %NP ?(1.function not = "@→A") {1[case=(if (1.case=loc and 2.function in advlela) ela elif (1.case=loc) ine elif (1.lem = akta) 1.case elif (1.case = acc) nom else 1.case)] _ %2[case=(if (2.case=loc and 2.function in advlela) ela elif (2.case=loc) ine elif (1.lem = akta) 2.case elif (1.case=acc and 2.case=acc) gen else 2.case)]} !!!2009-2013 áigodagas
	| "NP:num C num NP" 2: num C num %NP {1[case=(if (1.case=loc and 4.function in advlela) ela elif (1.case=loc) ine elif (1.lem = akta) 1.case elif (1.case = acc) nom else 1.case)] _ 2 _  3[case=(if (3.case=loc and 4.function in advlela) ela elif (3.case=loc) ine elif (3.lem = akta) 3.case elif (3.case = acc) nom else 3.case)] _ %4[case=(if (4.case=loc and 4.function in advlela) ela elif (4.case=loc) ine elif (1.lem = akta) 4.case elif (1.case=acc and 4.case=acc) gen else 4.case)]} !!!ovtta dahje guokte ođđa ossodaga
	| "NP:prn.dem num N" 2: prn.dem %num NP {1[number=2.number,case=(if (2.case=loc and 3.function in advlela) ela elif (2.case=loc) ine else 1.case),attr=(if (1.case=loc) attr else 1.attr)] _ 2[case=(if (2.case=loc and 3.function in advlela) ela elif (2.case=loc) ine elif (2.lem = akta) 2.case elif (2.case = acc and 3.case = acc) nom else 2.case)] _ 3[number=2.number,case=(if (3.case=loc and 3.function in advlela) ela elif (3.case=loc) ine elif (2.lem = akta) 3.case elif (2.case = acc and 3.case = acc) gen else 3.case)]} !3.lem not = akta (1.case not = 2.case)
	| "NP:juohke num jahki" 2: juohke@prn num %jahki@n {1 _ 2[case=(if (3.case=ela) gen else 2.case),attr=(if (3.case=ela) "" else 2.attr)] _ %3[case=(if (3.case=ela) gen else 3.case)]} ! juohke njealji jagis > juohkka nielje jage
	| "NP:prn.ref N" 2: prn.ref %NP { 1 _ 2} !ietjam viellja !! denne treffer nå også feildisambiguering, mer robust
	| "NP:attrprn N" 2: [attrprn]@prn %NP { 1[number="",case="",attr=attr] _ 2} !iešguđetge doaimmaid, mer robust, i tilfelle feil syntagg  
	| "NP:prn N" 3: prn.*."@→N" %NP { 1[number=(if (1. lem in attrprn) "" else 1.number),case= (if (1. lem in attrprn) "" else 1.case)] _ 2} !dav vielja, juohke sajis !!!  
	| "NP:NP NP.@N←" 8: %NP NP.*.@N← { %1 _ 2} !oassi dán barggus FUNGERER IKKE 
!!!	| "TEST: NP:NP + REL" 3: %NP prn.rel V AdvP { %1 _ 2 _ 3 _ 4}
	| "NP: NUM n.curr" 1: num %n.sem_curr { 1 _ %2 }
	| "NP: pr NUM" 1: pr."@→Num" %NUM { 1 _ %2}
	| "NP: prn NUM" 1: prn.*."@→Num" %NUM { 1 _ %2}
	| "NP: NUM" 1: %NUM  { %1 }
	| "NP: prn gullevaš NP:i" 2: prn.*.nom gullevaš@adj %NP.*.ill  { 1 _ 2(vblex_fin)[person_number=1.person_number] _ %3 }
	| "NP: gullevaš NP:i" 2: gullevaš@adj %NP.*.ill  { 1(vblex_fin) _ %2 }

	;

NUM -> "NUM:num" 1: %num.*.[case] ?(1.right="") { %1 }
	| "NUM:num num" 1: %num num { %1 _ 2 }
	| "NUM:num num num" 1: %num num num { %1 _ 2 _ 3 }
	| "NUM:@→Num NUM" 1: paragráfa@n.*."@→Num" %num { 2[pos_tag="adj.arab.ord",num_type="",case=attr,number=""] _ %1 } ! 
	| "NUM:@→Num NUM" 1: n.*."@→Num" %NUM { 1 _ %2 } ! tlf 23 OBS
	| "NUM:@→Num NUM" 1: n.*.attr PCT %NUM { 1 _ 2 _ %3 } ! tlf +47 (egentlig bør +47 finnes i dix)
	| "NUM:num.splitr" 3: %num."cmp_splitr" { %1[lemcase=$lemcase] } ! 5-
	;


PRN -> "prnnotfocsme" 1: %[prnnotfocsme]@prn { %1[foc=""] }
!!!	| "adv to prn" 1: %adv ?(1.pos_tag/tr=prn) { %1[lemcase=$lemcase] } !iesj<prn><ref><sg><ine><px3sg> iesj<prn><ref><sg><ine><px3sg>
	| "prn not res" 1: %prn.[prn_notres].*.[notattr] { %1[lemcase=$lemcase,foc=(if (1.lem in prnnotfocsmj) "" else 1.foc),number=(if (1.number/tl="") "" else 1.number)] }
	| "prn.res not nubbe" 2: %prn.res ?(1.lem not = nubbe)  { %1(prn_res) }
	| "prn.res nubbe nuppe" 2: prn.res %prn.res { 1[lemcase=$lemcase] _ %2 }
	| "ii prn N" 1: ii@vblex.iv.neg %prn.*."foc_neg-ge" N {1[lemcase=$lemcase,tense=pres] _ %2[foc=(if (2.lem in prnnotfocsmj) 
	"" else 2.foc)] _ 3 } 	!!!ige makkárge eará ealli > ij makkirak ietjá judos
	| "prn.nom prn.nom" 1: %prn.*.nom prn.*.nom { %1[lemcase=$lemcase] _ 2[foc=(if (2.lem in prnnotfocsmj) "" else 2.foc)] } !soai goappašaga
	| "okta ge" 1: %okta@num ge@pcle { %1[lemcase=$lemcase,pos_tag=prn,prn_type_other=ind,foc=foc_neg-k]}
	| "prn PCLE" 1: %prn PCLE { %1[lemcase=$lemcase] _ 2 }
	| "dem prn maid" 1: prn.dem %prn maid@adv { 1[lemcase=$lemcase] _ %2 _ 3 }
	| "prn maid" 1: %prn maid@adv { %1[lemcase=$lemcase] _ 2 }
	| "prn n.@Pron←" 1: %prn.*.ine n.*.com."@Pron←" { %1[lemcase=$lemcase] _ 2 } !sudnos isidiin
	| "prn n.@Pron←" 1: %prn.dem n.*."@Pron←" { %1[lemcase=$lemcase] _ 2 } !mii ávkkiid
	| "PRN: QUOT prn QUOT" 1: lquot %prn rquot { 1 %2 3 } !«soabmása»
	;

AP -> "AP:adj" 1: %adj.*.[caseattr] { %1[case=(if (1.lem=buorre and 1.function="@→N" and 1.comp ="") attr else 1.case),number=(if (1.lem=buorre and 1.function="@→N" and 1.comp ="") "" else 1.number),attr=(if (1.lem/tr=moadda and 1.case=nom) "" else 1.attr)] }
	| "a.splitr" 3: %adj.*."cmp_splitr" { %1[lemcase=$lemcase] } ! nubbe-
	| "AP:n.adj" 1: %n.*.adj { %1}
	| "AP:adv adj" 1: adv."@→A" %adj { 1 _ %2}
	| "AP:prn adj" 1: prn.*."@→A" %adj { 1 _ %2}
	| "AP:adv adj" 1: adv."@→N" %adj { 1 _ %2}
	| "AP:adv adv adj" 1: adv."@→ADVL" adv."@→A" %adj { 1 _ 2 _ %3}
	| "AP:adv n adj" 1: adv."@→A" n.*."@→A" %adj { 1 _ 2 _ %3} ! jáhkkemeahttun ja nu máilmmi surgat,
	| 1: AdvP prn.*."@←SUBJ" %adj.*."@←SPRED" { 1 _ 2 _ %3} !dieđusge dat dehálaš n2adj
!	| 1: "num.cmp adj" 3: num.*.cmp  %adj { 1 + %2 } !Could not find output pattern
!	| 1: vblex.*.prsprc { %1 }
	| "AP:n.cmp n.attr" 3: n.*.cmp %n.*.attr { 1[lemcase=$lemcase] + %2 } !sámepolitihkalaš
	| "AP:AP cnjcoo AP" 1: AP cnjcoo %AP { %1 _ 2 _ %3} 
	| "AP:num jagi boaris" 2: %num jahki@n boaris@adj { 1[case=gen] _ 3[lem=jagák] } 
	| "AP:numcmp jahkásaš" 2: %num.cmp_hyph.cmp jahkásaš@adj { 1[number=sg,case=gen,cmp="",onlycmp="",hyph="",num_type=arab] 
	_ 2[lem=jagák] } 
	| "AP:num jahkásaš" 5: num.*.cmp %jahkásaš@adj { 1[lemcase=$lemcase,cmp="",onlycmp="",case=gen,number=sg] _ %2[lem=jagák] } 
	| "AP:num jahkásaš" 5: num %jahkásaš@adj { 1[lemcase=$lemcase] _ %2[lem=jagák] } 
	| "AP:num jahkásaččat.adv" 4: num.*.gen %jahkásaččat@adv { 1 _ %2[lem=jagák,pos_tag=adj,number=pl,case=nom] } ! feil disambiguering
	| "AP:adv AP" 1: adv."@→A" %AP { 1[lemcase=$lemcase] _ %2 } 
	| "AP:maid AP" 1: maid@adv %AP { 1[lemcase=$lemcase] _ %2 } 
	| "AP:AP V@A←" 1: AP %V.inf."@A←" { 1[lemcase=$lemcase] _ %2[infin=(if (1.lem incl adj_nottriggingsupn) 2.infin else supn)] } 
	| "AP:AP V@A← cnjcoo V@A←" 1: AP V.inf."@A←" cnjcoo %V.inf."@A←"  { 1[lemcase=$lemcase] _ 2[infin=(if (1.lem incl adj_nottriggingsupn) 2.infin else supn)] _ 3 _ %4[infin=(if (1.lem incl adj_nottriggingsupn) 4.infin else supn)] } 
	;

AdvP -> "AdvP:adv" 1: %adv.*.$function (if (1.lem/tl="") { } else { %1[lemcase=$lemcase,number=(if (1.number/tl not = "") 1.number),poss=(if (1.lem incl possadv) 1.poss else "")] })
	| "AdvP:adv maid" 1:  %adv.*.$function maid@adv {%1[lemcase=$lemcase,number=(if (1.number/tl not = "") 1.number),poss=(if (1.lem incl possadv) 1.poss else "")] _ 2 }
	| "AdvP:adv cnjcoo adv " 1: %adv cnjcoo adv { %1[lemcase=$lemcase,poss=(if (1.lem in possadv) 1.poss else "")] _ 2 _ 3[poss=(if (3.lem in possadv) 3.poss else "")] }
	| "AdvP:adv adv" 1: adv."@→ADVL" %adv { 1[lemcase=$lemcase] _ %2[number=(if (2.number/tl not = "") 2.number)] } !ienep vuojnnusij
	| "AdvP:pcle adv" 1: pcle %adv (if (1.lem/tl="") { %2[lemcase=1.lemcase] } else { 1[lemcase=$lemcase] _ %2 })
	| "AdvP:adv pcle" 1: %adv pcle (if (2.lem/tl="") { %1 } else { %1[lemcase=$lemcase] _ 2 })
	| "AdvP:prn adv" 1: %prn.pers.*.loc adv."@←ADVL-ine" { %1[lemcase=$lemcase,number=1.number,person=1.person] _ 2 } !sus badjelis
	| "AdvP:adj.der_aadv" 2: %adj.der_aadv { %1 }
	| "AdvP:adj.*.der_aadv"2: %adj.*.der_aadv { %1[lemcase=$lemcase] }
	| "AdvP:dás ovdal"2: dás@adv %ovdal@adv { 1[lemcase=$lemcase] _ %2 }
	| "AdvP:jahke dás ovdal"2: jahke@NP dás@adv %ovdal@adv { 1[lemcase=$lemcase,case=(if (1.function="@←ADVL" and 1.number=sg) nom else 1.case)] _ 2 _ %3 }
	;

PP -> ! "N post" 1: N %post (if (2.pos_tag/tr=n) { 1 _ %2(n_only)} else { 1[case=(if (2.lem = miehtáj) acc else 1.case)] _ 2 }) 
	 "NP post" 2: NP %post { 1[case=(if (2.lem = miehtáj) acc else 1.case)] _ %2 }
	| "NP C NP post" 1: NP cnjcoo NP %post {1[case=(if (4.lem = miehtáj) acc else 1.case)] _ 2 _ 3[case=(if (4.lem = miehtáj) acc else 3.case)] _ 4 }
	| "prn post" 1: prn %post (if (2.pos_tag/tr=n) { 1 _ %2(n_only)} else { 1[case=(if (2.lem = miehtáj) acc elif (2.lem incl elapost) ela else 1.case),attr=(if (2.lem incl elapost) attr else 1.attr)] _ 2 }) 
	| "dás post" 1: dás@adv %post { 1 _ %2 }
	| "pre/post NP" 2: %pr NP ?(1.adpos/tl = post) { 2[lemcase=1.lemcase,case=(if (1.lem = miehtáj) acc else 2.case)] _ 1[lemcase=2.lemcase] } !miehtá beavddi > bievdev miehtáj
!!!	| "pre/post NP" 2: %pr Name ?(1.adpos/tl = post) { 2[lemcase=1.lemcase,case=(if (1.lem = miehtáj) acc else 2.case)] _ 1 } !miehtá beavddi > bievdev miehtáj
	| "pre/post prn" 2: %pr prn ?(1.adpos/tl = post) { 2[lemcase=1.lemcase,case=(if (1.lem = miehtáj) acc else 2.case)] _ 1[lemcase=2.lemcase] } !miehtá beavddi > bievdev miehtáj
	| "pre NP" 1: %pr NP { 1 _ 2 } !maŋŋá bargoáiggi > maŋŋela barggoájge px1sg
	| "pre prn" 2: %pr prn.*."@P←" { 1 _ 2 } !maŋŋá bargoáiggi > maŋŋela barggoájge px1sg
	| "lone post" 1: %post { 1 }
	| "pr AP" 3: %pr AP {%1 _ 2}
	; !

NegVP -> "ii dadjat@conneg ieš NP.acc" 5: ii@vblex.iv.neg [dadjat_verbs]@vblex.*.conneg %ieš@prn.ref NP.*.acc 
	{ 1[lemcase=$lemcase,tense=(if (2.tense="") pres else 2.tense)] _ 2 _ %3(refl2pers) 
	_ liehket@vblex.indic.pres.p3.[4.number] _ 4[case=nom]} !!! Ii jáhkkán alddis dávdda. > Ittjij jáhke sujna la dávdda.
	| "ii lohkat@conneg adj.ess" 3: ii@vblex.iv.neg %[lohkat_verbs]@vblex.*.conneg adj.ess 
	{ %2[conneg="",tense=(if (2.tense="") pres else 2.tense),person=1.person,number=1.number] _ 1[person=p3,number=sg] _ liehket@vblex.iv.indic.pres.conneg _ 
	3[number=sg,case=nom]} !!! eai loga váttisin > javlli ij la gássjel
	| "ii lohkat@conneg NP.ess" 3: ii@vblex.iv.neg %[lohkat_verbs]@vblex.*.conneg NP.ess 
	{ %2[conneg="",tense=(if (2.tense="") pres else 2.tense),person=1.person,number=1.number] _ 1[person=p3,number=sg] _ liehket@vblex.iv.indic.pres.conneg _ 
	3[number=sg,case=nom]} !!! eai loga leaikan > javlli ij la boagos
	|"ii lohkat@conneg ieš inf" 4: ii@vblex.iv.neg %[lohkat_verbs]@vblex.*.conneg ieš@prn vblex.*.[infin] 
	{ %2[conneg="",tense=(if (2.tense="") pres else 2.tense),person=1.person,number=1.number] _ 3(refl2pers) 
	_ 1[person=3.poss,number=3.poss,tense=(if (3.infin=prfprc) pret else pres)] _ 4[infin="",mood=indic,person=1.person,number=1.number,conneg=conneg,tense=(if (4.lem=liehket) 1.tense else "")]} !!! ii loga iežas healkkehit > javllá sån ij hielkeda.
	|"ii lohkat@conneg inf" 3: ii@vblex.iv.neg %[lohkat_verbs]@vblex.*.conneg vblex.*.[infin] (if (3.infin="actio.ess") 
	{ %2[conneg="",tense=(if (2.tense="") pres else 2.tense),person=1.person,number=1.number] _ sån(prn_pers)[case=nom,lem=(if (1.person=p1) mån elif (1.person=p2) dån else sån),number=1.number,person=1.person] _ 1[tense=(if (3.infin=prfprc) pret else pres)] _ liehket@vblex.iv.indic.pres.conneg _ 3} 
	else { %2[conneg="",tense=(if (2.tense="") pres else 2.tense),person=1.person,number=1.number] _ sån(prn_pers)[case=nom,lem=(if (1.person=p1) mån elif (1.person=p2) dån else sån),number=1.number,person=1.person] _ 1[tense=(if (3.infin=prfprc) pret else pres)] _ 3[mood=indic,infin="",conneg=conneg]}) !!! son ii loga lávet čihkosis duddjot > javllá sån ij bruvkku tjiehkusin duodjuhi
	|"ii lohkat@conneg pers inf" 3: ii@vblex.iv.neg %[lohkat_verbs]@vblex.*.conneg prn.pers vblex.*.inf 
	{ %2[conneg="",tense=(if (2.tense="") pres else 2.tense),person=1.person,number=1.number] _ 3[case=nom] 
	_ 1[person=3.person,number=3.number] _ 4[infin="",mood=indic,person=1.person,number=1.number,conneg=conneg,tense=(if (4.lem=liehket) 1.tense else "")]} !!! ii loga sin diehtit > javllá sij e diede
	|"ii lohkat@conneg NP inf" 3: ii@vblex.iv.neg %[lohkat_verbs]@vblex.*.conneg NP vblex.*.inf 
	{ %2[conneg="",tense=(if (2.tense="") pres else 2.tense),person=1.person,number=1.number] _ 3[case=nom] 
	_ 1[person=p3,number=3.number] _ 4[infin="",mood=indic,person=1.person,number=1.number,conneg=conneg,tense=(if (4.lem=liehket) 1.tense else "")]} !!! ii loga nieiddaid diehtit > javllá næjtso e diede
	|"ii lohkat@conneg ieš ess" 3: ii@vblex.iv.neg %[lohkat_verbs]@vblex.*.conneg ieš@prn.ref adj.ess 
	{ %2[lemcase=1.lemcase,conneg="",tense=(if (2.tense="") pres else 2.tense),person=1.person,number=1.number] _ 3(refl2pers)[case=(if (3.case=acc) nom else 3.case)] _ 1 _ liehket@vblex.iv.indic.pres.conneg _ 4[number=1.number,case=nom]} !!! Son ii loga iežas árgin > javllá sån ij la hárgge
!!!	| "ii lohkat@conneg ess.@←OPRED vblex.inf" 3: ii@vblex.iv.neg %[lohkat_verbs]@vblex.*.conneg adj.*."@←OPRED" vblex.*.inf 
!!!	{ %2[lemcase=$lemcase,conneg="",tense=(if (2.tense="") pres else 2.tense),person=1.person,number=1.number] _ 1 _ liehket@vblex.iv.indic.pres.conneg _ 
!!!	3[number=sg,case=nom] _ 4[infin=inf]} !sii eai loga váttisin čuoigat > javlli ij la gássjel tjuojggat OVERFLØDIG
	| "ii conneg vblex" 3: ii@vblex.iv.neg %vblex.*.conneg vblex ?(3.neg="") { 1[lemcase=$lemcase,tense=(if (2.tense="") pres else 2.tense)] _ %2[mood=indic] _ 3}
	| "ii conneg iige conneg" 4: ii@vblex %vblex.*.conneg ii@vblex vblex.*.conneg  { 1[lemcase=$lemcase,tense=(if (2.tense="") pres else 2.tense)] _ %2[mood=indic] _ jalik@cnjcoo _ 4[mood=indic]} !ii oainne iige gula
	| "ii conneg dahje conneg" 4: ii@vblex %vblex.*.conneg cnjcoo vblex.*.conneg  { 1[lemcase=$lemcase,tense=(if (2.tense="") pres else 2.tense)] _ %2[mood=indic] _ jalik@cnjcoo _ 4[mood=indic]} !ii oainne iige gula
	| "ii NP conneg" 3: ii@vblex.iv.neg NP %vblex.*.conneg { 1[lemcase=$lemcase,tense=(if (3.tense="") pres else 3.tense)] _ 2 _ %3[mood=indic,tense=""] } 
	| "ii PRN conneg" 3: ii@vblex.iv.neg PRN %vblex.*.conneg (if (2.prn_type = pers and 2.case=nom) { 1[lemcase=$lemcase,tense=(if (3.tense="") pres else 3.tense)] 
	_ %3[mood=indic,tense=(if (3.lem = liehket) 3.tense else "")] } else { 1[lemcase=$lemcase,tense=(if (3.tense="") pres else 3.tense)] _ 2 _ %3[mood=indic,tense=(if (3.lem = liehket) 3.tense else "")] }) !!! ii son sáhte > ij máhte
	| "ii conneg NP" 3: ii@vblex.iv.neg %vblex.*.conneg NP ?(2.lem not = liehket){ 1[lemcase=$lemcase,tense=(if (2.tense="") pres else 2.tense)] _ %2[mood=indic] _ 3 } 
	| "ii conneg prn" 3: ii@vblex.iv.neg %vblex.*.conneg prn.[prn_notref] { 1[lemcase=$lemcase,tense=(if (2.tense="") pres else 1.tense)] _ 3[foc=(if 
	(3.lem in prnnotfocsmj) "" else 3.foc)] _ %2[mood=indic] } 
	| "ii NP conneg vblex" 3: ii@vblex.iv.neg NP %vblex.*.conneg vblex { 1[lemcase=$lemcase,tense=(if (3.tense="") pres else 3.tense)] _ %3[mood=indic] _ 2 _ 4 } 
	| "ii conneg NP vblex" 6: ii@vblex.iv.neg %vblex.*.conneg NP vblex.*.[infin] { 1[lemcase=$lemcase,tense=(if (2.tense="") pres else 2.tense)] _ 
	%2[mood=2.mood,conneg=2.conneg] _ 3[case=(if (3.function="@-FSUBJ→" and 2.lem in dadjat_verbs) nom else 3.case)] _ 4[infin=(if 
	(3.function="@-FSUBJ→" and 2.lem in dadjat_verbs) "" elif (4.function="@←ADVL") supn else 4.infin),mood=(if (3.function="@-FSUBJ→" and 2.lem in dadjat_verbs) indic else ""),
	tense=(if (3.function="@-FSUBJ→" and 2.lem in dadjat_verbs) pres else ""),person=(if (3.function="@-FSUBJ→" and 2.lem in dadjat_verbs) p3 else ""),
	number=(if (3.function="@-FSUBJ→" and 2.lem in dadjat_verbs) 3.number else "")] } !!! in jáhke nieidda boahtit > iv jáhke næjttso boahtá
	| "ii conneg prn vblex" 6: ii@vblex.iv.neg %vblex.*.conneg prn.[prn_notref] vblex.*.[notauxv] { 1[lemcase=$lemcase,tense=(if (2.tense="") pres else 2.tense)] _ %2[mood=2.mood,conneg=2.conneg] 
	_ 3[case=(if (3.function="@-FSUBJ→" and 2.lem in dadjat_verbs) nom else 3.case)] _ 4[infin=(if (3.function="@-FSUBJ→" and 2.lem in dadjat_verbs) "" 
	else 4.infin),mood=(if (3.function="@-FSUBJ→" and 2.lem in dadjat_verbs) indic else ""),tense=(if (3.function="@-FSUBJ→" and 2.lem in dadjat_verbs) pres 
	else ""),person=(if (3.function="@-FSUBJ→" and 2.lem in dadjat_verbs) p3 else ""),number=(if (3.function="@-FSUBJ→" and 2.lem in dadjat_verbs) 3.number 
	else "")] } !!! ii jáhke su/dan boahtit > iv jáhke sån/dat boahtá
	| "ii dadjat@conneg prn NP.ess" 6: %ii@vblex.iv.neg [dadjat_verbs]@vblex.*.conneg prn.*.acc NP.*.ess 
	{1[lemcase=$lemcase,tense=(if (2.tense="") pres else 2.tense)] _ 2 _ 3[case=nom] _ %liehket(vblex_fin)[neg="",mood=indic,tense=(if (2.tense="") pres else 2.tense),person=(if (3.prn_type=dem) p3 else 3.person),number=3.number] _ 4[number=3.number,case=nom] } !!! ii jáhke su nieidan
	| "ii dadjat@conneg prn adj" 6: ii@vblex.iv.neg %[dadjat_verbs]@vblex.*.conneg prn.*.acc adj { 1[lemcase=$lemcase,tense=(if (2.tense="") pres else 2.tense)] _ %2 
	_ 3[case=nom] _ liehket@vblex.iv.indic.[2.tense][person=3.person,number=3.number] _ 4[number=3.number,case=nom] } 
	!!! ii jáhke su dohkalažžan
	| "ii AdvP conneg" 3: ii@vblex.iv.neg AdvP %vblex.*.conneg { 1[lemcase=$lemcase,tense=(if (3.tense="") pres else 3.tense)] _ 2 _ %3[mood=indic,tense=(if 
	(3.lem incl liehket) pres else "")] } 
	| "ii pcle conneg" 3: ii@vblex.iv.neg pcle %vblex.*.conneg (if (2.lem = ga) { 1[lemcase=$lemcase,tense=(if (3.tense="") pres else 3.tense)] _ %3[mood=indic,tense=(if 
	(3.lem incl liehket) pres else "")] } else { 1[lemcase=$lemcase,tense=(if (3.tense="") pres else 3.tense)] _ 2 _ %3[tense=(if (3.lem incl liehket) pres else "")] }) 
	| "ii conneg" 3: %ii@vblex.iv.neg vblex.*.conneg ?(2.lem not in dadjat_verbs) { %1[lemcase=$lemcase,tense=(if (1. lem incl ij and 2.lem incl liehket) pres else 1.tense)] _ 2 } ! sáhtán borrat
	;

V -> "V:auxcondvblex" 5: %[auxverbs]@vblex.*.cond ?(1.qst="") { %1[lemcase=$lemcase] }
	| "V:condvblex" 2: %vblex.*.cond { liehket@vblex.iv.cond.[1.person_number][lemcase=$lemcase] _ %1(vblex_v2v)[mood="",tense="",infin=inf,person="",number=""] } ! boađášin > luluv boahtet
	| "V:condvblex qst" 4:%[auxverbs]@vblex.*.cond go@pcle.qst { %1[lemcase=$lemcase] _ 2 }
	| "V:condvblex qst" 4: %vblex.*.cond go@pcle.qst { liehket@vblex.iv.cond.[1.person_number][lemcase=$lemcase] _ 2 _ %1(vblex_v2v)[mood="",tense="",infin=inf,person="",number=""] } ! boađášin go > luluv gus boahtet
	| "V:vblex.supnfunction" 3: %vblex.*.inf.[supnfunction]  { %1(vblex_v2v)[lemcase=$lemcase,infin=(if (1.lem incl not-usually-supn-verbs) inf else supn)]} !
	| "V:vblex" 2: %vblex ?(1.onlycmp = "") { %1(vblex_v2v)[lemcase=$lemcase]} !
	| "V:vblex maid" 2: %vblex.*.$function maid@adv  { %1(vblex_v2v)[lemcase=$lemcase,infin=(if (1.lem incl not-usually-supn-verbs) 1.infin elif (1.infin=inf and 1.function in supnfunction) supn else 1.infin)] _ 2} !

!!!	| "vblex.inf" 2: %vblex.*.inf.$function { %1(vblex_v2v)[lemcase=$lemcase,infin=(if (1.lem incl not-usually-supn-verbs) 1.infin else (if (1.function in supnfunction) supn else 1.infin))]} !
!!!	| "V:dadjat ahte" 1: %[dadjat_verbs]@vblex.*.[mainv] ahte@cnjsub { %1(vblex_v2v)[lemcase=$lemcase]} !
	| "V:vblex placetimeadv" 1: %vblex.*.$function [placetimeadv]@adv.*."@←ADVL-ine" { %2[lemcase=1.lemcase] _ 1(vblex_v2v)[lemcase=2.lemcase,sentinit=""]} !!! soai stoahkaba álo ovttas > soai álo stoahkaba ovttas 
	| "V:@+FMAINV inf" 2: %vblex.*.indic.*.$person.$number.[mainv] vblex.*.inf { %1(vblex_v2v)[lemcase=$lemcase] _ 2(vblex_v2v)[infin=(if (2.lem incl not-usually-supn-verbs) 2.infin else (if (1.lem incl sme-rek-verbs) 2.infin else (if (2.function in supnfunction) supn else 2.infin)))]} !
	| "V:livččii vblex" 3: leat@vblex.*.cond %vblex { 1[lemcase=$lemcase] _ %2(vblex_v2v)} 
	| "V:FAUXV FAUXV" 1: %vblex.*."@+FAUXV" vblex.*."@-FAUXV" { %1[lemcase=$lemcase,tense=(if (1. lem incl ij and 2.lem incl liehket) pres else 1.tense)] _ 2 } ! sáhtán borrat
	;

VP -> "pers NegVP" 2: prn.pers.*.nom %NegVP (if (2.lem in lohkat_verbs) {1[lemcase=$lemcase] _ %2} else { %2[lemcase=1.lemcase] }) 
	| "pers NegVP AdvP" 2: prn.pers.*.nom %NegVP AdvP (if (2.lem in lohkat_verbs) {1[lemcase=$lemcase] _ %2 _ 3 } else { %2[lemcase=1.lemcase] _ 3 }) 
	| "pers NegVP AP" 2: prn.pers.*.nom %NegVP AP (if (2.lem in lohkat_verbs) {1[lemcase=$lemcase] _ %2 _ 3 } else { %2[lemcase=1.lemcase] _ 3 })
	| "NP NegVP AP" 2: NP.*.nom %NegVP AP {1[lemcase=$lemcase] _ %2 _ 3 } 
	| "pers NegVP NP" 2: prn.pers.*.nom %NegVP NP (if (2.lem incl lohkat_verbs and 1.person=p3) { 1[lemcase=$lemcase] _ %2 _ 3 } else 
	{ %2[lemcase=1.lemcase] _ 3 })
	| "pers NegVP vblex" 3: prn.pers.*.nom %NegVP vblex (if (2.lem in lohkat_verbs) {1[lemcase=$lemcase] _ %2 _ 3 } else { %2[lemcase=1.lemcase] _ 3 })

	| "NegVP vblex NP" 2: NegVP %vblex NP { 1[lemcase=$lemcase] _ 3 _ %2} 
	| "FAUXV FMAINV" 2: %álgit@vblex.*."@+FAUXV" vblex.*.inf { %2(vblex_inchl)[number=1.number,person=1.person,mood=1.mood,tense=1.tense,infin=""] } 
	| "FAUXV FMAINV" 2: %vblex.*.$person.$number."@+FAUXV" vblex.*."@-FMAINV" 
	 { %1[lemcase=$lemcase,tense=(if (1. lem incl ij and 2.lem incl liehket) pres else 1.tense)] _ 2(vblex_v2v) } ! sáhtán borrat

	| "FAUXV vblex NP.acc" 2: vblex.trans.mood.$person.$number."@+FAUXV" %vblex.*."@-FMAINV" NP.*.acc { 1[lemcase=$lemcase] _ 3 _ %2 } ! 
	| "FAUXV pcle FMAINV NP" 2: vblex.trans.mood.$person.$number."@+FAUXV" pcle %V.*."@-FMAINV" NP { 1[lemcase=$lemcase] _ 2 _ 4 _ %3 }! 
	| "@-FMAINV NP vblex" 2: vblex.*."@-FMAINV" NP %vblex ?(3.onlycmp= "") { 1[lemcase=$lemcase] _ 2 _ %3[infin=(if (1.lem incl smj-supn-triggerverbs and 3.infin=inf) supn else 3.infin)] }
	| "vblex AdvP vblex" 1: vblex AdvP %vblex ?(3.onlycmp="") (if (1.function="@+FMAINV" and 2.lem incl placetimeadv) { 2[lemcase=1.lemcase] 
	_ 1[lemcase=2.lemcase] _ %3[infin= (if (3.function in supnfunction) supn else 3.infin)]} else { 1[lemcase=$lemcase] _ 2 _ %3[infin= (if (3.function in supnfunction) supn else 3.infin)] })! 
	| "vblex AdvP vblex" 1: %V.*."@+FMAINV" prn AdvP { %1[lemcase=$lemcase] _ 2 _ 3[infin= (if (3.function in supnfunction) supn else 3.infin)] } ! Oaččun dan hálbbit
	| "vblex AdvP vblex NP" 1: vblex AdvP %vblex NP (if (1.function="@+FMAINV" and 2.lem incl placetimeadv) { 2[lemcase=1.lemcase] 
	_ 1[lemcase=2.lemcase] _ 4 _ %3 } else { 1[lemcase=$lemcase] _ 2 _ 4 _ %3 })
	!!! Son geahččala ain ohcat Jaakko. > Sån ájn gæhttjal Jaakkov åhtsåt.
	| "vblex PCLE vblex" 1: vblex PCLE %vblex { 1[lemcase=$lemcase] _ 2 _ %3 }! 
	| "vblex PCLE NP" 1: %vblex PCLE NP { %1[lemcase=$lemcase] _ 2 _ 3 }! 
	| "vblex PCLE AP" 1: %vblex PCLE AP { %1[lemcase=$lemcase] _ 2 _ 3 }! 
	| "vblex PCLE AdvP NP" 1: %vblex PCLE AdvP NP { %1[lemcase=$lemcase] _ 2 _ 3 _ 4 }! 
	| "vblex PCLE vblex NP" 1: vblex PCLE %vblex NP (if (3.lem = liehket) { 1[lemcase=$lemcase] _ 2 _ %3 _ 4 } else { 1[lemcase=$lemcase] _ 2 _ 4 _ %3 })! 
	| "subj dadjat-pass leat-inf" 3: n.*.nom %[dadjat_verbs]@vblex.*.der_passl leat@vblex.*.inf { %2[lemcase=1.lemcase,person=p3,number=sg] _ ahte@cnjsub _ 1[lemcase=2.lemcase] _ 3[infin="",mood=indic,tense=(if (2.tense="") pres else 2.tense),person=2.person,number=2.number]} ! Ortnet gáibiduvvo leat > Gájbbeduvvá ahte årdnik la
	| "dadjat pers.acc adj" 4: %[dadjat_verbs]@vblex prn.pers.*.acc adj { 1[lemcase=$lemcase] _ 2[case=nom] _ 
	%liehket(vblex)[mood=indic,tense=(if (1.tense="") pres else 1.tense),person=2.person,number=2.number] _ 3[number=2.number,case=nom] } 
	!!!Son lohká sin duđavaččat > Sån javllá sij li dudálattja
	| "dadjat NP.acc vblex.inf" 4: [dadjat_verbs]@vblex NP.*."@-FSUBJ→" %vblex.*.inf { 1[lemcase=$lemcase] _ 2[case=nom] 
	_ %3[infin="",mood=indic,tense=(if (1.tense="") pres else 1.tense),person=p3,number=2.number] } !!!jáhkká veaga váikkuhit > jáhkká veahka vájkkut
	| "dadjat prn.dem.acc vblex.inf" 4: [dadjat_verbs]@vblex prn.[prn_demind].*."@-FSUBJ→" %vblex.*.inf { 1[lemcase=$lemcase] _ 2[case=nom] 
	_ %3[infin="",mood=indic,tense=(if (1.tense="") pres else 1.tense),person=p3,number=2.number] } !!!jáhkká dan váikkuhit > jáhkká dat vájkkut
	| "dadjat prn.acc prfprc" 4: %[dadjat_verbs]@vblex prn.*."@-FSUBJ→" vblex.*.prfprc { 1[lemcase=$lemcase] _ 2[case=nom] _ 
	%liehket(vblex)[mood=indic,tense=pres,person=(if (2.prn_type=dem) p3 else 2.person),number=2.number] _ 3 } 
	!!!lohká sin árvvoštallan > javllá sij li árvustallam 
	| "dadjat @←SUBJ prn.acc prfprc" 4: %[dadjat_verbs]@vblex NP.*."@←SUBJ" prn.*."@-FSUBJ→" vblex.*.prfprc { 1[lemcase=$lemcase] _ 2 _ 3[case=nom] _ 
	%liehket(vblex)[mood=indic,tense=pres,person=(if (3.prn_type=dem) p3 else 3.person),number=3.number] _ 4 } 
	!!!navdet politiijat su jápmán > jáhkki politijja sån la jábmám
	| "dadjat NP prfprc" 4: %[dadjat_verbs]@vblex NP.*."@-FSUBJ→" vblex.*.prfprc { 1[lemcase=$lemcase] _ 2[case=nom] _ 
	%liehket(vblex)[mood=indic,tense=pres,person=(if (2.prn_type=dem) p3 else 2.person),number=2.number] _ 3 } 
	!!! jáhkká veaga viežžan > 
	| "dadjat @←SUBJ NP prfprc" 4: %[dadjat_verbs]@vblex NP.*."@←SUBJ" n.*."@-FSUBJ→" vblex.*.prfprc { 1[lemcase=$lemcase] _ 2 _ 3[case=nom] _ 
	%liehket(vblex)[mood=indic,tense=pres,person=p3,number=3.number] _ 4 } 
	!!! navdet politiijat nieidda jápmán > 
	| "dadjat n.acc inf" 4: [dadjat_verbs]@vblex n.*."@-FSUBJ→" %vblex.*.inf { 1[lemcase=$lemcase] _ 2[case=nom] _ 
	%3[infin="",mood=indic,tense=(if (1.tense="") pres else 1.tense),person=p3,number=2.number] } !!!jáhkká skuvlla váikkuhit > jáhkká skåvllå vájkkut
	| "dadjat inf" 4: [dadjat_verbs]@vblex %vblex.*.inf."@←OBJ" { 1[lemcase=$lemcase] _ %2[infin="",mood=indic,tense=(if (1.tense="") pres else 1.tense),person=p3,number=1.number] } !!!son lohká dovdat > jáhkká skåvllå vájkkut
!!!	| "dadjat ieš.ref prfprc" 5: %[dadjat_verbs]@vblex ieš@prn.ref vblex.*.prfprc { 1[lemcase=$lemcase] _ 
!!!	%2(refl2pers) _ liehket(vblex)[mood=indic,tense=pres,person=2.poss,number=2.poss] _ 3} !!! Son muitala iežas fitnan. > Sån subtsas sån la guossidam.
	| "dadjat ieš.ref infin" 5: %[dadjat_verbs]@vblex ieš@prn.ref vblex.*.[infin] ?(1.conneg="") 
	(if (2.function in fsubjadvl and 2.case in casenotacc and 3.infin in accinfitforms) { 1[lemcase=$lemcase] _ %2(refl2pers) _ liehket(vblex)[mood=indic,tense=pres,person=2.poss,number=2.poss] _ 3} 
	elif (2.function in fsubjadvl and 2.case in casenotacc and 3.infin=inf) 
	{ 1[lemcase=$lemcase] _ %2(refl2pers) _ 3[infin="",mood=indic,tense=pres,person=2.poss,number=2.poss]} 
	else { %1[lemcase=$lemcase] _ 2 _ 3 })
	| "dadjat ieš.ref prfprc v.ess" 5: %[dadjat_verbs]@vblex ieš@prn.ref vblex.*.prfprc vblex.*.ess { 1[lemcase=$lemcase] _ 
	%2(refl2pers) _ liehket(vblex)[mood=indic,tense=pres,person=2.poss,number=2.poss] _ 3 _ 4[infin=inf]} !!! Son muitala iežas fitnan. > Sån subtsas sån la guossidam.
	| "dadjat ieš.ref adj.ess" 5: %[dadjat_verbs]@vblex ieš@prn.ref adj.*.ess { 1[lemcase=$lemcase] _ 
	%2(refl2pers)[case=nom] _ liehket(vblex)[mood=indic,tense=pres,person=2.poss,number=2.poss] _ 
	3[number=2.poss,case=nom]} !!! Son lohká iežaset duđavažžan. > Sån javllá sij li dudálattja.
	| "dadjat n adj.ess" 5: %[dadjat_verbs]@vblex NP.*.acc adj.*.ess { 1[lemcase=$lemcase] _ %2[case=nom] _ liehket(vblex)[mood=indic,tense=pres,person=p3,number=2.number] _ 3[number=2.number,case=nom]} !!! Son lohká ášši miellagiddevažžan. > Sån javllá ássje l miellagiddis
	| "dadjat adj.ess" 5: %[dadjat_verbs]@vblex adj.*.ess { %1[lemcase=$lemcase] _ liehket(vblex)[mood=indic,tense=pres,person=p3,number=sg] _ 2[number=sg,case=nom]} !!! Son lohká miellagiddevažžan. > Sån javllá l miellagiddis
	| "leat AP" 1: %leat@vblex AP {%1[lemcase=$lemcase] _ 2}
!!!	| "leat aj AP" 1: %leat@vblex aj@AdvP AP {%1[lemcase=$lemcase] _ 2 _ 3}
	| "leat@prfprc AP" 3: liehket@V.prfprc.[mainv].sentinit %AP {liehket(vblex_fin)[lemcase=1.lemcase,mood=indic,tense=pres,person=p3,number=sg] _ 1[lemcase=2.lemcase] _ %2 }
	| "ill2ine_verbs NPill" 2: %[ill2ine_verbs]@vblex NP.*.ill {1[lemcase=$lemcase] _ %2[case=ine] } ! Mun báhcen gávpogii > stadan
	| "acc2ill_verbs NP.acc ill" 2: %[acc2ill_verbs]@vblex NP.*.acc {1[lemcase=$lemcase] _ %2[case=ill] } ! 
	| "vblex NP AdvP" 1: %vblex NP AdvP { %1[lemcase=$lemcase] _ 2 _ 3 }! 
	| "vblex NP AP C" 1: %vblex NP AP C ?(1.lem not incl dadjat_verbs)  { %1[lemcase=$lemcase] _ 2 _ 3 _ 4 }! 
	| "vblex PRN AP C" 1: %vblex PRN AP C { %1[lemcase=$lemcase] _ 2 _ 3 _ 4 }! 
	| "vblex cnjcoo vblex" 1: V cnjcoo %V ?(1.conneg="") { 1[lemcase=$lemcase] _ 2 _ 3 } 
	| "inf cnjcoo inf" 2: vblex.*.inf cnjcoo %vblex.*.inf { 1[lemcase=$lemcase, infin=(if (1.function in supnfunction) supn else 1.infin)] _ 2 _ 3[infin=(if (3.function in supnfunction) supn else 3.infin)] } 
	| "adj_nottriggingsupn,ess vblex,inf" 3: [adj_nottriggingsupn]@adj.ess %vblex.*.inf { 1[lemcase=$lemcase] _ %2 }
	| "VP pcle" 1: %VP pcle { 1[lemcase=$lemcase] _ 2 }
	| "VP pcle AdvP" 1: %VP pcle AdvP { 1[lemcase=$lemcase] _ 2 _ 3 }
	| "VP PP" 1: %VP PP { %1[lemcase=$lemcase] _ 2 } 
	| "VP PP pcle " 1: %VP PP pcle { %1[lemcase=$lemcase] _ 2 _ 3 }
	| "VP NP AdvP" 1: %VP NP AdvP { %1[lemcase=$lemcase] _ 2[case=(if (1.lem incl acc2ill_verbs) ill else 2.case)] _ 3 }
	| "VP NP pcle" 1: %VP NP pcle { %1[lemcase=$lemcase] _ 2 _ 3 }
	| "VP NP PP " 3: %VP NP PP { %1[lemcase=$lemcase] _ 2 _ 3}
	| "V NP NP NP" 3: %V NP NP NP NP { %1[lemcase=$lemcase] _ 2 _ 3 _ 4 _ 5}
	| "NegVP PP" 2: %NegVP PP { %1[lemcase=$lemcase] _ 2 }
	| "NegVP AdvP" 2: %NegVP AdvP { %1[lemcase=$lemcase] _ 2 }
	| "NegVP PP AdvP" 2: %NegVP PP AdvP { %1[lemcase=$lemcase] _ 2 _ 3 }
	| "VP PP AdvP" 1: %VP PP AdvP { %1[lemcase=$lemcase] _ 2 _ 3 }
	| "NegVP PP pcle" 2: %NegVP PP pcle { %1[lemcase=$lemcase] _ 2 _ 3 }
	| "NegVP NP" 2: %NegVP NP { %1[lemcase=$lemcase] _ 2 }
	| "NegVP NP AdvP" 2: %NegVP NP AdvP { %1[lemcase=$lemcase] _ 2 _ 3 }
	| "FAUXV FMAINV NP" 4: %vblex.*.$person.$number."@+FAUXV" vblex.*."@-FMAINV" NP.*.[leftobjadvl] (if (2.lem incl copulas) { %1[lemcase=$lemcase] _ 2 _ 3 } else { %1[lemcase=$lemcase] _ 3 _ 2 }) ! sáhtán láibbi borrat
	| "FAUXV FMAINV NP PP" 4: %vblex.*.$person.$number."@+FAUXV" vblex.*."@-FMAINV" NP.*.[leftobjadvl] PP (if (2.lem incl copulas) { %1[lemcase=$lemcase] _ 2(vblex_v2v) _ 3 _ 4 } else { %1[lemcase=$lemcase] _ 3 _ 2(vblex_v2v) _ 4 }) ! sáhtán láibbi borrat
	| "FAUXV NP FMAINV NP" 3: %vblex.*.$person.$number."@+FAUXV" NP vblex.*."@-FMAINV" NP.*.[leftobj] { %1[lemcase=$lemcase] _ 2 _ 4 _ 3(vblex_v2v) } 
	| "FAUXV PRN FMAINV NP" 3: %vblex.*.$person.$number."@+FAUXV" PRN vblex.*."@-FMAINV" NP { %1[lemcase=$lemcase] _ 2 _ 4 _ 3(vblex_v2v) } 
	| "FAUXV AdvP FMAINV NP" 3: %vblex.*.$person.$number."@+FAUXV" AdvP vblex.*."@-FMAINV" NP { %1[lemcase=$lemcase] _ 2 _ 4 _ 3(vblex_v2v) } !!! Hæhttu dågålattjat máná kultuvrraduogátjav vieledit. 
	| "FAUXV FMAINV PRN.pers" 2: %vblex.*.$person.$number."@+FAUXV" vblex.*."@-FMAINV" PRN.pers.*.[case] ?(1.lem not = ii) (if (3.attr=attr) { %1[lemcase=$lemcase] _ 2 _ 3[v2v=(if (2.v2v=der_inchl and 2.lem incl verb3st) der_ahtja elif (2.v2v=der_halla) der_dalla elif (2.v2v=der_h and 2.lem in verb3st) der_caus elif (2.v2v=der_h) der_d elif (2.v2v=der_passs) der_passl else 2.v2v)] } else { %1[lemcase=$lemcase] _ 3[v2v=(if (2.v2v=der_inchl and 2.lem incl verb3st) der_ahtja elif (2.v2v=der_halla) der_dalla elif (2.v2v=der_h and 2.lem in verb3st) der_caus elif (2.v2v=der_h) der_d elif (2.v2v=der_passs) der_passl else 2.v2v)] _ 2 }) ! sáhtán dan borrat
	| "FAUXV NP FMAINV" 2: %vblex.*.$person.$number."@+FAUXV" NP vblex.*."@-FMAINV" { %1[lemcase=$lemcase] _ 2 _ 3(vblex_v2v) } ! sáhtán láibbi borrat
	| "FAUXV @SPRED→ FMAINV" 2: %vblex.*.$person.$number."@+FAUXV" adj.*."@SPRED→" vblex.*."@-FMAINV" { %1[lemcase=$lemcase] _ 3 _ 2 } !!! lea váttis leamaš > la læhkám gássjel
	| "vblexN← N@-F←OBJ" 3: %vblex.*."@N←" NP.*."@-F←OBJ" { %2[number=2.number] _ 1 } !!! álggahit idjadansajiid > idjadimsajijt álgadit
	| "vblex@N← adv@→N n@-F←OBJ" 3: %vblex.*."@N←" adv."@→N" NP.*."@-F←OBJ" { 2 _ %3[number=3.number] _ 1 } !!! juhkat veaháš čázi > veaháš čázi juhkat
	| "vblex NP vblex@N← prn@-F←OBJ" 3: vblex NP %vblex.*."@N←" prn.*."@-F←OBJ" { 1[lemcase=$lemcase] _ 2 _ %4[number=4.number] _ 3 } 
	| "leat@prfprc NP vblex" 3: liehket@V.prfprc.[mainv].sentinit NP %vblex {liehket(vblex_fin)[lemcase=1.lemcase,mood=indic,tense=pres,person=p3,number=sg] _ 1[lemcase=2.lemcase] _ 2 _ %3 }
	| "@mainv NP vblex" 3: V.*.[mainv] NP %vblex ?(3.onlycmp = "" and 3.mood="") (if (2.function="@-FSUBJ→" and 2.case=nom and 3.infin in accinfitforms) 
	{1[lemcase=$lemcase] _ 2[case=nom,number=(if (2.pos_tag=n and 2.number = du) sg else 2.number)] _ 
	liehket(vblex_fin)[mood=indic,tense=(if (1.tense="") pres else 1.tense),person=p3,number=2.number] _ %3} elif 
	(2.function="@-FSUBJ→" and 2.case=nom and 3.infin=inf) 
	{1[lemcase=$lemcase] _ 2[case=nom] _ %3[infin="",mood=indic,tense=pres,person=p3,number=2.number]}
	else { 1[lemcase=$lemcase] _ 2 _ %3[infin=(if 
	(3.lem incl not-usually-supn-verbs) 3.infin elif (3.infin=inf) (if (1.lem incl smj-supn-triggerverbs or 3.function in supnfunction) supn 
	else 3.infin) else 3.infin) ] }) !!! oainnán nieidda stoahkamin > oainnán nieida lea stoahkamin 

	| "@+FMAINV NP AdvP vblex" 3: V.*.[mainv] NP AdvP %V ?(4.onlycmp = "") (if (2.function="@-FSUBJ→" and 2.case=nom and 4.infin in accinfitforms) 
	{1[lemcase=$lemcase] _ 2[case=nom,number=(if (2.pos_tag=n and 2.number = du) sg else 2.number)] _ 3 _ 
	liehket(vblex_fin)[mood=indic,tense=(if (1.tense="") pres else 1.tense),person=p3,number=2.number] _ %4} elif 
	(2.function="@-FSUBJ→" and 2.case=nom and 4.infin=inf) 
	{1[lemcase=$lemcase] _ 3 _ 2[case=nom] _ %4[infin="",mood=indic,tense=pres,person=p3,number=2.number]}
	else { 1[lemcase=$lemcase] _ 2 _ 3 _ %4[infin=(if 
	(4.lem incl not-usually-supn-verbs) 4.infin elif (4.infin=inf) (if (1.lem incl smj-supn-triggerverbs or 4.function in supnfunction) supn 
	else 4.infin) else 4.infin) ] }) !!! jáhkká gádjunveaga dál viežžan dihtora > 

	| "@+FMAINV NP vblex AdvP" 2: V.*.[mainv] N %vblex AdvP ?(3.onlycmp = "") (if (2.function="@-FSUBJ→" and 2.case=nom and 3.infin in accinfitforms) 
	{1[lemcase=$lemcase] _ 2[case=nom,number=(if (2.pos_tag=n and 2.number = du) sg else 2.number)] _ 
	liehket(vblex_fin)[mood=indic,tense=(if (1.tense="") pres else 1.tense),person=p3,number=2.number] _ %3 _ 4} else { 1[lemcase=$lemcase] _ 2 _ %3[infin=(if 
	(3.lem incl not-usually-supn-verbs) 3.infin elif (3.infin=inf) (if (1.lem incl smj-supn-triggerverbs or 3.function in supnfunction) supn 
	else 3.infin) else 3.infin) ] _ 4 }) !!! oainnán nieidda stoahkamin > oainnán nieida lea stoahkamin 

	| "pers V NP" 3: PRN.pers.*."@-FSUBJ→" %V.*.$function.$sentinit NP ?(3.leftspred="") (if (1.function="@-FSUBJ→" and 1.case=nom and 2.infin in accinfitforms) {1[lemcase=$lemcase] 
	_ liehket(vblex_liehket_fin)[mood=indic,tense=pres,person=p3,number=1.number] _ %2 _ 3}
	else { 1 _ %2 _ 3 }) !!!oainnán su stoahkamin > oainnán son lea stoahkamin 
	| "pers V AdvP NP" 3: PRN.*."@-FSUBJ→" %V.*.$function.$sentinit AdvP NP (if (1.function="@-FSUBJ→" and 1.case=nom and 2.infin in accinfitforms) {1[lemcase=$lemcase,case=nom] 
	_ liehket(vblex_liehket_fin)[mood=indic,tense=pres,person=p3,number=1.number] _ %2 _ 3 _ 4} 
	else { 1 _ %2 _ 3 _ 4 }) !!!oainnán su stoahkamin > oainnán son lea stoahkamin 
  | "pers V" 3: PRN.pers.*."@-FSUBJ→" %vblex.*.$function.$sentinit (if (1.function="@-FSUBJ→" and 1.case=nom and 2.infin in accinfitforms) {1[lemcase=$lemcase,case=nom] 
	_ liehket(vblex_liehket_fin)[mood=indic,tense=pres,person=p3,number=1.number] _ %2} elif 
	(1.function="@-FSUBJ→" and 1.case=nom and 2.infin=inf) { 1 _%2[infin="",mood=indic,tense=pres,person=1.person,number=1.number]} else 
	{ 1 _ %2[infin=(if (2.trigger=SUPN) supn else 2.infin)] }) !!!oainnán su stoahkamin > oainnán son lea stoahkamin 
  | "pers AdvP V" 2: PRN.*."@-FSUBJ→" AdvP %V.*.$function.$sentinit ?(3.function not = "@+FAUXV") (if (1.function="@-FSUBJ→" and 1.case=nom and 3.infin="actio.ess") {1[lemcase=$lemcase,case=nom] 
	_ liehket(vblex_liehket_fin)[mood=indic,tense=pres,person=p3,number=1.number] _ 2 _ %3} 
	else { 1 _ 2 _ %3}) 
	| "pers VP" 3: prn.pers.*."@-FSUBJ→" %VP.*.$function.$sentinit (if (1.function="@-FSUBJ→" and 1.case=nom and 2.infin in accinfitforms) {1[lemcase=$lemcase,case=nom] 
	_ liehket(vblex_liehket_fin)[mood=indic,tense=pres,person=p3,number=1.number] _ %2} else { 1 _ %2 }) 
	!!!oainnán su stoahkamin > oainnán son lea stoahkamin 


	| "pers V NP" 2: PRN.*."@SUBJ→" %V.*.$function.$sentinit NP.*.[leftspred] (if 
	(1.person_number in first_sec_person_number and 1.person_number=2.person_number) { %2[lemcase=1.lemcase,sentinit=1.sentinit] _ 3 } 
	elif (2.lem incl ij) { %2[lemcase=1.lemcase] _ 3 } 
	elif (2.lem incl liehket and 2.infin = prfprc) { 1[lemcase=$lemcase,sentinit=1.sentinit] _ 
	%liehket(vblex)[neg="",mood=indic,tense=pres,person=(if (1.person="") p3 else 1.person),number=1.number,infin=""] _ %2 _ 3 }
	else { 1 _ %2 _ 3 }) !!!Mun boran > Båråv
	| "pers V AdvP NP" 3: PRN.*."@SUBJ→" %V.*.$function.$sentinit AdvP NP ?(4.fsubj="") (if 
	(1.person_number in first_sec_person_number and 1.person_number = 2.person_number) { %2[lemcase=1.lemcase,sentinit=1.sentinit] _ 3 _ 4 } 
	elif (2.lem incl ij) { %2[lemcase=1.lemcase] _ 3 _ 4 } 
	elif (2.lem incl liehket and 2.infin = prfprc) { 1[lemcase=$lemcase,sentinit=1.sentinit] _ 
	%liehket(vblex)[neg="",mood=indic,tense=pres,person=(if (1.person="") p3 else 1.person),number=1.number,infin=""] _ %2 _ 3 _ 4 }
	else { 1 _ %2 _ 3 _ 4 }) !!!Mun boran > Båråv
	| "gal pers V" 3: gal@AdvP PRN.*."@SUBJ→" %V {1 _ 2 _ %3}
	| "pers V" 3: PRN.*."@SUBJ→" %V.*.$function.$sentinit (if 
	(1.person_number in first_sec_person_number and 1.person_number= 2.person_number and 1.prn_type=pers) { %2[lemcase=1.lemcase,sentinit=1.sentinit]} 
	elif (2.lem incl ij and 1.function = "@SUBJ→" and 1.prn_type=pers) { %2[lemcase=1.lemcase]} 
	elif (2.lem incl liehket and 2.infin = prfprc) { 1[lemcase=$lemcase,sentinit=1.sentinit] _ 
	%liehket(vblex)[neg="",mood=indic,tense=pres,person=(if (1.person="") p3 else 1.person),number=1.number,infin=""] _ %2}
	else { 1[lemcase=$lemcase] _ %2}) !!!Mun boran > Båråv,
	| "pers AdvP V" 2: PRN.*."@SUBJ→" AdvP %V.*.[mainv].$sentinit (if 
	(1.person_number in first_sec_person_number and 1.person_number= 3.person_number and 1.prn_type=pers) { 2[lemcase=1.lemcase] _ %3} 
	elif (3.lem incl ij and 1.function = "@SUBJ→" and 1.prn_type=pers) { 2[lemcase=1.lemcase] _ %3} 
	elif (3.lem incl liehket and 3.infin = prfprc) { 1[lemcase=$lemcase,sentinit=1.sentinit] _ 
	%liehket(vblex)[neg="",mood=indic,tense=pres,person=(if (1.person="") p3 else 1.person),number=1.number,infin=""] _ 2 _ %3}
	else { 1 _ 2 _ %3}) 
	| "pers VP" 3: prn.pers.*."@SUBJ→" %VP.*.$function.$sentinit (if 
	(1.person_number in first_sec_person_number and 1.person_number= 2.person_number and 1.prn_type=pers) { %2[lemcase=1.lemcase,sentinit=1.sentinit] } 
	elif (2.lem incl ij and 1.prn_type=pers) { %2[lemcase=1.lemcase] } 
!!!	elif (2.lem incl liehket and 2.infin = prfprc) { 1[lemcase=$lemcase,sentinit=1.sentinit] _ 
!!!	%liehket(vblex)[neg="",mood=indic,tense=pres,person=1.person,number=1.number,infin=""] _ %2 }
	else { 1 _ %2 }) !!!Mun boran > Båråv, 
	| "pers leat @←SPRED" 5: prn.pers %leat@vblex.*."@+FMAINV" NP.*."@←SPRED" { 1 _ %2 _ 3 }   
!!!	| "NP leat @←SPRED" 3: NP %leat@vblex.*."@+FMAINV" NP.*."@←SPRED" { 1 _ %2 _ 3 }   
;

IJ -> 1: %ij  {%1} ;

unknown -> %UNKNOWN\:INTERNAL  { %1 } ;

PCLE -> 1: %pcle (if (1.lem/tl="") { } else {1}) ;

APP -> "cm NP AdvP" 1: cm NP %AdvP { 1 _ 2 _ %3}
	| "cm NP NP AdvP" 1: cm NP NP %AdvP { 1 _ 2 _ 3 _ %4}
	;


C -> "CLB coo" 1: %cnjcoo {%1[lemcase=$lemcase]}
	| "CLB sub" 1: %cnjsub {%1[lemcase=$lemcase]}
	| "c_type" 1: %adv.[c_type] {%1[lemcase=$lemcase]}
	| "@→ADVL c_type" 4: adv."@→ADVL" %adv.[c_type] {1[lemcase=$lemcase] _ %2}
	;

CLB -> "CLB cm" 1: %cm {1} 
	| "CLB sent" 1: %sent {1}
	;

!!!QUOT -> %lquot {1}
!!!	| %rquot {1}
!!!	;



S -> 
	"go @+FMAINV NP" 3: go@cnjsub %V.*."@+FMAINV" NP (if (2.lem in copulas) { 1[lemcase=$lemcase] _ %2 _ 3 } else   { 1[lemcase=$lemcase] _ 3 _ %2 })!!! go hállet beatnagiiguin
	| "AP V C" 1: AP %V.*."@+FMAINV" C { 1[lemcase=$lemcase] _ %2 _ 3 } ! Buorre lei go
!!!	| "NP VP" 1: NP %V  { 1[lemcase=$lemcase] _ %2 } !  Øystein muitala
	| "VP cnjcoo VP" 1: %VP cnjcoo VP { 1[lemcase=$lemcase] _ %2 _ 3 } !
	| "V PCLE PRN NP" 1: %V PCLE PRN NP { %1 _ 2 _ 3 _ 4 } !!! leat go dus appelsiinnat?
	| "VP PRN PP" 1: %VP PRN PP { %1 _ 2 _ 3 } !!! mii leamaš stuorra giksin sutnje nuoraidskuvlla rájes.  
	| "leat@+FMAINV SUBJext" 3: %leat@vblex.*."@+FMAINV" NP.*."@←SUBJext" { %1[lemcase=$lemcase,number=2.number] _ 2 } !  
!!!	| "leat@+FMAINV ajAdvP SUBJext" 3: %leat@vblex.*."@+FMAINV" aj@AdvP NP.*."@←SUBJext" { %1[lemcase=$lemcase,number=3.number] _ 3 _ 2 } !  
	| "leat@+FMAINV NP@←SUBJ" 3: %leat@vblex.*."@+FMAINV" NP.*."@←SUBJ" { %1[lemcase=$lemcase,number=2.number] _ 2 }   
	| "leat@+FMAINV NP@←SUBJ prn@←SUBJ" 3: %leat@vblex.*."@+FMAINV" NP.*."@←SUBJ" prn.*."@←SUBJ" { %1 _ 2 _ 3 } !guovttis earát  
	| "@+FMAINV NP@←SUBJ" 1: %vblex.*."@+FMAINV" NP.*."@←SUBJ" { %1[number=2.number] _ 2 }!Beassážiid áiggi lávejit márkanat   
	| "@+FMAINV prn@←SUBJ" 1: %vblex.*."@+FMAINV" prn.*."@←SUBJ" { %1 _ 2 }   
	| "dadjat ahte VP " 2: %[dadjat_verbs]@S ahte@C VP { %1 _ 3 } !!! mii oaidnit ahte lea sierra dárbu > vuojnnep la sierra dárbbo
	| "prn vfmain placetimeadv" 1: %PRN vblex.*."@+FMAINV" [placetimeadv]@AdvP {%1 _ 3 _ 2} 
	| "placetimeadv np vfmain" 1: [placetimeadv]@AdvP NP %vblex.*."@+FMAINV" {1 _ %3 _ 2} 
	| "NP V AdvP" 1: %NP.*.[rightargument] V AdvP {%1 _ 2 _ 3}
	| "NP V PP" 1: %NP.*.[rightargument] V PP {%1 _ 2 _ 3}
	| "juoga rel S" 1: juoga@prn PRN.rel %S {1 _ 2 _ %3 } ! juoga masa
	| "NP VP NP" 1: NP %VP NP.*."@←SPRED" { 1[lemcase=$lemcase] _ %2 _ 3 } !Dán jagi son lea oahpaheaddjin.
	| "NP VP NP ADVL ADVL" 3: NP %VP NP NP.*.[advlleft] NP.*.[advlleft] { 1[lemcase=$lemcase] _ %2 _ 3 _ 4 _ 5 } !ja dát várri lea stuora áittan máŋgga dállodollui Olmmáivákkis.
	| "NP VP" 1: NP %VP ?(1.function not = "@P←") { 1[lemcase=$lemcase] _ %2 } !Sámediggi áigu dainna dieđáhusain bidjat guovddážii fálaldaga.
	| "PP VP" 1: PP %VP  { 1[lemcase=$lemcase] _ %2 } !maŋŋel juovllaid leat
	| "NP PP VP" 1: NP PP %VP { 1[lemcase=$lemcase] _ 2 _ %3 } !buolvvat ovdal min leat gillán
	| "NP v aj np" 2: %NP vblex aj@AdvP NP {%1 _ 2 _ 4 _ 3}
	| "C pers V NP" 2: C prn.pers %V NP (if (2.person_number in first_sec_person_number and 2.person_number= 3.person_number) { 1 _ 4 
	_ %3[lemcase=1.lemcase] } else { 1 _ 2 _ 4 _ %3 }) !Mun boran > Båråv 
	| "C pers V NP AdvP" 2: C prn.pers %V NP AdvP (if (2.person_number in first_sec_person_number and 2.person_number= 3.person_number) { 1 _ 5 _ %3[lemcase=1.lemcase] _ 4 } else { 1 _ 2 _ 5 _ %3 _ 4 }) !  
	| "C pers V PRN " 2: C prn.pers %V PRN (if (2.person_number in first_sec_person_number and 2.person_number= 3.person_number) { 1 _ 4 _ 
	%3[lemcase=1.lemcase] } else { 1 _ 2 _ 4 _ %3 }) ! go mii hárdit sin.
	| "C leat@prfprc" 3: C %liehket@vblex.prfprc.[mainv] {1 _ liehket(vblex_fin)[lemcase=1.lemcase,mood=indic,tense=pres,person=p3,number=sg] _  %2 }
	| "rel VP" 1: PRN.rel %VP {1 _ %2 }
	| "rel S " 1: PRN.rel %S {1 _ %2 }
	| "S C S " 1: %S C S {%1 _ 2 _ 3 }
	| "C S " 1: C %S { 1 _ %2 }
	| "C PRN " 1: C %prn.*."@COMP-CS←" { 1 _ %2 }
	| "VP S " 1: VP %S { 1 _ %2 }

!!!	| "S cm C S" 1: S cm C %S { 1 _ 2 _ %3 } 
!!!	| "AdvP S" 1: AdvP %S {1 _ %2 } 
!!!	| "NP VP NP" 1: NP %VP NP { 1[lemcase=$lemcase] _ %2 _ 3 } 
!!!	| "NP VP pcle" 1: NP %VP pcle { 1[lemcase=$lemcase] _ %2 _ 3 } 
!!!	| "NP VP pcle NP" 1: NP %VP pcle NP { 1 _ %2 _ 3 _ 4 } 
!!!	| "AdvP NP VP" 1: AdvP NP %VP { 1 _ 2 _ %3 }
!!!	| "C NP VP" 1: C NP %VP { 1 _ 2 _ %3 }
!!!	| "AdvP VP NP" 1: AdvP %VP NP { 1 _ %2 _ 3 }
!!!	| "NP pcle VP" 1: NP pcle %VP { 1 _ 2 _ %3 }
!!!	| "vblex ahte " 1: %vblex ahte@C (if (1.function="@+FMAINV") { %1 } else { %1 _ 2 }) !!!lohká ahte > lohká 
!!!	| "VP NP AP C" 1: %VP NP AP C  { %1[lemcase=$lemcase] _ 2 _ 3 _ 4 }  ! 
!!!	| "V AP V" 1: %V AP V.*.[infin] ?(3.lem not incl copulas) { %1[lemcase=$lemcase] _ 2 _ 3 }  ! 
!!!	| "S NP" 1: S %NP { 1 _ %2 } ! 
!!! | "S NP AdvP" 1: S %NP AdvP { 1 _ %2 _ 3 } ! 
!!!	| "S ind NP" 1: S prn.ind %NP { 1 _ 2 _ %3 } ! 
!!!	| "@+FMAINV placetimeadv" 1: %S."@+FMAINV" [placetimeadv]@AdvP { 2[lemcase=1.lemcase] _ %1[lemcase=2.lemcase] } !!! Maid don barggat odne? > Majt uddni barga? skal ikke treffe aktan i soai stoahkaba álo ovttas šiljus stuora dálu olgobealde
!!!	| "S ahte S" 1: S.*."@+FMAINV" ahte@C %S { 1 _ %3 } 
!!!	| "C S" 1: C %S { 1 _ %2 } 
!!!	| "pers VP" 2: prn.pers %VP.$function (if (1.person_number in first_sec_person_number and 1.person_number= 2.person_number)
!!!	{ %2[lemcase=1.lemcase] } else { 1 _ %2 }) !Mun ferten borrat > Båråv            
	;


!!!!!!!!!!!!!!!
!!  CATEGORIES
!!!!!!!!!!!!!!!

function = "@→SUBJ" "@←OBJ" "@→ADVL" "@→ADVL-ine" "@→ADVL-ela" "@←ADVL-ine" "@←ADVL-ela" ;
gender = f m ;
sem = sem_hum sem_food ;
number = sg du pl ;
prn_type_other = rel dem indef itg ;
prn_type = pers ref [prn_type_other] ;
np_type_other = top hyd cog org al pat ;
np_type = ant [np_type_other] ;
case = acc nom gen loc ine ela com ess ill ;
poss = ("" "") px1sg px1du px1pl px2sg px2du px2pl px3sg px3du px3pl ;
person = p1 p2 p3 ;
attr = attr ;
comp = comp sup ;
vform = inf conneg ;
neg = neg ;
qst = qst ;
transitivity = tv iv ;
mood = indic imp ;
tense = pres pret ;
person_number = "p1.sg" "p1.du" "p1.pl"
                "p2.sg" "p2.du" "p2.pl"
                "p3.sg" "p3.du" "p3.pl" ;


!!!!!!!!!!!!!!!
!! OUTPUT PATTERNS
!!!!!!!!!!!!!!!

VP: _.mood.tense.vform ;
NP: _.function.number.case.poss.sem ;
PP: _ ;
S: _ ;
AdvP: _ ;
A: _ ;
AP: _;

cnjcoo: _ ;

n: _.number.case.poss ;
post: _ ;
qst: _ ;
adv: _ ;
num: _.number.case ;

np_ant: _.<ant>.gender.number.case ;
np_other: _.np_type.number.case ;
np: (if (1.np_type = ant) 1(np_ant)
      else 1(np_other)) ;

prn_pers: _.<pers>.person.number.case ;
prn_ref: _.<ref>.number.case.poss ;

prn_other: _.prn_type_other.number.case ;
prn: (if (1.prn_type = pers) 1(prn_pers)
      elif (1.prn_type = ref) 1(prn_ref)
      else 1(prn_other)) ;

adj_attr: _.attr ;
adj_pred: _.comp.number.case ;
adj: (if (1.attr = attr) 1(adj_attr)
      else 1(adj_pred)) ;
      
vblex_fin: _.transitivity.neg.mood.tense.person.number.qst ; 
vblex_inf: _.transitivity.vform ;
vblex: (if (1.vform = "") 1(vblex_fin)
        else 1(vblex_inf)) ;


!!!!!!!!!!!!!!!
!! TAG-REWRITE RULES
!!!!!!!!!!!!!!!

person_number > poss : "p1.sg" px1sg, "p1.du" px1du, "p1.pl" px1pl,
                       "p2.sg" px2sg, "p2.du" px2du, "p2.pl" px2pl,
                       "p3.sg" px3sg, "p3.du" px3du, "p3.pl" px3pl ;
! a rule for converting person+number tag pairs to possessive tags
! this applies if you write poss=1.person_number or 1.person_number>poss
! "" because these are pairs instead of single tags

case > case : ine loc , ela loc ;


!!!!!!!!!!!!!!!
!! REDUCTION RULES
!!!!!!!!!!!!!!!

AP -> %adj { 1 }
    | adv %adj { 1 _ 2 }
    ;

AdvP -> %adv { 1 }
      | %adv cnjcoo adv { 1 _ 2 _ 3 };


NP -> %n { 1[poss=$poss] } ;

NP -> %np { 1 } ;
NP -> %prn { 1 } ; 
NP -> %NP cnjcoo NP { %1 _ 2 _ 3[case=$case] } ;

NP -> %num n {1 _ 2} ;
!NP -> %num n [$number=(if (1.lem = "1") sg else pl)] { 1 _ 2[number=1.number] } ; !for shit in guokte biillat Brukt for sme-smj

NP -> prn.ref %n { 1 _ 2} ; !ietjam viellja
NP -> prn.dem %n { 1 _ 2} ; !dav vielja

NP -> "attr adj" adj.attr %NP { 1 _ %2[poss=$poss] } ;

NP -> adj.attr adj.attr %NP { 1 _ 2 _ %3[poss=$poss] } ;


p1_or_p2 = p1 p2 ;
NP -> prn.pers.[p1_or_p2].*.gen %NP
      { %2[poss=1.person_number]
       ! the following is equivalent
       ! 2[poss=(if (1.person = p1 and 1.number = sg) px1sg
       !         if (1.person = p1 and 1.number = du) px1du
       !         if (1.person = p1 and 1.number = pl) px1pl
       !         if (1.person = p2 and 1.number = sg) px2sg
       !         if (1.person = p2 and 1.number = du) px2du
       !         if (1.person = p2 and 1.number = pl) px2pl
       !         if (1.person = p3 and 1.number = sg) px3sg
       !         if (1.person = p3 and 1.number = du) px3du
       !         if (1.person = p3 and 1.number = pl) px3pl
       !        )]
      } ;
       

! Sån la vidá jagák.
! Son lea vihtta jagi boaris.

NP -> %num jagák@adj { 1[case=nom] _ jahki@n.gen _ 2[lem=boaris] } ; !feil, hva gjør jeg?

PP -> n  %post {1 _ 2}  !muora lunna
    | NP %post {1 _ 2} 
    ; 



VP -> %vblex { 1 } ;
VP -> %vblex cnjcoo vblex { 1 _ 2 _ 3 } ;

VP -> %V.tv NP { 1 _ 2 } ;
VP -> NP %V.tv { 1 _ 2 } ;

VP -> AdvP %VP { 1 _ %2 } ;
VP -> %VP AdvP { %1 _ 2 } ;


!echo 'boratgo? borat go láibbi? láibbi go borat? > båråk? lájbev båråk? lájbev båråk?
V: _.transitivity.qst ;

V -> %vblex { 1 } ;
V -> %V go@pcle.qst [$qst=qst] { %1 } ;



NegP: _ ;
NegP -> ij@vblex.iv.neg VP.*.conneg
         { 1[tense="",mood=$mood] _ 2[tense=1.tense,mood=1.mood] } ; ! 


S -> AdvP NP VP { 1 _ 2 _ 3  } ;
S -> AdvP VP NP { 1 _ 2 _ 3  } ;

!S -> NP."@→SUBJ" VP |
!     VP NP."@←SUBJ" ;
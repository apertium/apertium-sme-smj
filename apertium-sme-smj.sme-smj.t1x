<?xml version="1.0" encoding="UTF-8"?>
<!-- -*- nxml -*- -->

<!--
Documenting choose-parts in macros

set_caseFirstword

agreement-adj-sg-2Param

agreement-adj-2Param

agreement-ind-pl-2Param

convert-deriv-1Param

inherenttag-px-2Param

assign-case-1Param

foc-1Param

general-macro-1Param
M[V] verb_nbrpers
M[V] infin
M[T] remove tense when cond
M[T] remove tense when pot
M[T] change gen to acc when sem_route
M[V] ext
M[V] empty ext
M[V] vdic
M[V] empty vdic
M[V] func
M[T] add sg to prn.ref when not nom
M[T] remove extra tags from adv
M[T] remove foc from prn
M[T] add attr to buorre

general-macro-2Param

general-macro-2Param-headfirst

general-macro-3Param

general-macro-4Param
 
 
Rules:
Rules for verbals:
C[T]-V negverb
C[T]-V negverb word_qst_not_verb word_not_verb word_not_verb connegverb
C[TW]-V negverb word_qst_not_verb word_not_verb connegverb
C[T]-V negverb word_qst_not_verb connegverb
C[T]-V negverb connegverb
C[T]-V negverbqst connegverb
C[_]-V verb_prfprc
C[TW]-V negverb23 leat_conneg word
C[T]-V verb_inf
C[AT]-V verb_fin
C[T]-V verb_actio
C[AT]-V leat_qst
C[AT]-V mainverbqst
C[_]-V leat_aux
 
Rules for predicates:
C[D]-PRED váldit_vblex váldit_particle
C[W]-PRED boahtitverb fápmu_n_ill
C[W]-PRED váldit_vblex atnu_n_ill
C[D]-PRED bidjat_vblex guovddáš_n
C[T]-PRED leat_aux_main mielde_adv verb_actio_inf Supn
C[D]-PRED váldit_particle váldit_vblex
 
Rules for adjectives:
C[_]-A adj
C[_]-A n_cmp adj
 
Rules for bare nouns and pronouns:
C[T]-N ind_prn_neg removes Foc
C[_]-N prn
C[S]-N n_cmp noun
C[S]-N n_cmp n_cmp noun
C[S]-N n_cmp n_cmp n_cmp noun
 
Rules for noun phrases:
C[S]-NP mod_n n_not_cmp prop_nom
C[_]-NP n_not_cmp prop_attr prop_nom
C[_]-NP mod_n n_not_cmp prop_attr prop_nom
C[_]-NP n_not_cmp prop_attr prop_attr prop_nom
C[_]-NP mod_n n_not_cmp prop_attr prop_attr prop_nom
C[DL]-NP guhkki_adj áigi_n
C[T]-NP mod_n n_not_cmp
C[_]-NP mod_n mod_n n_not_cmp
C[S]-NP mod_n mod_n mod_n n_not_cmp
C[ST]-NP n_cmp mod_n n_not_cmp
C[S]-NP mod_n n_cmp n_not_cmp
C[S]-NP mod_n mod_n n_cmp n_not_cmp
C[T]-NP months_n semyear
 
Rules for numeral expressions:
C[T]-NUM numeral
C[T]-NUM numeral prn_dem noun
C[T]-NUM prn_dem prn_dem noun
C[T]-NUM prn_num noun
C[T]-NUM mod_num prn_num noun
C[T]-NUM prn_num n_cmp noun
C[_]-NUM noun num-ldep
C[_]-NUM numeral prosent
C[_]-NUM mod_num numeral prosent
 
Rules for adverbs:
C[_]-ADV adv
C[LT]-ADV bealis_px
 
Rules for P phrases:
C[T]-PP nom_gen miehtá_adp
C[_]-PP adpos
C[T]-PP eará_seammá_prn ladje_post
C[DT]-PP gen váste_post
C[DT]-PP n_cmp gen váste_post
C[DL]-PP guhkki_adj áigi_n vuollai_post
 
Rules for other phrases:
C[T]-PHR noun_nom leat_main geatnegahtton_adj verb_inf
C[_]-PHR noun_nom leat_main geatnegahtton_adj
 
Small word classes:
C[T]-PCLE pcle
C[_]-PCLE dat_pcle
C[_]-CS cnjsub
 
Technical things:
C[_]-T comma
C[_]-T default
C[_]-T sent
-->

<transfer default="chunk">

  <section-def-cats>
    <!-- HARMONISED -->

    <def-cat n="prn">
      <cat-item tags="prn.*"/>
    </def-cat>

    <def-cat n="prn_rel">
      <cat-item tags="prn.rel.*"/>
    </def-cat>

    <def-cat n="prn_res">
      <cat-item tags="prn.res.*"/>
    </def-cat>

    <def-cat n="prn_pers">
      <cat-item tags="prn.pers.*"/>
    </def-cat>

    <def-cat n="prn_pers_gen">
      <cat-item tags="prn.pers.*.gen.*"/>
    </def-cat>

    <def-cat n="prn_pers_acc">
      <cat-item tags="prn.pers.*.acc.*"/>
    </def-cat>

    <def-cat n="prn_dem">
      <cat-item tags="prn.dem.*"/>
    </def-cat>

    <def-cat n="prn_refl">
      <cat-item tags="prn.ref.*"/>
    </def-cat>

    <def-cat n="prn_itg">
      <cat-item tags="prn.itg.*"/>
    </def-cat>

    <def-cat n="prn_ind">
      <cat-item tags="prn.ind.*"/>
    </def-cat>

    <def-cat n="prn_attr">
      <cat-item tags="prn.ind.attr"/>
      <cat-item tags="prn.ind.attr.*"/>
      <cat-item tags="prn.itg.attr.*"/>
    </def-cat>

    <def-cat n="prn_dem_sg">
      <cat-item tags="prn.dem.sg.*"/>
    </def-cat>

    <def-cat n="numeral">
      <cat-item tags="num.*"/>
    </def-cat>

    <def-cat n="num_cmp">
      <cat-item tags="num.cmp"/>
      <cat-item tags="num.*.cmp"/>
      <cat-item tags="num.*.guio"/>
    </def-cat>

    <def-cat n="num_nomacc">
      <cat-item tags="num.sg.nom.*"/>
      <cat-item tags="num.sg.acc.*"/>
    </def-cat>

    <def-cat n="num_ldep">
      <cat-item tags="num.*.@N←"/>
      <cat-item tags="num.*.*.@N←"/>
      <cat-item tags="num.*.*.*.@N←"/>
    </def-cat>

    <def-cat n="noun"> 
      <cat-item tags="n.sg.*"/>
      <cat-item tags="n.*.sg.*"/>
      <cat-item tags="n.*.*.sg.*"/>
      <cat-item tags="*.n.sg.*"/>
      <cat-item tags="*.n.*.sg.*"/>
      <cat-item tags="n.pl.*"/>
      <cat-item tags="n.*.pl.*"/>
      <cat-item tags="n.*.*.pl.*"/>
      <cat-item tags="*.n.pl.*"/>
      <cat-item tags="*.n.*.pl.*"/>
      <cat-item tags="np.*"/>
      <cat-item tags="n.ess.*"/>
      <cat-item tags="n.*.ess.*"/>
      <cat-item tags="n.*.*.ess.*"/>
      <cat-item tags="*.n.ess.*"/>
      <cat-item tags="*.n.*.ess.*"/>
      <cat-item tags="n.abbr.*"/>
      <cat-item tags="*.cmp_sgnom.cmp_splitr.*"/>
    </def-cat>

    <def-cat n="n_cmp">
      <cat-item tags="*.cmp"/>
      <cat-item tags="*.cmp.guio"/>
      <cat-item lemma="dárogiel" tags="adj.*.attr.*"/>
      <cat-item lemma="sámegiel" tags="adj.*.attr.*"/>
      <cat-item lemma="davvisámegiel" tags="adj.*.attr.*"/>
      <cat-item lemma="julevsámegiel" tags="adj.*.attr.*"/>
      <cat-item lemma="lullisámegiel" tags="adj.*.attr.*"/>
      <cat-item lemma="suomagiel" tags="adj.*.attr.*"/>
    </def-cat>

    <def-cat n="nom_gen">
      <cat-item tags="n.*.sg.gen.*"/>
      <cat-item tags="n.*.pl.gen.*"/>
      <cat-item tags="np.sg.gen.*"/>
      <cat-item tags="np.*.pl.gen.*"/>
      <cat-item tags="np.*.sg.gen.*"/>
      <cat-item tags="np.pl.gen.*"/>
      <cat-item tags="prn.*.p3.sg.gen.*"/>
      <cat-item tags="prn.*.p2.sg.gen.*"/>
      <cat-item tags="prn.*.p1.sg.gen.*"/>
      <cat-item tags="prn.*.p3.pl.gen.*"/>
      <cat-item tags="prn.*.p2.pl.gen.*"/>
      <cat-item tags="prn.*.p1.pl.gen.*"/>
      <cat-item tags="prn.*.p3.du.gen.*"/>
      <cat-item tags="prn.*.p2.du.gen.*"/>
      <cat-item tags="prn.*.p1.du.gen.*"/>
    </def-cat>

    <def-cat n="n_not_cmp">
      <cat-item tags="n.*.sg.*"/>  
      <cat-item tags="n.*.pl.*"/>
      <cat-item tags="n.*.ess.*"/>
      <cat-item tags="n.*.*.sg.*"/>
      <cat-item tags="n.*.*.pl.*"/>
      <cat-item tags="n.*.*.ess.*"/>
      <cat-item tags="*.n.sg.*"/>
      <cat-item tags="*.n.pl.*"/>
      <cat-item tags="*.n.ess.*"/>
      <cat-item tags="*.prsprc.*"/>  
      <cat-item tags="np.*.*.sg.*"/>  
      <cat-item tags="np.*.*.pl.*"/>  
    </def-cat>

    <def-cat n="n_sg_nom">
      <cat-item tags="n.*.sg.nom.*"/>
    </def-cat>

    <def-cat n="cmp_splitr">
      <cat-item tags="n.*.*.cmp_splitr.*"/>
    </def-cat>

    <def-cat n="adj">
      <cat-item tags="adj.*"/>
      <cat-item tags="n.*.der_dibme.adj.*"/>
      <cat-item tags="n.*.der_lasj.adj.*"/>
      <cat-item tags="n.der_lasj.adj.*"/>
      <cat-item tags="n.der_saš.adj.*"/>
      <cat-item tags="n.*.der_sasj.adj.*"/>
      <cat-item tags="n.der_sasj.adj.*"/>
    </def-cat>

    <def-cat n="verb_inf">
      <cat-item tags="vblex.*.inf.*"/>
      <cat-item tags="vblex.*.der_l.v.inf.*"/>
      <cat-item tags="vblex.*.der_d.v.inf.*"/>
      <cat-item tags="vblex.*.der_caus.v.inf.*"/>
      <cat-item tags="vblex.*.der_caus.v.*.inf.*"/>
      <cat-item tags="vblex.*.der_inchl.v.inf.*"/>
    </def-cat>

    <def-cat n="verb_fin">
      <cat-item tags="vblex.*.indic.*"/>
      <cat-item tags="vblex.*.cond.*"/> 
      <cat-item tags="vblex.*.pot.*"/>
      <cat-item tags="vblex.*.der_inchl.vblex.indic.*"/>
      <cat-item tags="vblex.*.der_inchl.vblex.cond.*"/>
      <cat-item tags="vblex.*.der_inchl.vblex.pot.*"/>
    </def-cat>

  <def-cat n="negverb"> <!-- no qst or foc_bat -->
      <cat-item tags="vblex.iv.neg.indic.p1.sg.@+FAUXV"/>
      <cat-item tags="vblex.iv.neg.indic.p2.sg.@+FAUXV"/>
      <cat-item tags="vblex.iv.neg.indic.p3.sg.@+FAUXV"/>
      <cat-item tags="vblex.iv.neg.indic.p1.pl.@+FAUXV"/>
      <cat-item tags="vblex.iv.neg.indic.p2.pl.@+FAUXV"/>
      <cat-item tags="vblex.iv.neg.indic.p3.pl.@+FAUXV"/>
      <cat-item tags="vblex.iv.neg.indic.p1.du.@+FAUXV"/>
      <cat-item tags="vblex.iv.neg.indic.p2.du.@+FAUXV"/>
      <cat-item tags="vblex.iv.neg.indic.p3.du.@+FAUXV"/>

      <cat-item tags="vblex.iv.neg.indic.p1.sg.foc_neg-ge.@+FAUXV"/>
      <cat-item tags="vblex.iv.neg.indic.p2.sg.foc_neg-ge.@+FAUXV"/>
      <cat-item tags="vblex.iv.neg.indic.p3.sg.foc_neg-ge.@+FAUXV"/>
      <cat-item tags="vblex.iv.neg.indic.p1.pl.foc_neg-ge.@+FAUXV"/>
      <cat-item tags="vblex.iv.neg.indic.p2.pl.foc_neg-ge.@+FAUXV"/>
      <cat-item tags="vblex.iv.neg.indic.p3.pl.foc_neg-ge.@+FAUXV"/>
      <cat-item tags="vblex.iv.neg.indic.p1.du.foc_neg-ge.@+FAUXV"/>
      <cat-item tags="vblex.iv.neg.indic.p2.du.foc_neg-ge.@+FAUXV"/>
      <cat-item tags="vblex.iv.neg.indic.p3.du.foc_neg-ge.@+FAUXV"/>
    </def-cat>

    <def-cat n="verb_prfprc">
      <cat-item tags="*.prfprc.*"/>
    </def-cat>

    <def-cat n="leat_aux">
      <cat-item lemma="leat" tags="*.@+FAUXV"/>
      <cat-item lemma="leat" tags="*.@-FAUXV"/>
    </def-cat>

    <def-cat n="leat_main_fin">
      <cat-item lemma="leat" tags="*.sg.@+FMAINV"/>
      <cat-item lemma="leat" tags="*.du.@+FMAINV"/>
      <cat-item lemma="leat" tags="*.pl.@+FMAINV"/>
    </def-cat>

    <def-cat n="prop_nom">
      <cat-item tags="np.*.sg.nom.*"/>
    </def-cat>

    <def-cat n="prop_nom_pers">
      <cat-item tags="np.ant.*.sg.nom.*"/>
      <cat-item tags="np.cog.sg.nom.*"/>
    </def-cat>


    <def-cat n="prop_attr">
      <cat-item tags="np.*.attr.*"/>
    </def-cat>

    <def-cat n="prop_cmp">
      <cat-item tags="np.*.cmp"/>
      <cat-item tags="np.cmp"/>
      <cat-item tags="np.*.guio"/>
    </def-cat>

    <def-cat n="cnjsub">
      <cat-item tags="cnjsub"/>
      <cat-item tags="cnjsub.*"/>
    </def-cat>

    <def-cat n="cnjcoo">
      <cat-item tags="cnjcoo"/>
      <cat-item tags="cnjcoo.*"/>
    </def-cat>

    <def-cat n="pcle">
      <cat-item tags="pcle"/>
      <cat-item tags="pcle.*"/>
    </def-cat>

    <def-cat n="adpos">
      <cat-item tags="post.*"/>
      <cat-item tags="pr.*"/>
    </def-cat>

    <def-cat n="pr">
      <cat-item tags="pr"/>
      <cat-item tags="pr.*"/>
    </def-cat>

    <def-cat n="post">
      <cat-item tags="post"/>
      <cat-item tags="post.*"/>
    </def-cat>

    <def-cat n="abbr">
      <cat-item tags="*.abbr.*"/>
    </def-cat>

    <def-cat n="default">
      <cat-item tags="*"/>
    </def-cat>

    <def-cat n="mod_n">
      <cat-item tags="prn.pers.*.*.@→N"/>
      <cat-item tags="prn.ref.*.*.@→N"/>
      <cat-item tags="prn.ref.*.*.*.@→N"/>
      <cat-item tags="adj.*.*.@→N"/>
      <cat-item tags="adj.*.@→N"/>
      <cat-item tags="n.*.@→N"/>
      <cat-item tags="adv.@→N"/>
      <cat-item tags="adv.*.@→N"/>
      <cat-item tags="n.*.*.*.@→N"/>
      <cat-item tags="n.*.*.*.*.@→N"/>
      <cat-item tags="n.*.*.@→N"/>
      <cat-item tags="np.*.@→N"/>
      <cat-item tags="vblex.*.@→N"/>
      <cat-item tags="*.cmp_splitr.*"/>
    </def-cat>

    <def-cat n="mod_num">
      <cat-item tags="*.@→Num"/>
    </def-cat>

    <def-cat n="gen">
      <cat-item tags="*.gen.*"/>
    </def-cat>

    <def-cat n="dat_pcle">
      <cat-item lemma="dat" tags="pcle.*"/>
    </def-cat>

    <def-cat n="foc">
      <cat-item lemma="ba" tags="pcle.*"/>
      <cat-item lemma="ban" tags="pcle.*"/>
      <cat-item lemma="bat" tags="pcle.*"/>
      <cat-item lemma="ge" tags="pcle.*"/>
      <cat-item lemma="ges" tags="pcle.*"/>
      <cat-item lemma="gis" tags="pcle.*"/>
      <cat-item lemma="hal" tags="pcle.*"/>
      <cat-item lemma="han" tags="pcle.*"/>
      <cat-item lemma="nai" tags="pcle.*"/>
      <cat-item lemma="son" tags="pcle.*"/>
      <cat-item lemma="nu" tags="pcle.*"/>
    </def-cat>

    <def-cat n="ja">
      <cat-item lemma="ja" tags="cnjcoo"/>
      <cat-item lemma="ja" tags="cnjcoo.*"/>
      <cat-item lemma="ahte" tags="cnjcoo.*"/>
      <cat-item lemma="ahte" tags="cnjcoo"/>
    </def-cat>

    <def-cat n="jahki_n_loc">
      <cat-item lemma="jahki" tags="n.*.sg.loc.*"/>
      <cat-item lemma="jahki" tags="n.sg.loc.*"/>
    </def-cat>

    <def-cat n="jahki_n_gen">
      <cat-item lemma="jahki" tags="n.*.sg.gen.*"/>
      <cat-item lemma="jahki" tags="n.sg.gen.*"/>
    </def-cat>

    <def-cat n="months_n">
      <cat-item lemma="ođđajagemánnu" tags="n.*"/>
      <cat-item lemma="guovvamánnu" tags="n.*"/>
      <cat-item lemma="njukčamánnu" tags="n.*"/>
      <cat-item lemma="cuoŋománnu" tags="n.*"/>
      <cat-item lemma="miessemánnu" tags="n.*"/>
      <cat-item lemma="geassemánnu" tags="n.*"/>
      <cat-item lemma="suoidnemánnu" tags="n.*"/>
      <cat-item lemma="borgemánnu" tags="n.*"/>
      <cat-item lemma="čakčamánnu" tags="n.*"/>
      <cat-item lemma="golggotmánnu" tags="n.*"/>
      <cat-item lemma="skábmamánnu" tags="n.*"/>
      <cat-item lemma="juovlamánnu" tags="n.*"/>
    </def-cat>

    <def-cat n="semyear">
      <cat-item tags="*.sem_year.sg.*"/>
      <cat-item tags="*.sem_year.sg"/>
    </def-cat>

    <def-cat n="áigi_n">
      <cat-item lemma="áigi" tags="n.*"/>
    </def-cat>

    <def-cat n="ge_pcle">
      <cat-item lemma="ge" tags="pcle.*"/>
    </def-cat>

    <def-cat n="boaris_adj">
      <cat-item lemma="boaris" tags="adj.*"/>
    </def-cat>

    <def-cat n="buorre_adj">
      <cat-item lemma="buorre" tags="adj.*.@→N"/>
    </def-cat>

    <def-cat n="guhkki_adj">
      <cat-item lemma="guhkki" tags="adj.*"/>
    </def-cat>

    <def-cat n="geatnegahtton_adj">
      <cat-item lemma="geatnegahtton" tags="adj.*"/>
      <cat-item lemma="geatnegahttojuvvon" tags="adj.*"/>
    </def-cat>

    <def-cat n="mielde_adv">
      <cat-item lemma="mielde" tags="adv.*"/>
    </def-cat>

    <def-cat n="váldit_particle">
      <cat-item lemma="mielde" tags="adv.*"/>
      <cat-item lemma="vuhtii" tags="adv.*"/>
    </def-cat>


    <def-cat n="fárrui_post">
      <cat-item lemma="fárrui" tags="adv.*"/>
    </def-cat>

    <def-cat n="dihte_post">
      <cat-item lemma="dihte" tags="post.*"/>
      <cat-item lemma="dihtii" tags="post.*"/>
    </def-cat>

    <def-cat n="miehtá_adp">
      <cat-item lemma="miehtá" tags="pr.*"/>
      <cat-item lemma="miehtá" tags="post.*"/>
    </def-cat>

    <def-cat n="váste_post">
      <cat-item lemma="váste" tags="post.*"/>
      <cat-item lemma="várás" tags="post.*"/>
    </def-cat>

    <def-cat n="birra_post">
      <cat-item lemma="birra" tags="post.*"/>
    </def-cat>

    <def-cat n="vuollai_post">
      <cat-item lemma="vuollai" tags="post.*"/>
    </def-cat>

    <def-cat n="sisa_post">
      <cat-item lemma="sisa" tags="post.*"/>
    </def-cat>

    <def-cat n="geahčen_post">
      <cat-item lemma="geahčen" tags="post.*"/>
    </def-cat>

    <def-cat n="mielde_post">
      <cat-item lemma="mielde" tags="post.*"/>
    </def-cat>

    <def-cat n="bokte_post">
      <cat-item lemma="bokte" tags="post.*"/>
      <cat-item lemma="bakte" tags="post.*"/>
    </def-cat>

    <def-cat n="beallai_post">
      <cat-item lemma="beallai" tags="post.*"/>
    </def-cat>
    
    <def-cat n="birra_adv">
      <cat-item lemma="birra" tags="adv.*"/>
    </def-cat>

    <def-cat n="fápmu_n_ill"> 
      <cat-item lemma="fápmu" tags="n.*.sg.ill.*"/>
    </def-cat>

    <def-cat n="go_qst">
      <cat-item lemma="go" tags="pcle.qst.*"/>
    </def-cat>

    <def-cat n="go_cnjsub">
      <cat-item lemma="go" tags="cnjsub"/>
      <cat-item lemma="go" tags="cnjsub.*"/>
    </def-cat>

    <def-cat n="bealis_px">
      <cat-item lemma="bealis" tags="adv.px1sg.*"/>
      <cat-item lemma="bealis" tags="adv.px2sg.*"/>
      <cat-item lemma="bealis" tags="adv.px3sg.*"/>
      <cat-item lemma="bealis" tags="adv.px1du.*"/>
      <cat-item lemma="bealis" tags="adv.px2du.*"/>
      <cat-item lemma="bealis" tags="adv.px3du.*"/>
      <cat-item lemma="bealis" tags="adv.px1pl.*"/>
      <cat-item lemma="bealis" tags="adv.px2pl.*"/>
      <cat-item lemma="bealis" tags="adv.px3pl.*"/>
    </def-cat>

    <def-cat n="liikot_vblex">
      <cat-item lemma="liikot" tags="vblex.*"/>
    </def-cat>

    <def-cat n="geahččat_vblex">
      <cat-item lemma="geahččat" tags="vblex.*"/>
    </def-cat>

    <def-cat n="váikkuhit_vblex">
       <cat-item lemma="váikkuhit" tags="vblex.*"/>
    </def-cat>

    <def-cat n="boahtit_vblex"> 
      <cat-item lemma="boahtit" tags="vblex.*"/>
    </def-cat>
    <def-cat n="bidjat_vblex"> 
      <cat-item lemma="bidjat" tags="vblex.*"/>
    </def-cat>
    <def-cat n="guovddáš_n"> 
      <cat-item lemma="guovddáš" tags="n.*.sg.ill.*"/>
    </def-cat>

    <def-cat n="beassat_vblex">
      <cat-item lemma="beassat" tags="vblex.iv.*"/>
    </def-cat>

    <def-cat n="speech_vblex">
      <cat-item lemma="hupmat" tags="vblex.*"/>
      <cat-item lemma="hállat" tags="vblex.*"/>
      <cat-item lemma="muitalit" tags="vblex.*"/>
    </def-cat>

    <def-cat n="word">
      <cat-item tags="adj.*"/>
      <cat-item tags="adj"/>
      <cat-item tags="adv.*"/>
      <cat-item tags="adv"/>
      <cat-item tags="cnjsub.*"/>
      <cat-item tags="cnjsub"/>
      <cat-item tags="n.*"/>
      <cat-item tags="n"/>
      <cat-item tags="np.*"/>
      <cat-item tags="np"/>
      <cat-item tags="num.*"/>
      <cat-item tags="pcle"/>
      <cat-item tags="pcle.@PCLE"/>
      <cat-item tags="post.*"/>
      <cat-item tags="post"/>
      <cat-item tags="prn.*"/>
      <cat-item tags="vblex.*"/>
    </def-cat>

    <def-cat n="vp_boundary">
      <cat-item tags="cm"/>
      <cat-item tags="sent"/>
      <cat-item tags="cnjcoo.@CVP"/>
    </def-cat>

    <def-cat n="cnp">
      <cat-item tags="cnjcoo.@CNP"/>
    </def-cat>

    <def-cat n="sent">
      <cat-item tags="sent.*"/>
      <cat-item tags="sent"/>
      <cat-item tags="clb"/>
      <cat-item tags="clb.*"/>
    </def-cat>

    <def-cat n="comma">
      <cat-item lemma="," tags="cm"/>
    </def-cat>

    <def-cat n="prosent">
      <cat-item lemma="%" tags="punct"/>
    </def-cat>

    <!-- PENDING HARMONISERING -->

     <def-cat n="vuhtii_adv">
  	 	<cat-item lemma="vuhtii" tags="adv.*"/>
  	 </def-cat>
     <def-cat n="eará_seammá_prn">
  	 	<cat-item lemma="eará" tags="prn.*"/>
  	 	<cat-item lemma="seammá" tags="prn.*"/>
  	 </def-cat>
     <def-cat n="ladje_post">
  	 	<cat-item lemma="ládje" tags="adv.*"/>
  	 	<cat-item lemma="láhkai" tags="adv.*"/>
  	 </def-cat>
  	 <def-cat n="váldit_vblex">
  	 	<cat-item lemma="váldit" tags="vblex.*"/>
  	 </def-cat>
     <def-cat n="atnu_n_ill">
  	 	<cat-item lemma="atnu" tags="n.*.sg.ill.*"/>
  	 </def-cat>
 	 <def-cat n="ind_prn_neg">
  	 	<cat-item lemma="mihkke" tags="*.foc_neg-ge.*"/>
  	 	<cat-item lemma="mihkke" tags="*.foc_pos-ge.*"/>
  	 	<cat-item lemma="guhtemuš" tags="*.foc_neg-ge.*"/>
  	 	<cat-item lemma="guhtemuš" tags="*.foc_pos-ge.*"/>
  	 </def-cat>
     <def-cat n="negverb23">
      <cat-item tags="vblex.neg.indic.p3.pl.*"/>
      <cat-item tags="vblex.neg.indic.p2.sg.*"/>
      <cat-item tags="vblex.*.neg.indic.p3.pl.*"/>
      <cat-item tags="vblex.*.neg.indic.p2.sg.*"/>
    </def-cat>

   <def-cat n="verb_actio">
      <cat-item tags="vblex.*.actio.*"/>
    </def-cat>
   <def-cat n="verb_actio_inf">
      <cat-item tags="vblex.*.actio.*"/>
      <cat-item tags="vblex.*.inf.*"/>
      <cat-item tags="vblex.*.der_l.v.inf.*"/>
      <cat-item tags="vblex.*.der_d.v.inf.*"/>
      <cat-item tags="vblex.*.der_caus.v.inf.*"/>
      <cat-item tags="vblex.*.der_caus.v.*.inf.*"/>
      <cat-item tags="vblex.*.der_inchl.v.inf.*"/>
    </def-cat>
    <def-cat n="leat_aux_main">
      <cat-item lemma="leat" tags="*.@+FAUXV"/>
      <cat-item lemma="leat" tags="*.@-FAUXV"/>
      <cat-item lemma="leat" tags="*.@+FMAINV"/>
      <cat-item lemma="leat" tags="*.@-FMAINV"/>
    </def-cat>

    <def-cat n="leat_qst">
      <cat-item lemma="leat" tags="vblex.*.qst.@+FMAINV"/>
    </def-cat>

     <def-cat n="leat_conneg">
      <cat-item lemma="orrut" tags="vblex.*.indic.*.conneg.*"/>
      <cat-item lemma="leat" tags="vblex.*.indic.*.conneg.*"/>
    </def-cat>
    <def-cat n="leat_main">
      <cat-item lemma="leat" tags="*.@+FMAINV"/>
      <cat-item lemma="leat" tags="*.@-FMAINV"/>
    </def-cat>

     <def-cat n="word_qst_not_verb">
      <cat-item tags="adv"/>
      <cat-item tags="adv.*"/>
      <cat-item tags="pcle"/>
      <cat-item tags="pcle.*"/>
      <cat-item tags="cnjsub"/>
      <cat-item tags="cnjsub.*"/>
      <cat-item tags="n"/>
      <cat-item tags="n.*"/>
      <cat-item tags="np"/>
      <cat-item tags="np.*"/>
      <cat-item tags="np"/>
      <cat-item tags="np.*"/>
      <cat-item tags="adj"/>
      <cat-item tags="adj.*"/>
       <cat-item tags="prn.*"/>
   </def-cat>
     <def-cat n="word_not_verb">
      <cat-item tags="adv"/>
      <cat-item tags="adv.*"/>
      <cat-item tags="pcle"/>
      <cat-item tags="pcle.@PCLE"/>
      <cat-item tags="cnjsub"/>
      <cat-item tags="cnjsub.*"/>
      <cat-item tags="n"/>
      <cat-item tags="n.*"/>
      <cat-item tags="np"/>
      <cat-item tags="np.*"/>
      <cat-item tags="np"/>
      <cat-item tags="np.*"/>
      <cat-item tags="adj"/>
      <cat-item tags="adj.*"/>
       <cat-item tags="prn.*"/>
   </def-cat>



  <def-cat n="negverbqst">
      <cat-item tags="vblex.iv.neg.indic.p1.sg.qst.*"/>
      <cat-item tags="vblex.iv.neg.indic.p2.sg.qst.*"/>
      <cat-item tags="vblex.iv.neg.indic.p3.sg.qst.*"/>
      <cat-item tags="vblex.iv.neg.indic.p1.du.qst.*"/>
      <cat-item tags="vblex.iv.neg.indic.p2.du.qst.*"/>
      <cat-item tags="vblex.iv.neg.indic.p3.du.qst.*"/>
      <cat-item tags="vblex.iv.neg.indic.p1.pl.qst.*"/>
      <cat-item tags="vblex.iv.neg.indic.p2.pl.qst.*"/>
      <cat-item tags="vblex.iv.neg.indic.p3.pl.qst.*"/>
      <cat-item tags="vblex.iv.neg.indic.p1.sg.foc_bat.*"/>
      <cat-item tags="vblex.iv.neg.indic.p2.sg.foc_bat.*"/>
      <cat-item tags="vblex.iv.neg.indic.p3.sg.foc_bat.*"/>
      <cat-item tags="vblex.iv.neg.indic.p1.du.foc_bat.*"/>
      <cat-item tags="vblex.iv.neg.indic.p2.du.foc_bat.*"/>
      <cat-item tags="vblex.iv.neg.indic.p3.du.foc_bat.*"/>
      <cat-item tags="vblex.iv.neg.indic.p1.pl.foc_bat.*"/>
      <cat-item tags="vblex.iv.neg.indic.p2.pl.foc_bat.*"/>
      <cat-item tags="vblex.iv.neg.indic.p3.pl.foc_bat.*"/>
    </def-cat>
  <def-cat n="connegverb">
      <cat-item tags="vblex.*.*.*.conneg.*"/>
      <cat-item tags="vblex.*.*.conneg.*"/>
    </def-cat>
    <def-cat n="mainverbqst">
      <cat-item tags="vblex.*.qst.@+FMAINV"/>
    </def-cat>
    <def-cat n="noun_nom"> 
      <cat-item tags="n.*.*.nom.*"/>
      <cat-item tags="n.*.*.*.nom.*"/>
    </def-cat>

    <def-cat n="adv_empty">
      <cat-item lemma="" tags="adv"/>
      <cat-item lemma="" tags="adv.*"/>
    </def-cat>
    <def-cat n="adv">
      <cat-item tags="adv"/>
      <cat-item tags="adv.*"/>
      <cat-item tags="adj.der_aadv.adv"/>
      <cat-item tags="adj.der_aadv.adv.*"/>
      <cat-item tags="adj.*.der_aadv.adv"/>
      <cat-item tags="adj.*.der_aadv.adv.*"/>
      <cat-item tags="vblex.*.ger"/>
      <cat-item tags="vblex.*.ger.*"/>
      <cat-item tags="vblex.*.vgen"/>
      <cat-item tags="vblex.*.vgen.*"/>
      <cat-item tags="vblex.*.vabess"/>
      <cat-item tags="vblex.*.vabess.*"/>
    </def-cat>
    <def-cat n="agreement_attr">
      <cat-item lemma="vuosttas" tags="adj.ord.attr.*"/> <!-- put under vuosttaš as lemma in sme -->
      <cat-item lemma="vuosttaš" tags="adj.ord.attr.*"/>
      <cat-item lemma="muhtun" tags="prn.ind.attr.*"/>
    </def-cat>
    <def-cat n="n_sg_gen">
      <cat-item tags="n.*.sg.gen.*"/>
    </def-cat>
    <def-cat n="prn_num">
      <cat-item tags="prn.dem.*"/>
      <cat-item tags="prn.ind.*"/>
      <cat-item tags="num.sg.*"/>
      <cat-item tags="num.arab.sg.*"/>
   </def-cat>

<!-- from sme-nob starts -->

    <def-cat n="prn_ref_PRONl">
      <cat-item tags="prn.ref.*.@Pron←"/>
    </def-cat>
<!-- from sme-nob ends -->

    <def-cat n="agreem_sg_gen">
      <cat-item tags="n.*.sg.gen.*"/>
      <cat-item tags="n.*.sg.ill.*"/>
      <cat-item tags="n.*.sg.loc.*"/>
      <cat-item tags="n.*.sg.abe.*"/>
      <cat-item tags="n.*.ess.*"/>
    </def-cat>
    <def-cat n="agreem_sg">
      <cat-item tags="n.*.sg.nom.*"/>
      <cat-item tags="n.*.sg.acc.*"/>
      <cat-item tags="n.*.sg.com.*"/>
    </def-cat>

    <def-cat n="agreem_pl">
      <cat-item tags="n.*.pl.nom.*"/>
      <cat-item tags="n.*.pl.gen.*"/>
      <cat-item tags="n.*.pl.acc.*"/>
      <cat-item tags="n.*.pl.ill.*"/>
      <cat-item tags="n.*.pl.loc.*"/>
      <cat-item tags="n.*.pl.abe.*"/>
    </def-cat>
    <def-cat n="agreem_pl_gen">
      <cat-item tags="n.*.pl.com.*"/>
    </def-cat>
    <def-cat n="attr">
      <cat-item tags="adj.attr.*"/>
    </def-cat>

  </section-def-cats>

  <section-def-attrs>
    <def-attr n="a_foc">
      <attr-item tags="foc_ba"/>
      <attr-item tags="foc_bahal"/>
      <attr-item tags="foc_bahan"/>
      <attr-item tags="foc_bason"/>
      <attr-item tags="foc_ban"/>
      <attr-item tags="foc_bat"/>
      <attr-item tags="foc_be"/>
      <attr-item tags="foc_behal"/>
      <attr-item tags="foc_behan"/>
      <attr-item tags="foc_beson"/>
      <attr-item tags="foc_neg-ge"/>
      <attr-item tags="foc_pos-ge"/>
      <attr-item tags="foc_gen"/>
      <attr-item tags="foc_ges"/>
      <attr-item tags="foc_gin"/>
      <attr-item tags="foc_gis"/>
      <attr-item tags="foc_hal"/>
      <attr-item tags="foc_han"/>
      <attr-item tags="foc_naj"/>
      <attr-item tags="foc_nii"/>
      <attr-item tags="foc_uv"/>
      <attr-item tags="foc_son"/>
      <attr-item tags="foc_sun"/>
      <attr-item tags="foc_neg-k"/>
    </def-attr>
    <def-attr n="a_exthab">
      <attr-item tags="←ext→"/>
      <attr-item tags="←hab→"/>
    </def-attr>
    <def-attr n="a_spec_sme_tags1">
      <attr-item tags="south"/>
      <attr-item tags="g3"/>
      <attr-item tags="←cs→"/>
       <attr-item tags="allegro"/>
       <attr-item tags="err_orth_nom_gen_mt"/>
       <attr-item tags="err_orth_mt"/>
       <attr-item tags="err_orth_nom_acc_mt"/>
       <attr-item tags="err_orth_a_á_mt"/>
       <attr-item tags="err_orth_a_á"/>
       <attr-item tags="err_orth_nom_acc"/>
       <attr-item tags="err_orth_nom_gen"/>
       <attr-item tags="←logo→"/>
      <attr-item tags="←vdic→"/>
    </def-attr>
    <def-attr n="a_spec_sme_tags2">
      <attr-item tags="south"/>
      <attr-item tags="g3"/>
       <attr-item tags="allegro"/>
       <attr-item tags="err_orth_nom_gen_mt"/>
       <attr-item tags="err_orth_mt"/>
       <attr-item tags="err_orth_nom_acc_mt"/>
       <attr-item tags="err_orth_a_á_mt"/>
       <attr-item tags="err_orth_a_á"/>
       <attr-item tags="err_orth_nom_acc"/>
       <attr-item tags="err_orth_nom_gen"/>
       <attr-item tags="←logo→"/>
    </def-attr>
    <def-attr n="a_num_type">
      <attr-item tags="arab"/>
      <attr-item tags="sem_year"/>
      <attr-item tags="sem_date"/>
    </def-attr>
    <def-attr n="a_npagree_type">
      <attr-item tags="adj.ord"/>
      <attr-item tags="prn.ind"/>
    </def-attr>
    <def-attr n="a_PoS">
      <attr-item tags="adv"/>
      <attr-item tags="prn"/>
      <attr-item tags="vblex"/>
      <attr-item tags="n"/>
      <attr-item tags="adj"/>
      <attr-item tags="post"/>
      <attr-item tags="pr"/>
      <attr-item tags="ij"/>
      <attr-item tags="num"/>
      <attr-item tags="pcle"/>
      <attr-item tags="cnjsub"/>
      <attr-item tags="cnjcoo"/>
    </def-attr>
    <def-attr n="a_mood">
      <attr-item tags="indic"/>
      <attr-item tags="cond"/>
      <attr-item tags="pot"/>
      <attr-item tags="imp"/>
    </def-attr>
    <def-attr n="a_tense">
      <attr-item tags="pret"/>
      <attr-item tags="pres"/>
    </def-attr>
    <def-attr n="a_temps_mood">
      <attr-item tags="indic"/>
      <attr-item tags="indic.pres"/>
      <attr-item tags="indic.pret"/>
    </def-attr>
    <def-attr n="a_nom">
      <attr-item tags="n"/>
      <attr-item tags="np"/>
    </def-attr>
     <def-attr n="a_attr">
      <attr-item tags="attr"/>
    </def-attr>
   <def-attr n="a_case">
      <attr-item tags="nom"/>
      <attr-item tags="acc"/>
      <attr-item tags="ill"/>
      <attr-item tags="par"/>
      <attr-item tags="ess"/>
      <attr-item tags="gen"/>
      <attr-item tags="loc"/>
      <attr-item tags="com"/>
      <attr-item tags="abe"/>
      <attr-item tags="ela"/>
      <attr-item tags="ine"/>
    </def-attr>
    <def-attr n="a_infin">
       <attr-item tags="prfprc"/>
       <attr-item tags="inf"/>
       <attr-item tags="actio.ess"/>
       <attr-item tags="actio.gen"/>
       <attr-item tags="actio.loc"/>
       <attr-item tags="conneg"/>
       <attr-item tags="prfprc"/>
       <attr-item tags="ger"/>
    </def-attr>
    <def-attr n="a_prn_type">
       <attr-item tags="pers"/>
       <attr-item tags="ind"/>
       <attr-item tags="dem"/>
       <attr-item tags="ref"/>
       <attr-item tags="rel"/>
       <attr-item tags="itg"/>
       <attr-item tags="res"/>
    </def-attr>
    <def-attr n="a_nbr">
      <attr-item tags="sg"/>
      <attr-item tags="du"/>
      <attr-item tags="pl"/>
    </def-attr>
    <def-attr n="a_adpos">
      <attr-item tags="pr"/>
      <attr-item tags="post"/>
    </def-attr>
    <def-attr n="a_person">
      <attr-item tags="p1"/>
      <attr-item tags="p2"/>
      <attr-item tags="p3"/>
    </def-attr>
    <def-attr n="a_prn">
      <attr-item tags="prn"/>
      <attr-item tags="prn.rel"/>
      <attr-item tags="prn.res"/>
      <attr-item tags="prn.ind"/>
      <attr-item tags="prn.dem"/>
      <attr-item tags="prn.pers"/>
      <attr-item tags="prn"/>
      <attr-item tags="prn.itg"/>
      <attr-item tags="prn.ref"/>
    </def-attr>
    <def-attr n="a_poss">
      <attr-item tags="px1sg"/>
      <attr-item tags="px2sg"/>
      <attr-item tags="px3sg"/>
      <attr-item tags="px1du"/>
      <attr-item tags="px2du"/>
      <attr-item tags="px3du"/>
      <attr-item tags="px1pl"/>
      <attr-item tags="px2pl"/>
      <attr-item tags="px3pl"/>
    </def-attr>
    <def-attr n="a_trans">
      <attr-item tags="iv"/>
      <attr-item tags="tv"/>
    </def-attr>
    <def-attr n="a_actio">
      <attr-item tags="actio"/>
    </def-attr>
    <def-attr n="a_hab">
      <attr-item tags="←hab→"/>
    </def-attr>
    <def-attr n="a_deriv">
      <attr-item tags="der_dimin"/>
      <attr-item tags="der_aadv"/>
      <attr-item tags="der_caus"/>
      <attr-item tags="der_l"/>
      <attr-item tags="der_ahtti"/>
      <attr-item tags="der_ahtte"/>
      <attr-item tags="der_vuota"/>
      <attr-item tags="der_d"/>
      <attr-item tags="der_h"/>
      <attr-item tags="der_laakan"/>
      <attr-item tags="der_laagasj"/>
      <attr-item tags="der_lágan"/>
      <attr-item tags="der_lágán"/>
      <attr-item tags="der_nammasaš"/>
      <attr-item tags="der_nammasasj"/>
      <attr-item tags="der_saš"/>
      <attr-item tags="der_sasj"/>
      <attr-item tags="der_lasj"/>
      <attr-item tags="der_dibme"/>
      <attr-item tags="der_car"/>
    </def-attr>
    <def-attr n="a_comp-superl">
      <attr-item tags="comp"/>
      <attr-item tags="sup"/>
    </def-attr>
    <def-attr n="a_cmp">
      <attr-item tags="cmp_sggen"/>
      <attr-item tags="cmp_sgnom"/>
      <attr-item tags="cmp_attr"/>
      <attr-item tags="cmp_plgen"/>
      <attr-item tags="cmp_sh"/>
    </def-attr>

    <def-attr n="a_sem">
      <attr-item tags="sem_act_fruit"/>
      <attr-item tags="sem_ani_group_prod-vis"/>
      <attr-item tags="sem_body-abstr_feat-cogn"/>
      <attr-item tags="sem_body_plc-elevate"/>
      <attr-item tags="sem_build-part_cat"/>
      <attr-item tags="sem_build-part_cat_ctain"/>
      <attr-item tags="sem_build-part_cat_ctain_mat"/>
      <attr-item tags="sem_build-part_ctain"/>
      <attr-item tags="sem_build-part_ctain_mat"/>
      <attr-item tags="sem_build-part_ctain_obj"/>
      <attr-item tags="sem_clth-jewl_curr_obj"/>
      <attr-item tags="sem_clth-jewl_curr_obj_org"/>
      <attr-item tags="sem_clth-jewl_fruit"/>
      <attr-item tags="sem_clth_obj-clo"/>
      <attr-item tags="sem_edu_geom"/>
      <attr-item tags="sem_feat-phys_plc"/>
      <attr-item tags="sem_group_prod-vis"/>
      <attr-item tags="sem_hum-prof"/>
      <attr-item tags="sem_hum_mat_tool"/>
      <attr-item tags="sem_hum_tool-it"/>
      <attr-item tags="sem_obj_symbol"/>
      <attr-item tags="sem_act"/>
      <attr-item tags="sem_act_group"/>
      <attr-item tags="sem_act_plc"/>
      <attr-item tags="sem_act_route"/>
      <attr-item tags="sem_adr"/>
      <attr-item tags="sem_amount"/>
      <attr-item tags="sem_amount_build"/>
      <attr-item tags="sem_amount_semcon"/>
      <attr-item tags="sem_ani"/>
      <attr-item tags="sem_ani-fish"/>
      <attr-item tags="sem_ani_body-abstr_hum"/>
      <attr-item tags="sem_ani_build"/>
      <attr-item tags="sem_ani_build-part"/>
      <attr-item tags="sem_ani_build_hum_txt"/>
      <attr-item tags="sem_ani_group"/>
      <attr-item tags="sem_ani_group_hum"/>
      <attr-item tags="sem_ani_hum"/>
      <attr-item tags="sem_ani_hum_plc"/>
      <attr-item tags="sem_ani_hum_time"/>
      <attr-item tags="sem_ani_plc"/>
      <attr-item tags="sem_ani_plc_txt"/>
      <attr-item tags="sem_ani_time"/>
      <attr-item tags="sem_ani_veh"/>
      <attr-item tags="sem_aniprod"/>
      <attr-item tags="sem_aniprod_hum"/>
      <attr-item tags="sem_aniprod_obj-clo"/>
      <attr-item tags="sem_aniprod_perc-phys"/>
      <attr-item tags="sem_aniprod_plc"/>
      <attr-item tags="sem_aniprod_plc_route"/>
      <attr-item tags="sem_body"/>
      <attr-item tags="sem_body-abstr"/>
      <attr-item tags="sem_body-abstr_prod-audio_semcon"/>
      <attr-item tags="sem_body_body-abstr"/>
      <attr-item tags="sem_body_clth"/>
      <attr-item tags="sem_body_food"/>
      <attr-item tags="sem_body_group_hum"/>
      <attr-item tags="sem_body_group_hum_time"/>
      <attr-item tags="sem_body_hum"/>
      <attr-item tags="sem_body_mat"/>
      <attr-item tags="sem_body_measr"/>
      <attr-item tags="sem_body_obj_tool-catch"/>
      <attr-item tags="sem_body_plc"/>
      <attr-item tags="sem_body_time"/>
      <attr-item tags="sem_build"/>
      <attr-item tags="sem_build-part"/>
      <attr-item tags="sem_build-part_plc"/>
      <attr-item tags="sem_build_build-part"/>
      <attr-item tags="sem_build_clth-part"/>
      <attr-item tags="sem_build_edu_org"/>
      <attr-item tags="sem_build_event_org"/>
      <attr-item tags="sem_build_obj"/>
      <attr-item tags="sem_build_org"/>
      <attr-item tags="sem_build_route"/>
      <attr-item tags="sem_cat"/>
      <attr-item tags="sem_cat_group_hum"/>
      <attr-item tags="sem_cat_group_hum_plc"/>
      <attr-item tags="sem_clth"/>
      <attr-item tags="sem_clth-jewl"/>
      <attr-item tags="sem_clth-jewl_curr"/>
      <attr-item tags="sem_clth-jewl_money"/>
      <attr-item tags="sem_clth-jewl_org"/>
      <attr-item tags="sem_clth-jewl_plant"/>
      <attr-item tags="sem_clth-part"/>
      <attr-item tags="sem_clth_hum"/>
      <attr-item tags="sem_ctain"/>
      <attr-item tags="sem_ctain-abstr"/>
      <attr-item tags="sem_ctain-abstr_org"/>
      <attr-item tags="sem_ctain-clth"/>
      <attr-item tags="sem_ctain-clth_plant"/>
      <attr-item tags="sem_ctain-clth_veh"/>
      <attr-item tags="sem_ctain_feat-phys"/>
      <attr-item tags="sem_ctain_furn"/>
      <attr-item tags="sem_ctain_plc"/>
      <attr-item tags="sem_ctain_tool"/>
      <attr-item tags="sem_ctain_tool-measr"/>
      <attr-item tags="sem_curr"/>
      <attr-item tags="sem_curr_org"/>
      <attr-item tags="sem_dance"/>
      <attr-item tags="sem_dance_org"/>
      <attr-item tags="sem_dance_prod-audio"/>
      <attr-item tags="sem_date"/>
      <attr-item tags="sem_dir"/>
      <attr-item tags="sem_domain"/>
      <attr-item tags="sem_domain_food-med"/>
      <attr-item tags="sem_domain_hum"/>
      <attr-item tags="sem_domain_prod-audio"/>
      <attr-item tags="sem_drink"/>
      <attr-item tags="sem_drink_plant"/>
      <attr-item tags="sem_dummytag"/>
      <attr-item tags="sem_edu"/>
      <attr-item tags="sem_edu_event"/>
      <attr-item tags="sem_edu_group_hum"/>
      <attr-item tags="sem_edu_hum"/>
      <attr-item tags="sem_edu_mat"/>
      <attr-item tags="sem_edu_org"/>
      <attr-item tags="sem_event"/>
      <attr-item tags="sem_event_food"/>
      <attr-item tags="sem_event_hum"/>
      <attr-item tags="sem_event_plc"/>
      <attr-item tags="sem_event_plc-elevate"/>
      <attr-item tags="sem_event_time"/>
      <attr-item tags="sem_feat"/>
      <attr-item tags="sem_feat-measr"/>
      <attr-item tags="sem_feat-measr_plc"/>
      <attr-item tags="sem_feat-phys"/>
      <attr-item tags="sem_feat-phys_tool-write"/>
      <attr-item tags="sem_feat-phys_veh"/>
      <attr-item tags="sem_feat-phys_wthr"/>
      <attr-item tags="sem_feat-psych"/>
      <attr-item tags="sem_feat-psych_hum"/>
      <attr-item tags="sem_feat_plant"/>
      <attr-item tags="sem_fem"/>
      <attr-item tags="sem_food"/>
      <attr-item tags="sem_food-med"/>
      <attr-item tags="sem_food_perc-phys"/>
      <attr-item tags="sem_food_plant"/>
      <attr-item tags="sem_fruit"/>
      <attr-item tags="sem_fruit_hum"/>
      <attr-item tags="sem_furn"/>
      <attr-item tags="sem_game"/>
      <attr-item tags="sem_game_obj-play"/>
      <attr-item tags="sem_geom"/>
      <attr-item tags="sem_geom_obj"/>
      <attr-item tags="sem_group"/>
      <attr-item tags="sem_group_hum"/>
      <attr-item tags="sem_group_hum_org"/>
      <attr-item tags="sem_group_hum_plc"/>
      <attr-item tags="sem_group_hum_prod-vis"/>
      <attr-item tags="sem_group_org"/>
      <attr-item tags="sem_group_sign"/>
      <attr-item tags="sem_group_txt"/>
      <attr-item tags="sem_hum"/>
      <attr-item tags="sem_hum-abstr"/>
      <attr-item tags="sem_hum_lang"/>
      <attr-item tags="sem_hum_lang_plc"/>
      <attr-item tags="sem_hum_lang_time"/>
      <attr-item tags="sem_hum_obj"/>
      <attr-item tags="sem_hum_org"/>
      <attr-item tags="sem_hum_plant"/>
      <attr-item tags="sem_hum_plc"/>
      <attr-item tags="sem_hum_tool"/>
      <attr-item tags="sem_hum_veh"/>
      <attr-item tags="sem_hum_wthr"/>
      <attr-item tags="sem_ideol"/>
      <attr-item tags="sem_lang"/>
      <attr-item tags="sem_lang_tool"/>
      <attr-item tags="sem_mal"/>
      <attr-item tags="sem_mat"/>
      <attr-item tags="sem_mat_plant"/>
      <attr-item tags="sem_mat_txt"/>
      <attr-item tags="sem_measr"/>
      <attr-item tags="sem_measr_sign"/>
      <attr-item tags="sem_measr_time"/>
      <attr-item tags="sem_money"/>
      <attr-item tags="sem_money_obj"/>
      <attr-item tags="sem_money_txt"/>
      <attr-item tags="sem_obj"/>
      <attr-item tags="sem_obj-clo"/>
      <attr-item tags="sem_obj-cogn"/>
      <attr-item tags="sem_obj-el"/>
      <attr-item tags="sem_obj-ling"/>
      <attr-item tags="sem_obj-play"/>
      <attr-item tags="sem_obj-play_sport"/>
      <attr-item tags="sem_obj-rope"/>
      <attr-item tags="sem_obj-surfc"/>
      <attr-item tags="sem_obj_semcon"/>
      <attr-item tags="sem_obj_state"/>
      <attr-item tags="sem_org"/>
      <attr-item tags="sem_org_prod-cogn"/>
      <attr-item tags="sem_org_rule"/>
      <attr-item tags="sem_org_txt"/>
      <attr-item tags="sem_org_veh"/>
      <attr-item tags="sem_part"/>
      <attr-item tags="sem_part_prod-cogn"/>
      <attr-item tags="sem_part_substnc"/>
      <attr-item tags="sem_perc-cogn"/>
      <attr-item tags="sem_perc-emo"/>
      <attr-item tags="sem_perc-emo_wthr"/>
      <attr-item tags="sem_perc-phys"/>
      <attr-item tags="sem_perc-psych"/>
      <attr-item tags="sem_phonenr"/>
      <attr-item tags="sem_plant"/>
      <attr-item tags="sem_plant-part"/>
      <attr-item tags="sem_plant_plant-part"/>
      <attr-item tags="sem_plant_tool"/>
      <attr-item tags="sem_plant_tool-measr"/>
      <attr-item tags="sem_plc"/>
      <attr-item tags="sem_plc-abstr"/>
      <attr-item tags="sem_plc-abstr_rel_state"/>
      <attr-item tags="sem_plc-abstr_route"/>
      <attr-item tags="sem_plc-elevate"/>
      <attr-item tags="sem_plc-line"/>
      <attr-item tags="sem_plc-water"/>
      <attr-item tags="sem_plc_pos"/>
      <attr-item tags="sem_plc_route"/>
      <attr-item tags="sem_plc_state"/>
      <attr-item tags="sem_plc_substnc"/>
      <attr-item tags="sem_plc_substnc_wthr"/>
      <attr-item tags="sem_plc_time"/>
      <attr-item tags="sem_plc_time_wthr"/>
      <attr-item tags="sem_plc_tool-catch"/>
      <attr-item tags="sem_plc_wthr"/>
      <attr-item tags="sem_pos"/>
      <attr-item tags="sem_process"/>
      <attr-item tags="sem_prod"/>
      <attr-item tags="sem_prod-audio"/>
      <attr-item tags="sem_prod-audio_txt"/>
      <attr-item tags="sem_prod-cogn"/>
      <attr-item tags="sem_prod-cogn_txt"/>
      <attr-item tags="sem_prod-ling"/>
      <attr-item tags="sem_prod-vis"/>
      <attr-item tags="sem_rel"/>
      <attr-item tags="sem_route"/>
      <attr-item tags="sem_rule"/>
      <attr-item tags="sem_semcon"/>
      <attr-item tags="sem_semcon_txt"/>
      <attr-item tags="sem_sign"/>
      <attr-item tags="sem_sport"/>
      <attr-item tags="sem_state"/>
      <attr-item tags="sem_state-sick"/>
      <attr-item tags="sem_state-sick_substnc"/>
      <attr-item tags="sem_substnc"/>
      <attr-item tags="sem_substnc_wthr"/>
      <attr-item tags="sem_sur"/>
      <attr-item tags="sem_symbol"/>
      <attr-item tags="sem_time"/>
      <attr-item tags="sem_time_wthr"/>
      <attr-item tags="sem_tool"/>
      <attr-item tags="sem_tool-catch"/>
      <attr-item tags="sem_tool-clean"/>
      <attr-item tags="sem_tool-it"/>
      <attr-item tags="sem_tool-measr"/>
      <attr-item tags="sem_tool-music"/>
      <attr-item tags="sem_tool-write"/>
      <attr-item tags="sem_txt"/>
      <attr-item tags="sem_veh"/>
      <attr-item tags="sem_wpn"/>
      <attr-item tags="sem_wthr"/>
      <attr-item tags="sem_year"/>
      <attr-item tags="top"/>
      <attr-item tags="cog"/>
      <attr-item tags="ant"/>
    </def-attr>
    <def-attr n="sem_year">
      <attr-item tags="sem_year"/>
      <attr-item tags="sem_date"/>
    </def-attr>

    <def-attr n="a_func">
       <attr-item tags="@\+FAUXV"/>
       <attr-item tags="@\+FMAINV"/>
       <attr-item tags="@-F←ADVL"/>
       <attr-item tags="@-F←ADVL-ine"/>
       <attr-item tags="@-F←ADVL-ela"/>
       <attr-item tags="@-F←OBJ"/>
       <attr-item tags="@-F←OPRED"/>
       <attr-item tags="@-F←SUBJ"/>
       <attr-item tags="@-FADVL→"/>
       <attr-item tags="@-FAUXV"/>
       <attr-item tags="@-FMAINV"/>
       <attr-item tags="@-FOBJ→"/>
       <attr-item tags="@-FSUBJ→"/>
       <attr-item tags="@←ADVL"/>
       <attr-item tags="@←ADVL-ela"/>
       <attr-item tags="@←ADVL-ine"/>
       <attr-item tags="@←OBJ"/>
       <attr-item tags="@←OPRED"/>
       <attr-item tags="@←PPRED"/>
       <attr-item tags="@←SPRED"/>
       <attr-item tags="@←SUBJ"/>
       <attr-item tags="@→A"/>
       <attr-item tags="@→ADVL"/>
       <attr-item tags="@→CC"/>
       <attr-item tags="@→N"/>
       <attr-item tags="@→Num"/>
       <attr-item tags="@→P"/>
       <attr-item tags="@→Pron"/>
       <attr-item tags="@A←"/>
       <attr-item tags="@ADVL"/>
       <attr-item tags="@ADVL←"/>
       <attr-item tags="@ADVL→"/>
       <attr-item tags="@ADVL-ela→"/>
       <attr-item tags="@ADVL-ine→"/>
       <attr-item tags="@ADVLcs-ela→"/>
       <attr-item tags="@ADVLcs-ine→"/>
       <attr-item tags="@ADVLqst-ela→"/>
       <attr-item tags="@ADVLqst-ine→"/>
       <attr-item tags="@ADVLhab→"/>
       <attr-item tags="@←ADVLhab"/>
       <attr-item tags="@←SUBJext"/>
       <attr-item tags="@ADVL→CS"/>
       <attr-item tags="@APP-ADVL←"/>
       <attr-item tags="@APP-N←"/>
       <attr-item tags="@APP-Pron←"/>
       <attr-item tags="@CNP"/>
       <attr-item tags="@COMP-CS←"/>
       <attr-item tags="@CVP"/>
       <attr-item tags="@HNOUN"/>
       <attr-item tags="@INTERJ"/>
       <attr-item tags="@N←"/>
       <attr-item tags="@Num←"/>
       <attr-item tags="@OBJ→"/>
       <attr-item tags="@OPRED→"/>
       <attr-item tags="@P←"/>
       <attr-item tags="@PCLE"/>
       <attr-item tags="@Pron←"/>
       <attr-item tags="@SPRED←OBJ"/>
       <attr-item tags="@SPRED→"/>
       <attr-item tags="@SUBJ→"/>
       <attr-item tags="@VOC"/>
       <attr-item tags="@X"/>
    </def-attr>
    <def-attr n="a_subqst">
      <attr-item tags="subqst"/>
    </def-attr>
    <def-attr n="a_qst">
       <attr-item tags="qst"/>
       <attr-item tags="foc_bat"/>
    </def-attr>

    <def-attr n="x_func">
      <attr-item tags="←ext→"/>
      <attr-item tags="←hab→"/>
      <attr-item tags="←vdic→"/>
    </def-attr>

    <def-attr n="a_foc-ge">
      <attr-item tags="foc_neg-ge"/>
      <attr-item tags="foc_pos-ge"/>
    </def-attr>
  </section-def-attrs>

  <section-def-vars>
    <def-var n="func"/>  
    <def-var n="number"/>
    <def-var n="current_verb"/>
    <def-var n="adpos_chunk_name"/>
    <def-var n="chunk_name"/>
    <def-var n="caseFirstword"/>  
    <def-var n="ext"/>
    <def-var n="vdic"/>  
    <def-var n="case"/>
    <def-var n="infin"/>
    <def-var n="lemma"/>
    <def-var n="qst"/>
    <def-var n="vblex_nbrpers"/>
  </section-def-vars>

  <section-def-lists>
    <def-list n="loc_verbs">
      <list-item v="hállat"/>
      <list-item v="hupmat"/>
      <list-item v="muitalit"/>
    </def-list>
    <def-list n="birrapx_verbs">
      <list-item v="geahččat"/>
    </def-list>
    <def-list n="actio_ill_verbs">
      <list-item v="liikot"/>
    </def-list>
    <def-list n="der_caus2der_d">
      <list-item v="einnostit"/>
    </def-list>
  <def-list n="verbs_stative" c="sme place-verbs, hope they work the same in smj">
    <list-item v="ássat"/>
    <list-item v="leat"/>
    <list-item v="orrut"/>
    <list-item v="veallát"/>
    <list-item v="čuožžut"/>
    <list-item v="čohkkát"/>
    <list-item v="čohkahit"/>
    <list-item v="buolvvastallat"/>
    <list-item v="buolvvastit"/>
    <list-item v="čippostallat"/>
    <list-item v="čuččodit"/>
    <list-item v="morihit"/>
    <list-item v="gohččát"/>
    <list-item v="gullát"/>
    <list-item v="morránit"/>
    <list-item v="orodit"/>
    <list-item v="stuorrut"/>
    <list-item v="veallahit"/>
    <list-item v="eallit"/>
  </def-list>
  <def-list n="foclemmas">
    <list-item v="okta"/>
  </def-list>


  </section-def-lists>
  <section-def-macros>

    <def-macro n="set_caseFirstword" npar="1"
               c="Set the typographic case to be carried by the chunk.
                  - if argument is _not_ a proper noun: caseFirstword is the case of the lemma, and the lemma gets lowercase.
                  - if argument _is_ a proper noun: caseFirstword is lowercase, and lemma stays unchanged.

                  We treat UPPERCASE as proper nouns.">
      <let><var n="caseFirstword"/><lit v="aa"/></let>
      <choose><when>
        <test><not><or>
          <begins-with><clip pos="1" side="tl" part="a_nom"/><lit-tag v="np"/></begins-with>
          <!-- <equal><clip pos="1" side="tl" part="lettercase"/><lit-tag v="fixedcase"/></equal> -->
          <equal><get-case-from pos="1"><lit v="aa"/></get-case-from><lit v="AA"/></equal>
        </or></not></test>
        <let><var n="caseFirstword"/><get-case-from pos="1"><lit v="aa"/></get-case-from></let>
        <modify-case><clip pos="1" side="tl" part="lemh"/><lit v="aa"/></modify-case>
      </when></choose>
    </def-macro>

    <def-macro n="agreement-adj-sg-2Param" npar="2"
               c="param1: adj
                  param2: noun">
      <let>
        <clip pos="2" side="tl" part="tags"/><concat>
        <lit-tag v="n.sg"/><clip pos="1" side="tl" part="a_case"/> </concat>
      </let>
      <let>
        <clip pos="1" side="tl" part="tags"/><concat>
        <clip pos="1" side="tl" part="a_npagree_type"/><clip pos="2" side="tl" part="a_nbr"/><clip pos="2" side="tl" part="a_case"/> </concat>
      </let>
    </def-macro>

    <def-macro n="agreement-adj-2Param" npar="2">
      <let>
        <clip pos="2" side="tl" part="tags"/><concat>
        <lit-tag v="n.pl"/><clip pos="1" side="tl" part="a_case"/> </concat>
      </let>
      <let>
        <clip pos="1" side="tl" part="tags"/><concat>
        <clip pos="1" side="tl" part="a_npagree_type"/><clip pos="2" side="tl" part="a_nbr"/><clip pos="2" side="tl" part="a_case"/> </concat>
      </let>
    </def-macro>

    <def-macro n="agreement-ind-pl-2Param" npar="2">
      <let>
        <clip pos="2" side="tl" part="tags"/><concat>
        <lit-tag v="n.pl"/><clip pos="2" side="tl" part="a_case"/> </concat>
      </let>
      <let>
        <clip pos="1" side="tl" part="tags"/><concat>
        <lit-tag v="prn.ind.pl"/><clip pos="2" side="tl" part="a_case"/> </concat>
      </let>
    </def-macro>

    <def-macro n="convert-deriv-1Param" npar="1">
      <choose>

        <when>
          <test>
            <in><clip pos="1" side="sl" part="lem"/><list n="der_caus2der_d"/></in></test>
          <let><clip pos="1" side="tl" part="a_deriv"/><lit-tag v="der_d"/></let>
        </when>
        <when>
          <test>
            <equal><clip pos="1" side="sl" part="a_deriv"/><lit-tag v="der_h"/></equal>
          </test>
          <let><clip pos="1" side="tl" part="a_deriv"/><lit-tag v="der_d"/></let>
        </when>

        <when>
          <test>
            <equal><clip pos="1" side="sl" part="a_deriv"/><lit-tag v="der_laakan"/></equal>
          </test>
          <let><clip pos="1" side="tl" part="a_deriv"/><lit-tag v="der_lágán"/></let>
        </when>
        <when>
          <test>
            <equal><clip pos="1" side="sl" part="a_deriv"/><lit-tag v="der_ahtti"/></equal>
          </test>
          <let><clip pos="1" side="tl" part="a_deriv"/><lit-tag v="der_caus"/></let>
        </when>
        <when>
          <test>
            <equal><clip pos="1" side="sl" part="a_deriv"/><lit-tag v="der_car"/></equal>
          </test>
          <let><clip pos="1" side="tl" part="a_deriv"/><lit-tag v="der_dibme"/></let>
        </when>
        <when>
          <test>
               <equal><clip pos="1" side="sl" part="a_deriv"/><lit-tag v="der_vuota"/></equal>
          </test>
          <let><clip pos="1" side="tl" part="a_attr"/><lit v=""/></let>
        </when>
      </choose>
    </def-macro>

    <def-macro n="inherenttag-px-2Param" npar="2">
      <choose>
        <when>
          <test><equal><clip pos="1" side="tl" part="a_person"/><lit-tag v="p1"/></equal></test>
          <let>
            <clip pos="2" side="tl" part="tags"/><concat><clip pos="2" side="tl" part="tags"/><lit-tag v="px1sg"/></concat>
          </let>
        </when>
        <when>
          <test><equal><clip pos="1" side="tl" part="a_person"/><lit-tag v="p2"/></equal></test>
          <let>
            <clip pos="2" side="tl" part="tags"/><concat><clip pos="2" side="tl" part="tags"/><lit-tag v="px2sg"/></concat>
          </let>
        </when>
        <when>
          <test><equal><clip pos="1" side="tl" part="a_person"/><lit-tag v="p3"/></equal></test>
          <let><clip pos="2" side="tl" part="tags"/><concat><clip pos="2" side="tl" part="tags"/><lit-tag v="px3sg"/></concat>
          </let>
        </when>
        <when>
          <test><equal><clip pos="1" side="tl" part="a_person"/><lit-tag v="p1"/></equal></test>
          <let>
            <clip pos="2" side="tl" part="tags"/><concat><clip pos="2" side="tl" part="tags"/><lit-tag v="px1du"/></concat>
          </let>
        </when>
        <when>
          <test><equal><clip pos="1" side="tl" part="a_person"/><lit-tag v="p2"/></equal></test>
          <let>
            <clip pos="2" side="tl" part="tags"/><concat><clip pos="2" side="tl" part="tags"/><lit-tag v="px2du"/></concat>
          </let>
        </when>
        <when>
          <test><equal><clip pos="1" side="tl" part="a_person"/><lit-tag v="p3"/></equal></test>
          <let><clip pos="2" side="tl" part="tags"/><concat><clip pos="2" side="tl" part="tags"/><lit-tag v="px3du"/></concat>
          </let>
        </when>
        <when>
          <test><equal><clip pos="1" side="tl" part="a_person"/><lit-tag v="p1"/></equal></test>
          <let>
            <clip pos="2" side="tl" part="tags"/><concat><clip pos="2" side="tl" part="tags"/><lit-tag v="px1pl"/></concat>
          </let>
        </when>
        <when>
          <test><equal><clip pos="1" side="tl" part="a_person"/><lit-tag v="p2"/></equal></test>
          <let>
            <clip pos="2" side="tl" part="tags"/><concat><clip pos="2" side="tl" part="tags"/><lit-tag v="px2pl"/></concat>
          </let>
        </when>
        <when>
          <test><equal><clip pos="1" side="tl" part="a_person"/><lit-tag v="p3"/></equal></test>
          <let><clip pos="2" side="tl" part="tags"/><concat><clip pos="2" side="tl" part="tags"/><lit-tag v="px3pl"/></concat>
          </let>
        </when>
      </choose>
    </def-macro>

    <def-macro n="assign-case-1Param" npar="1">
      <choose>
<!--        <when>
          <test>
            <or>
              <and>
                <equal><clip pos="1" side="sl" part="a_case"/><lit-tag v="loc"/></equal>
                <equal><clip pos="1" side="sl" part="a_hab"/><lit-tag v="←hab→"/></equal>
              </and>
              <and>
                <equal><clip pos="1" side="sl" part="a_case"/><lit-tag v="loc"/></equal>
                <in caseless="yes"><var n="current_verb"/><list n="verbs_stative"/></in>
              </and>
            </or>
          </test>
          <let><clip pos="1" side="tl" part="a_case"/><lit-tag v="ine"/></let>
        </when> -->
        
        <when>
          <test>
            <or>
              <and>
                <equal><clip pos="1" side="sl" part="a_case"/><lit-tag v="loc"/></equal>
                <or>
                <equal><clip pos="1" side="sl" part="a_func"/><lit-tag v="@←ADVL-ela"/></equal>
                <equal><clip pos="1" side="sl" part="a_func"/><lit-tag v="@ADVL-ela→"/></equal>
                <equal><clip pos="1" side="sl" part="a_func"/><lit-tag v="@-F←ADVL-ela"/></equal>
                </or>
              </and>
              <and>
                <equal><clip pos="1" side="sl" part="a_case"/><lit-tag v="loc"/></equal>
                <equal><clip pos="1" side="sl" part="a_func"/><lit-tag v="@Num←"/></equal>
              </and>
    <!--          <and>
                <equal><clip pos="1" side="sl" part="a_sem"/><lit-tag v="sem_txt"/></equal>
                <equal><clip pos="1" side="sl" part="a_case"/><lit-tag v="loc"/></equal>
                <equal><clip pos="1" side="sl" part="a_func"/><lit-tag v="@N←"/></equal>
              </and>  -->
            </or>
          </test>
          <let><clip pos="1" side="tl" part="a_case"/><lit-tag v="ela"/></let>
         </when>
         
         <when>
          <test>
          <and>
            <equal><clip pos="1" side="sl" part="a_case"/><lit-tag v="loc"/></equal>
            <not><equal><clip pos="1" side="sl" part="a_func"/><lit-tag v="@←ADVL-ela"/></equal></not>
            <not><equal><clip pos="1" side="sl" part="a_func"/><lit-tag v="@ADVL-ela→"/></equal></not>
            <not><equal><clip pos="1" side="sl" part="a_func"/><lit-tag v="@-F←ADVL-ela"/></equal></not>
          </and>
          </test>
          <let><clip pos="1" side="tl" part="a_case"/><lit-tag v="ine"/></let>
         </when>

      </choose>
    </def-macro>

    <def-macro n="foc-1Param" npar="1">
      <choose>
        <when>
          <test><equal><clip pos="1" side="sl" part="a_foc"/><lit-tag v="foc_pos-ge"/></equal></test>
          <let><clip pos="1" side="tl" part="a_foc"/><lit-tag v="foc_pos-k"/></let>
        </when>
        <when>
          <test><equal><clip pos="1" side="sl" part="a_foc"/><lit-tag v="foc_neg-ge"/></equal></test>
          <let><clip pos="1" side="tl" part="a_foc"/><lit-tag v="foc_neg-k"/></let>
        </when>
      </choose>
    </def-macro>

    <def-macro n="general-macro-1Param" npar="1" c="Use for all chunks of one pattern-item">

      <call-macro n="set_caseFirstword"><with-param pos="1"/></call-macro>
      <call-macro n="foc-1Param"><with-param pos="1"/></call-macro> 
      <call-macro n="convert-deriv-1Param"><with-param pos="1"/></call-macro>

      <choose>
        <when c="M[V] verb_nbrpers">
          <test>
            <or>
              <equal><clip pos="1" side="sl" part="a_func"/><lit-tag v="@+FAUXV"/></equal>
              <equal><clip pos="1" side="sl" part="a_func"/><lit-tag v="@+FMAINV"/></equal>
            </or>
          </test>
          <let><var n="vblex_nbrpers"/><concat><clip pos="1" side="tl" part="a_person"/>
                 <clip pos="1" side="tl" part="a_nbr"/></concat></let>
        </when>
        <when c="M[V] infin">
          <test>
            <or>
              <equal><clip pos="1" side="sl" part="a_func"/><lit-tag v="@-FAUXV"/></equal>
              <equal><clip pos="1" side="sl" part="a_func"/><lit-tag v="@-FMAINV"/></equal>
            </or>
          </test>
          <let><var n="infin"/><clip pos="1" side="tl" part="a_infin"/></let>
        </when>
      </choose>

      <choose>
        <when c="M[T] remove tense when cond">
          <test><equal><clip pos="1" side="tl" part="a_mood"/><lit-tag v="cond"/></equal></test>
          <let><clip pos="1" side="tl" part="a_tense"/><lit v=""/></let>
        </when>
        <when c="M[T] remove tense when pot">
          <test><equal><clip pos="1" side="tl" part="a_mood"/><lit-tag v="pot"/></equal></test>
          <let><clip pos="1" side="tl" part="a_tense"/><lit v=""/></let>
        </when>
      </choose>

      <choose>
        <when c="M[T] change gen to acc when sem_route">
          <test><and>
            <equal><clip pos="1" side="sl" part="a_sem"/><lit-tag v="sem_route"/></equal>
            <equal><clip pos="1" side="sl" part="a_case"/><lit-tag v="gen"/></equal>
          </and></test>
          <let><clip pos="1" side="tl" part="a_case"/><lit-tag v="acc"/></let>
        </when>
      </choose>

      <choose>
        <when c="M[V] ext">
          <test>
            <equal><clip pos="1" side="sl" part="a_exthab"/><lit-tag v="←ext→"/></equal>
          </test>
          <let><var n="ext"/><clip pos="1" side="sl" part="a_exthab"/></let>
        </when>
        <when c="M[V] empty ext">
          <test>
            <not><equal><clip pos="1" side="sl" part="a_exthab"/><lit-tag v="←ext→"/></equal></not>
          </test>
          <let><var n="ext"/><lit v=""/></let>
        </when>
      </choose>

      <choose>
        <when c="M[V] vdic">
          <test>
            <equal><clip pos="1" side="sl" part="x_func"/><lit-tag v="←vdic→"/></equal>
          </test>
          <let><var n="vdic"/><clip pos="1" side="sl" part="x_func"/></let>
        </when>
        <when c="M[V] empty vdic">
          <test>
            <not><equal><clip pos="1" side="sl" part="x_func"/><lit-tag v="←vdic→"/></equal></not>
          </test>
          <let><var n="vdic"/><lit v=""/></let>
        </when>
      </choose>

      <choose>
        <when c="M[V] func">
          <test><not><equal><clip pos="1" side="tl" part="a_func"/><lit v=""/></equal></not></test>
          <let><var n="func"/><clip pos="1" side="sl" part="a_func"/></let>
        </when>
      </choose>

      <choose>
        <when c="M[T] add sg to prn.ref when not nom">
          <test><and>
                  <equal><clip pos="1" side="sl" part="a_prn"/><lit-tag v="prn.ref"/></equal>
                  <not><equal><clip pos="1" side="sl" part="a_case"/><lit-tag v="nom"/></equal></not>
                </and></test>
          <let><clip pos="1" side="tl" part="tags"/><concat><clip pos="1" side="tl" part="a_prn"/><lit-tag v="sg"/>
               <clip pos="1" side="tl" part="a_case"/><clip pos="1" side="tl" part="a_poss"/></concat>
          </let>
        </when>
      </choose> 

      <choose>
        <when c="M[T] remove extra tags from adv">
            <test><equal><clip pos="1" side="tl" part="a_PoS"/><lit-tag v="adv"/></equal></test>
            <let><clip pos="1" side="tl" part="a_case"/><lit v=""/></let>
            <let><clip pos="1" side="tl" part="a_nbr"/><lit v=""/></let>
            <let><clip pos="1" side="tl" part="a_attr"/><lit v=""/></let>
            <let><clip pos="1" side="tl" part="a_comp-superl"/><lit v=""/></let>
            <let><clip pos="1" side="tl" part="a_subqst"/><lit v=""/></let>
        </when>
        <when c="M[T] remove foc from prn">
           <test><and>
             <not><equal><clip pos="1" side="tl" part="a_PoS"/><lit-tag v="prn"/></equal></not>
             <not><in><clip pos="1" side="tl" part="lem"/><list n="foclemmas"/></in></not>
             </and></test>
           <let><clip pos="1" side="tl" part="a_foc"/><lit v=""/></let>
        </when>
      </choose>
      <choose>
        <when c="M[T] add attr to buorre">
     <test><and>
     <equal><clip pos="1" side="sl" part="lem"/><lit v="buorre"/></equal>
     <equal><clip pos="1" side="sl" part="a_func"/><lit-tag v="@→N"/></equal>
     </and></test>
        <let><clip pos="1" side="tl" part="a_nbr"/><lit v=""/></let>
        <let><clip pos="1" side="tl" part="a_case"/><lit-tag v="attr"/></let>
        </when>
      </choose>
      <call-macro n="convert-deriv-1Param"><with-param pos="1"/></call-macro>

      <let><clip pos="1" side="tl" part="a_trans"/><lit v=""/></let>
      <let><clip pos="1" side="tl" part="a_spec_sme_tags1"/><lit v=""/></let>
      <let><clip pos="1" side="tl" part="a_spec_sme_tags2"/><lit v=""/></let>
      <let><clip pos="1" side="tl" part="a_sem"/><lit v=""/></let>
      <let><clip pos="1" side="tl" part="a_exthab"/><lit v=""/></let>
      <let><clip pos="1" side="tl" part="a_func"/><lit v=""/></let>
    </def-macro>


    <def-macro n="general-macro-2Param" npar="2" c="Use for all chunks of two pattern-items
                                                    param1: first pattern-item; used to set caseFirstword
                                                    param2: second pattern-item; used to set func variable">
      <call-macro n="general-macro-1Param"><with-param pos="2"/></call-macro>
      <call-macro n="general-macro-1Param"><with-param pos="1"/></call-macro>
      <call-macro n="set_caseFirstword"><with-param pos="1"/></call-macro> 
      <choose><when>
        <test><and>
          <equal><clip pos="1" side="sl" part="a_func"/><lit-tag v="@-FMAINV"/></equal>
          <equal><clip pos="2" side="sl" part="a_func"/><lit-tag v="@+FAUXV"/></equal>
        </and></test>
        <let><var n="func"/><lit-tag v="@+FMAINV"/></let>
      </when>
            <otherwise>
       <let><var n="func"/><clip pos="2" side="sl" part="a_func"/></let>
            </otherwise>
       </choose>
    </def-macro>
    <def-macro n="general-macro-2Param-headfirst" npar="2" c="Use for all chunks of two pattern-items where the head is first
                                                              param1: first pattern-item; used to set caseFirstword and func variable">
      <call-macro n="general-macro-1Param"><with-param pos="1"/></call-macro>
      <call-macro n="general-macro-1Param"><with-param pos="2"/></call-macro>
      <call-macro n="set_caseFirstword"><with-param pos="1"/></call-macro>
      <choose><when>
        <test><and>
          <equal><clip pos="1" side="sl" part="a_func"/><lit-tag v="@-FMAINV"/></equal>
          <equal><clip pos="2" side="sl" part="a_func"/><lit-tag v="@+FAUXV"/></equal>
        </and></test>
        <let><var n="func"/><lit-tag v="@+FMAINV"/></let>
      </when></choose>
    </def-macro>

    <def-macro n="general-macro-3Param" npar="3" c="Use for all chunks of three pattern-items
                                                    param1: first pattern-item; used to set caseFirstword
                                                    param2: second pattern-item
                                                    param3: third pattern-item; used to set func variable">
      <call-macro n="general-macro-2Param"><with-param pos="1"/><with-param pos="2"/></call-macro>
      <call-macro n="general-macro-1Param"><with-param pos="3"/></call-macro>
      <call-macro n="set_caseFirstword"><with-param pos="1"/></call-macro>
      <choose><when>
        <test><and>
          <equal><clip pos="2" side="sl" part="a_func"/><lit-tag v="@-FMAINV"/></equal>
          <equal><clip pos="3" side="sl" part="a_func"/><lit-tag v="@+FAUXV"/></equal>
        </and></test>
        <let><var n="func"/><lit-tag v="@+FMAINV"/></let>
      </when></choose>
    </def-macro>

    <def-macro n="general-macro-4Param" npar="4" c="Use for all chunks of four pattern-items
                                                    param1: first pattern-item; used to set caseFirstword
                                                    param2: second pattern-item
                                                    param3: third pattern-item
                                                    param4: fourth pattern-item; used to set func variable">
      <call-macro n="general-macro-3Param"><with-param pos="1"/><with-param pos="2"/><with-param pos="3"/></call-macro>
      <call-macro n="general-macro-1Param"><with-param pos="4"/></call-macro>
      <call-macro n="set_caseFirstword"><with-param pos="1"/></call-macro>
    </def-macro>

  </section-def-macros>


  <section-rules>
    <rule comment="C[D]-PRED váldit_particle váldit_vblex" c="Ferte dohkálaččat vuhtii váldit máná kulturduogáža : Viertti dågålattjat vieledit máná kultuvrraduogátjav">
      <pattern>
        <pattern-item n="váldit_particle"/>
        <pattern-item n="váldit_vblex"/>
      </pattern>
      <action>
        <call-macro n="general-macro-2Param"><with-param pos="1"/><with-param pos="2"/></call-macro>
       <choose>
         <when><test><equal><clip pos="2" side="sl" part="a_infin"/><lit-tag v="inf"/></equal></test>
                      <let><var n="chunk_name"/><lit v="inf"/></let>
              </when>
         <when><test><equal><clip pos="2" side="sl" part="a_infin"/><lit-tag v="prfprc"/></equal></test>
                      <let><var n="chunk_name"/><lit v="prfprc"/></let>
              </when>

       <otherwise>
                      <let><var n="chunk_name"/><lit v="vblex"/></let>
       </otherwise>
       </choose>
         <out>
          <chunk namefrom="chunk_name" case="caseFirstword">
            <tags>
              <tag><lit-tag v="SV"/></tag>
              <tag><var n="func"/></tag>
            </tags>
            <lu>
              <clip pos="2" side="tl" part="whole"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule> 
 
     <rule comment="C[D]-PRED váldit_vblex váldit_particle" c="mánát váldojuvvojit mielde sierralágan bargoproseassaide : máná sebrudahteduvvi sierralágásj barggoprosessajda">
      <pattern>
        <pattern-item n="váldit_vblex"/>
        <pattern-item n="váldit_particle"/>
      </pattern>
      <action>
        <call-macro n="general-macro-2Param"><with-param pos="2"/><with-param pos="1"/></call-macro>
       <choose>
         <when><test><equal><clip pos="1" side="sl" part="a_infin"/><lit-tag v="inf"/></equal></test>
                      <let><var n="chunk_name"/><lit v="inf"/></let>
              </when>
         <when><test><equal><clip pos="1" side="sl" part="a_infin"/><lit-tag v="prfprc"/></equal></test>
                      <let><var n="chunk_name"/><lit v="prfprc"/></let>
              </when>

       <otherwise>
                      <let><var n="chunk_name"/><lit v="vblex"/></let>
       </otherwise>
       </choose>
         <out>
          <chunk namefrom="chunk_name" case="caseFirstword">
            <tags>
              <tag><lit-tag v="SV"/></tag>
              <tag><var n="func"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="whole"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule> 

     <rule comment="C[D]-PRED bidjat_vblex guovddáš_n" c="example">
      <pattern>
        <pattern-item n="bidjat_vblex"/>
        <pattern-item n="guovddáš_n"/>
      </pattern>
      <action>
        <call-macro n="general-macro-2Param"><with-param pos="2"/><with-param pos="1"/></call-macro>
       <choose>
         <when><test><equal><clip pos="1" side="sl" part="a_infin"/><lit-tag v="inf"/></equal></test>
                      <let><var n="chunk_name"/><lit v="inf"/></let>
              </when>
         <when><test><equal><clip pos="1" side="sl" part="a_infin"/><lit-tag v="prfprc"/></equal></test>
                      <let><var n="chunk_name"/><lit v="prfprc"/></let>
              </when>

       <otherwise>
                      <let><var n="chunk_name"/><lit v="vblex"/></let>
       </otherwise>
       </choose>
         <out>
          <chunk namefrom="chunk_name" case="caseFirstword">
            <tags>
              <tag><lit-tag v="SV"/></tag>
              <tag><var n="func"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="whole"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule> 


     <rule comment="C[T]-PRED leat_aux_main mielde_adv verb_actio_inf Supn" c="example">
      <pattern>
        <pattern-item n="leat_aux_main"/>
        <pattern-item n="mielde_adv"/>
        <pattern-item n="verb_actio_inf"/>
      </pattern>
      <action>
        <call-macro n="general-macro-3Param"><with-param pos="1"/><with-param pos="2"/><with-param pos="3"/></call-macro>
         <let><clip pos="3" side="tl" part="a_infin"/><lit-tag v="supn"/></let>
         <out>
          <chunk name="vblex" case="caseFirstword">
            <tags>
              <tag><lit-tag v="SV"/></tag>
              <tag><var n="func"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="whole"/>
            </lu>
            <b pos="1"/>
            <lu>
              <clip pos="2" side="tl" part="whole"/>
            </lu>
            <b pos="2"/>
            <lu>
              <clip pos="3" side="tl" part="whole"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule> 

     <rule comment="C[W]-PRED váldit_vblex atnu_n_ill" c="example">
      <pattern>
        <pattern-item n="váldit_vblex"/>
        <pattern-item n="atnu_n_ill"/>
      </pattern>
      <action>
        <call-macro n="general-macro-2Param"><with-param pos="1"/><with-param pos="2"/></call-macro>
       <choose>
         <when><test><equal><clip pos="1" side="sl" part="a_infin"/><lit-tag v="inf"/></equal></test>
                      <let><var n="chunk_name"/><lit v="inf"/></let>
              </when>
         <when><test><equal><clip pos="1" side="sl" part="a_infin"/><lit-tag v="prfprc"/></equal></test>
                      <let><var n="chunk_name"/><lit v="prfprc"/></let>
              </when>

       <otherwise>
                      <let><var n="chunk_name"/><lit v="vblex"/></let>
       </otherwise>
       </choose>
         <out>
          <chunk namefrom="chunk_name" case="caseFirstword">
            <tags>
              <tag><lit-tag v="SV"/></tag>
              <tag><lit-tag v="@SPRED"/></tag>
            </tags>
            <lu>
              <clip pos="2" side="tl" part="whole"/>
            </lu>
            <b pos="1"/>
            <lu>
              <clip pos="1" side="tl" part="whole"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule> 

  
  <rule comment="C[_]-PP adpos" c="prep to postp or prep">
      <pattern>
        <pattern-item n="adpos"/>
      </pattern>
      <action>
       <call-macro n="general-macro-1Param"><with-param pos="1"/></call-macro>
       <choose>
         <when><test><and><equal><clip pos="1" side="sl" part="a_PoS"/><lit-tag v="pr"/></equal>
                          <equal><clip pos="1" side="tl" part="a_PoS"/><lit-tag v="post"/></equal>
           </and></test>
           <let><var n="chunk_name"/><lit v="pr_post"/></let></when>
          <when><test><and><equal><clip pos="1" side="sl" part="a_PoS"/><lit-tag v="post"/></equal>
                          <equal><clip pos="1" side="tl" part="a_PoS"/><lit-tag v="cnjsub"/></equal>
           </and></test>
           <let><var n="chunk_name"/><lit v="cnjsub"/></let></when>
        <when><test><and><equal><clip pos="1" side="sl" part="a_PoS"/><lit-tag v="post"/></equal>
                          <equal><clip pos="1" side="tl" part="a_PoS"/><lit-tag v="pr"/></equal>
           </and></test>
           <let><var n="chunk_name"/><lit v="post_pr"/></let></when>
         <when><test><and><equal><clip pos="1" side="sl" part="a_PoS"/><lit-tag v="post"/></equal>
                       <not><equal><clip pos="1" side="tl" part="a_PoS"/><lit-tag v="pr"/></equal></not>
           </and></test>
           <let><var n="chunk_name"/><lit v="post"/></let></when>
         <otherwise>
           <let><var n="chunk_name"/><lit v="pr"/></let>
         </otherwise>
       </choose>
        <out>
          <chunk namefrom="chunk_name" case="caseFirstword">
            <tags>
              <tag><lit-tag v="PP"/></tag>
              <tag><var n="func"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="whole"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
 
  <rule comment="C[DL]-NP guhkki_adj áigi_n" c="guhkes áigi : guhkev">
      <pattern>
        <pattern-item n="guhkki_adj"/>
        <pattern-item n="áigi_n"/>
      </pattern>
      <action>
       <call-macro n="general-macro-2Param"><with-param pos="1"/><with-param pos="2"/></call-macro>
          <out>
         <chunk name="adv" case="caseFirstword">
            <tags>
              <tag><lit-tag v="ADV"/></tag>
              <tag><var n="func"/></tag>
            </tags>
            <lu>
            <lit v="guhkev"/>
            <lit-tag v="adv"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

  <rule comment="C[DL]-PP guhkki_adj áigi_n vuollai_post" c="guhkes áigi vuollai: guhkev">
      <pattern>
        <pattern-item n="guhkki_adj"/>
        <pattern-item n="áigi_n"/>
        <pattern-item n="vuollai_post"/>
      </pattern>
      <action>
       <call-macro n="general-macro-3Param"><with-param pos="1"/><with-param pos="2"/><with-param pos="3"/></call-macro>
          <out>
         <chunk name="adv" case="caseFirstword">
            <tags>
              <tag><lit-tag v="ADV"/></tag>
              <tag><var n="func"/></tag>
            </tags>
            <lu>
            <lit v="guhkev"/>
            <lit-tag v="adv"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
 
 <rule comment="C[T]-PHR noun_nom leat_main geatnegahtton_adj verb_inf" c="geatnegahtton=åvdåsvásstádus: Skuvla lea geatnegahtton oahpahit"> 
      <pattern>
        <pattern-item n="noun_nom"/>
        <pattern-item n="leat_main"/>
        <pattern-item n="geatnegahtton_adj"/>
        <pattern-item n="verb_inf"/>
      </pattern>
      <action>
        <call-macro n="general-macro-4Param"><with-param pos="1"/><with-param pos="2"/><with-param pos="3"/><with-param pos="4"/></call-macro>
         <let><clip pos="1" side="tl" part="a_case"/><lit-tag v="ine"/></let><out>
          <chunk name="geatnegahtton" case="caseFirstword">
            <tags>
              <tag><lit-tag v="NP"/></tag>
              <tag><var n="func"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="whole"/>
            </lu>
            <b pos="1"/>
            <lu>
              <clip pos="2" side="tl" part="whole"/>
            </lu>
            <b pos="2"/>
            <lu>
              <clip pos="3" side="tl" part="whole"/>
            </lu>
            <b pos="3"/>
            <lu>
              <clip pos="4" side="tl" part="whole"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

 
  
  <rule comment="C[_]-PHR noun_nom leat_main geatnegahtton_adj" c="geatnegahtton=bákkulasj: Skuvla lea geatnegahtton"> 
      <pattern>
        <pattern-item n="noun_nom"/>
        <pattern-item n="leat_main"/>
        <pattern-item n="geatnegahtton_adj"/>
      </pattern>
      <action>
        <call-macro n="general-macro-3Param"><with-param pos="1"/><with-param pos="2"/><with-param pos="3"/></call-macro>
         <out>
          <chunk name="geatnegahtton" case="caseFirstword">
            <tags>
              <tag><lit-tag v="NP"/></tag>
              <tag><var n="func"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="whole"/>
            </lu>
            <b pos="1"/>
            <lu>
              <clip pos="2" side="tl" part="whole"/>
            </lu>
            <b pos="2"/>
            <lu>
              <clip pos="3" side="tl" part="whole"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
  
    <rule comment="C[T]-N ind_prn_neg removes Foc"  c="example">
      <pattern>
        <pattern-item n="ind_prn_neg"/>
      </pattern>
      <action>
        <call-macro n="general-macro-1Param"><with-param pos="1"/></call-macro>
         <let><clip pos="1" side="tl" part="a_foc"/><lit v=""/></let><out>
          <chunk name="indef" case="caseFirstword">
            <tags>
              <tag><lit-tag v="NP"/></tag>
              <tag><var n="func"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="whole"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="C[_] leat_main_fin" c="example">
      <pattern>
        <pattern-item n="leat_main_fin"/>
      </pattern>
      <action>
        <call-macro n="general-macro-1Param">
          <with-param pos="1"/>
        </call-macro>
        <out>
          <chunk name="cop-mainv" case="caseFirstword">
            <tags>
              <tag><lit-tag v="SV"/></tag>
              <tag><var n="func"/></tag>
<!--              <tag><var n="tense"/></tag> -->
            </tags>
            <lu>
              <clip pos="1" side="tl" part="whole"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

    <rule comment="C[AT]-V leat_qst" c="leago : le gus">
      <pattern>
        <pattern-item n="leat_qst"/>
      </pattern>
      <action>
        <call-macro n="general-macro-1Param"><with-param pos="1"/></call-macro>
            <let><clip pos="1" side="tl" part="a_qst"/><lit v=""/></let>
        <out>
          <chunk name="mainverb" case="caseFirstword">
            <tags>
              <tag><lit-tag v="SV"/></tag>
              <tag><var n="func"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="whole"/>
            </lu>
           <b/>
         <lu>
            <lit v="gus"/>
            <lit-tag v="pcle.qst"/>
          </lu>
          </chunk>
        </out>
      </action>
    </rule>

    <rule comment="C[T]-V negverb" c="example">
      <pattern>
        <pattern-item n="negverb"/>
      </pattern>
      <action>
        <call-macro n="general-macro-1Param"><with-param pos="1"/></call-macro>
        <!-- neg verb alone is probably disam. fail with interjection -->
        <let><clip pos="1" side="tl" part="a_temps_mood"/>
             <concat><clip pos="1" side="tl" part="a_mood"/><lit-tag v="pres"/></concat>
        </let>
        <out>
          <chunk name="neg" case="caseFirstword">
            <tags>
              <tag><lit-tag v="SV"/></tag>
              <tag><var n="func"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="whole"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

    <rule comment="C[T]-V negverb connegverb" c="Dábálasj neg: Iv sidá dujna doarrut"> 
      <pattern>
        <pattern-item n="negverb"/>
        <pattern-item n="connegverb"/>
      </pattern>
      <action>
        <call-macro n="general-macro-2Param"><with-param pos="1"/><with-param pos="2"/></call-macro> 
        <!-- c="First we copy the temps from mainverb onto negverb" -->
        <let>
          <clip pos="1" side="tl" part="a_temps_mood"/>
          <concat><clip pos="1" side="tl" part="a_mood"/><clip pos="2" side="tl" part="a_tense"/></concat>
        </let>
        <choose>
          <when>
            <test><and>
              <not><equal><clip pos="2" side="tl" part="lem"/><lit v="liehket"/></equal></not>
              <not><equal><clip pos="2" side="tl" part="a_mood"/><lit-tag v="cond"/></equal></not></and>
            </test>
            <let><clip pos="2" side="tl" part="a_tense"/><lit v=""/></let>
          </when> 
          <when><test><and>
            <not><equal><clip pos="2" side="tl" part="a_mood"/><lit-tag v="cond"/></equal></not>
            <equal><clip pos="1" side="tl" part="a_nbr"/><lit-tag v="sg"/></equal></and></test>
            <let><clip pos="1" side="tl" part="a_tense"/><lit-tag v="pres"/></let>
          </when>  
          <when c="in jáhkáše : iv jáhke"> <!-- or shouldit have lulu  ? -->
            <test><and>
              <not><equal><clip pos="2" side="tl" part="lem"/><lit v="liehket"/></equal></not>
              <equal><clip pos="2" side="tl" part="a_mood"/><lit-tag v="cond"/></equal>
            </and></test>
            <let><clip pos="2" side="tl" part="a_mood"/><lit-tag v="indic"/></let>
            <let><clip pos="1" side="tl" part="tags"/><concat><lit-tag v="vblex.neg.indic.pres"/>
            <clip pos="1" side="sl" part="a_person"/><clip pos="1" side="sl" part="a_nbr"/></concat></let>
          </when>
          <when c="de in livčče jáhkkán : de iv lulu jáhkkám">
          <test>
            <equal><clip pos="2" side="tl" part="a_mood"/><lit-tag v="cond"/></equal></test>
            <let><clip pos="1" side="tl" part="tags"/><concat><lit-tag v="vblex.neg.indic.pres"/>
            <clip pos="1" side="sl" part="a_person"/><clip pos="1" side="sl" part="a_nbr"/></concat></let>
          </when> 
        </choose>
        <out>
          <chunk name="neg" case="caseFirstword">
            <tags>
              <tag><lit-tag v="SV"/></tag>
              <tag><lit-tag v="@+FAUXV"/></tag>
              <tag><clip pos="1" side="sl" part="a_mood"/></tag>
              <tag><clip pos="1" side="sl" part="a_foc"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="whole"/>
            </lu>
          </chunk>
          <b pos="1"/>
          <chunk name="conneg">
            <tags>
              <tag><lit-tag v="SV"/></tag>
              <tag><var n="func"/></tag>
              <tag><clip pos="2" side="sl" part="a_mood"/></tag>
              <tag><clip pos="2" side="sl" part="a_foc"/></tag>
            </tags>
            <lu>
              <clip pos="2" side="tl" part="whole"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

    <rule comment="C[T]-V negverbqst connegverb" c="example"> 
      <pattern>
        <pattern-item n="negverbqst"/>
        <pattern-item n="connegverb"/>
      </pattern>
      <action>
        <call-macro n="general-macro-2Param"><with-param pos="1"/><with-param pos="2"/></call-macro>
        <!-- c="First we copy the temps from mainverb onto negverb" -->
        <let>
          <clip pos="1" side="tl" part="a_temps_mood"/>
          <concat><clip pos="1" side="tl" part="a_mood"/><clip pos="2" side="tl" part="a_tense"/></concat>
        </let>
        <choose>
          <when>
            <test>
              <not><equal><clip pos="2" side="tl" part="lem"/><lit v="liehket"/></equal></not>
            </test>
            <let><clip pos="2" side="tl" part="a_tense"/><lit v=""/></let>
          </when>
          <when>
            <test><equal><clip pos="1" side="tl" part="a_nbr"/><lit-tag v="sg"/></equal></test>
            <let><clip pos="1" side="tl" part="a_tense"/><lit-tag v="pres"/></let>
          </when>
        </choose>
            <let><clip pos="1" side="tl" part="a_qst"/><lit v=""/></let>

        <out>
          <chunk name="neg" case="caseFirstword">
            <tags>
              <tag><lit-tag v="SV"/></tag>
              <tag><lit-tag v="@+FAUXV"/></tag>
              <tag><clip pos="1" side="sl" part="a_mood"/></tag>
              <tag><clip pos="1" side="sl" part="a_foc"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="whole"/>
            </lu>
            <b pos="1"/>
         <lu>
            <lit v="gus"/>
            <lit-tag v="pcle.qst"/>
          </lu>
          </chunk>
          <b pos="1"/>
          <chunk name="conneg">
            <tags>
              <tag><lit-tag v="SV"/></tag>
              <tag><var n="func"/></tag>
              <tag><clip pos="2" side="sl" part="a_mood"/></tag>
              <tag><clip pos="2" side="sl" part="a_foc"/></tag>
            </tags>
            <lu>
              <clip pos="2" side="tl" part="whole"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>


  <rule comment="C[TW]-V negverb23 leat_conneg word" c="Viehkkeverba neg. sg2 ja pl3: illa/illim ja ælla/ællim"> 
    <pattern>
      <pattern-item n="negverb23"/>
      <pattern-item n="leat_conneg"/>
      <pattern-item n="word"/>
    </pattern>
    <action>
      <call-macro n="general-macro-3Param"><with-param pos="1"/><with-param pos="2"/><with-param pos="3"/></call-macro>
      <call-macro n="assign-case-1Param"><with-param pos="3"/></call-macro>
      <let><clip pos="1" side="tl" part="a_temps_mood"/>
      <concat><clip pos="2" side="tl" part="a_temps_mood"/></concat>
      </let>
      <let><clip pos="1" side="tl" part="lem"/><lit v="liehket"/></let>
       <choose>
         <when><test><equal><clip pos="3" side="sl" part="a_PoS"/><lit-tag v="n"/></equal></test>
                      <let><var n="chunk_name"/><lit v="noun"/></let>
              </when>
         <when><test><equal><clip pos="3" side="sl" part="a_PoS"/><lit-tag v="prn"/></equal></test>
                      <let><var n="chunk_name"/><lit v="prn"/></let>
              </when>
         <when><test><equal><clip pos="3" side="sl" part="a_PoS"/><lit-tag v="adv"/></equal></test>
                      <let><var n="chunk_name"/><lit v="adv"/></let>
              </when>

       <otherwise>
                      <let><var n="chunk_name"/><lit v="word"/></let>
       </otherwise>
      </choose>
      <out>
        <chunk name="neg" case="caseFirstword">
          <tags>
            <tag><lit-tag v="SV"/></tag>
            <tag><lit-tag v="@-FMAINV"/></tag>
          </tags>
          <lu>
            <clip pos="1" side="tl" part="whole"/>
          </lu>
        </chunk>
          <b pos="1"/>
              <chunk namefrom="chunk_name">
          <tags>
            <tag><lit-tag v="SV"/></tag>
            <tag><var n="func"/></tag>
          </tags>
          <lu>
            <clip pos="3" side="tl" part="whole"/>
          </lu>
        </chunk>
      </out>
      <choose><when>
        <test><not><equal><b pos="2"/><lit v=" "/></equal></not></test>
        <out><b pos="2"/></out>
      </when></choose>
    </action>
  </rule>


  <rule comment="C[T]-V negverb word_qst_not_verb connegverb" c="Dábálasj neg. ájnat báhko sierat negverb ja conneg: Ep desti visjá">
    <pattern>
      <pattern-item n="negverb"/>
      <pattern-item n="word_qst_not_verb"/>
      <pattern-item n="connegverb"/>
    </pattern>
    <action>
      <call-macro n="general-macro-3Param"><with-param pos="1"/><with-param pos="3"/><with-param pos="2"/></call-macro>
      <call-macro n="assign-case-1Param"><with-param pos="2"/></call-macro>
      <!-- c="First we copy the temps from mainverb onto negverb" -->
      <let>
        <clip pos="1" side="tl" part="a_temps_mood"/>
        <concat><clip pos="1" side="tl" part="a_mood"/><clip pos="3" side="tl" part="a_tense"/></concat>
      </let>
      <choose>
        <when>
          <test>
            <not><equal><clip pos="3" side="tl" part="lem"/><lit v="liehket"/></equal></not>
          </test>
          <let><clip pos="3" side="tl" part="a_tense"/><lit v=""/></let>
        </when>
        <when>
          <test><equal><clip pos="1" side="tl" part="a_nbr"/><lit-tag v="sg"/></equal></test>
          <let><clip pos="1" side="tl" part="a_tense"/><lit-tag v="pres"/></let>
        </when>
      </choose>
       <choose>
         <when><test><equal><clip pos="2" side="sl" part="a_PoS"/><lit-tag v="n"/></equal></test>
                      <let><var n="chunk_name"/><lit v="noun"/></let>
              </when>
         <when><test><equal><clip pos="2" side="sl" part="a_PoS"/><lit-tag v="prn"/></equal></test>
                      <let><var n="chunk_name"/><lit v="prn"/></let>
              </when>
         <when><test><equal><clip pos="2" side="sl" part="a_PoS"/><lit-tag v="adv"/></equal></test>
                      <let><var n="chunk_name"/><lit v="adv"/></let>
              </when>

       <otherwise>
                      <let><var n="chunk_name"/><lit v="word"/></let>
       </otherwise>
      </choose>

      <out>
        <chunk name="neg" case="caseFirstword">
          <tags>
            <tag><lit-tag v="SV"/></tag>
            <tag><lit-tag v="@-FAUXV"/></tag>
            <tag><clip pos="1" side="sl" part="a_mood"/></tag>
            <tag><clip pos="1" side="sl" part="a_foc"/></tag>
          </tags>
          <lu>
            <clip pos="1" side="tl" part="whole"/>
          </lu>
         </chunk>
         <b pos="1"/>
              <chunk namefrom="chunk_name">
          <tags>
            <tag><lit-tag v="NP"/></tag>
            <tag><var n="func"/></tag>
          </tags>
          <lu>
            <clip pos="2" side="tl" part="whole"/>
          </lu>
          </chunk>
       <b pos="2"/>
        <chunk name="conneg">
          <tags>
            <tag><lit-tag v="SV"/></tag>
            <tag><lit-tag v="@-FMAINV"/></tag>
          </tags>
          <lu>
            <clip pos="3" side="tl" part="whole"/>
          </lu>
        </chunk>
      </out>
    </action>
  </rule>



  <rule comment="C[TW]-V negverb word_qst_not_verb word_not_verb connegverb" c="example"> 
    <pattern>
      <pattern-item n="negverb"/>
      <pattern-item n="word_qst_not_verb"/>
      <pattern-item n="word_not_verb"/>
      <pattern-item n="connegverb"/>
    </pattern>
    <action>
      <call-macro n="general-macro-4Param"><with-param pos="1"/><with-param pos="2"/><with-param pos="4"/><with-param pos="3"/></call-macro>
      <call-macro n="assign-case-1Param"><with-param pos="2"/></call-macro>
      <call-macro n="assign-case-1Param"><with-param pos="3"/></call-macro>
      <!-- c="First we copy the temps from mainverb onto negverb" -->
      <let>
        <clip pos="1" side="tl" part="a_temps_mood"/>
        <concat><clip pos="1" side="tl" part="a_mood"/><clip pos="4" side="tl" part="a_tense"/></concat>
      </let>
      <choose>
        <when>
          <test>
            <not><equal><clip pos="4" side="tl" part="lem"/><lit v="liehket"/></equal></not>
          </test>
          <let><clip pos="4" side="tl" part="a_tense"/><lit v=""/></let>
        </when>
        <when>
          <test><equal><clip pos="1" side="tl" part="a_nbr"/><lit-tag v="sg"/></equal></test>
          <let><clip pos="1" side="tl" part="a_tense"/><lit-tag v="pres"/></let>
        </when>
      </choose>
       <choose>
         <when><test><equal><clip pos="3" side="sl" part="a_PoS"/><lit-tag v="n"/></equal></test>
                      <let><var n="chunk_name"/><lit v="noun"/></let>
              </when>
         <when><test><equal><clip pos="3" side="sl" part="a_PoS"/><lit-tag v="prn"/></equal></test>
                      <let><var n="chunk_name"/><lit v="prn"/></let>
              </when>
         <when><test><equal><clip pos="3" side="sl" part="a_PoS"/><lit-tag v="adv"/></equal></test>
                      <let><var n="chunk_name"/><lit v="adv"/></let>
              </when>

       <otherwise>
                      <let><var n="chunk_name"/><lit v="word"/></let>
       </otherwise>
      </choose>

      <out>
        <chunk name="neg" case="caseFirstword">
          <tags>
            <tag><lit-tag v="SV"/></tag>
              <tag><lit-tag v="@+FAUXV"/></tag>
            <tag><clip pos="1" side="sl" part="a_mood"/></tag>
            <tag><clip pos="1" side="sl" part="a_foc"/></tag>
          </tags>
          <lu>
            <clip pos="1" side="tl" part="whole"/>
          </lu>
        </chunk>
        <b pos="1"/>
              <chunk namefrom="chunk_name">
          <tags>
            <tag><lit-tag v="NP"/></tag>
            <tag><var n="func"/></tag>
            <tag><clip pos="3" side="sl" part="a_mood"/></tag>
            <tag><clip pos="3" side="sl" part="a_foc"/></tag>
          </tags>
          <lu>
            <clip pos="2" side="tl" part="whole"/>
          </lu>
          <b pos="2"/>
          <lu>
            <clip pos="3" side="tl" part="whole"/>
          </lu>
        </chunk>
          <b pos="3"/>
        <chunk name="conneg">
          <tags>
            <tag><lit-tag v="SV"/></tag>
              <tag><lit-tag v="@-FMAINV"/></tag>
          </tags>
          <lu>
            <clip pos="4" side="tl" part="whole"/>
          </lu>
        </chunk>
      </out>
    </action>
  </rule>

  <rule comment="C[T]-V negverb word_qst_not_verb word_not_verb word_not_verb connegverb" c="example"> 
    <pattern>
      <pattern-item n="negverb"/>
      <pattern-item n="word_qst_not_verb"/>
      <pattern-item n="word_not_verb"/>
      <pattern-item n="word_not_verb"/>
      <pattern-item n="connegverb"/>
    </pattern>
    <action>
      <call-macro n="general-macro-4Param"><with-param pos="1"/><with-param pos="2"/><with-param pos="3"/><with-param pos="5"/></call-macro>
      <call-macro n="general-macro-1Param"><with-param pos="4"/></call-macro>
      <call-macro n="assign-case-1Param"><with-param pos="2"/></call-macro>
      <call-macro n="assign-case-1Param"><with-param pos="3"/></call-macro>
      <call-macro n="assign-case-1Param"><with-param pos="4"/></call-macro>
      <!-- c="First we copy the temps from mainverb onto negverb" -->
      <let>
        <clip pos="1" side="tl" part="a_temps_mood"/>
        <concat><clip pos="1" side="tl" part="a_mood"/><clip pos="5" side="tl" part="a_tense"/></concat>
      </let>
      <choose>
        <when>
          <test>
            <not><equal><clip pos="5" side="tl" part="lem"/><lit v="liehket"/></equal></not>
          </test>
          <let><clip pos="5" side="tl" part="a_tense"/><lit v=""/></let>
        </when>
        <when>
          <test><equal><clip pos="1" side="tl" part="a_nbr"/><lit-tag v="sg"/></equal></test>
          <let><clip pos="1" side="tl" part="a_tense"/><lit-tag v="pres"/></let>
        </when>
      </choose>
       <choose>
         <when><test><equal><clip pos="4" side="sl" part="a_PoS"/><lit-tag v="n"/></equal></test>
                      <let><var n="chunk_name"/><lit v="noun"/></let>
              </when>
         <when><test><equal><clip pos="4" side="sl" part="a_PoS"/><lit-tag v="prn"/></equal></test>
                      <let><var n="chunk_name"/><lit v="prn"/></let>
              </when>
         <when><test><equal><clip pos="4" side="sl" part="a_PoS"/><lit-tag v="adv"/></equal></test>
                      <let><var n="chunk_name"/><lit v="adv"/></let>
              </when>

       <otherwise>
                      <let><var n="chunk_name"/><lit v="word"/></let>
       </otherwise>
      </choose>

      <out>
        <chunk name="neg" case="caseFirstword">
          <tags>
            <tag><lit-tag v="SV"/></tag>
              <tag><lit-tag v="@+FAUXV"/></tag>
            <tag><clip pos="1" side="sl" part="a_mood"/></tag>
            <tag><clip pos="1" side="sl" part="a_foc"/></tag>
          </tags>
          <lu>
            <clip pos="1" side="tl" part="whole"/>
          </lu>
        </chunk>
        <b pos="1"/>
              <chunk namefrom="chunk_name">
          <tags>
            <tag><lit-tag v="NP"/></tag>
            <tag><var n="func"/></tag>
            <tag><clip pos="4" side="sl" part="a_mood"/></tag>
            <tag><clip pos="4" side="sl" part="a_foc"/></tag>
          </tags>
          <lu>
            <clip pos="2" side="tl" part="whole"/>
          </lu>
          <b pos="2"/>
          <lu>
            <clip pos="3" side="tl" part="whole"/>
          </lu>
          <b pos="3"/>
          <lu>
            <clip pos="4" side="tl" part="whole"/>
          </lu>
        </chunk>
          <b pos="4"/>
        <chunk name="conneg">
          <tags>
            <tag><lit-tag v="SV"/></tag>
              <tag><lit-tag v="@-FMAINV"/></tag>
          </tags>
          <lu>
            <clip pos="5" side="tl" part="whole"/>
          </lu>
        </chunk>
      </out>
    </action>
  </rule>


    <rule comment="C[T]-NP months_n semyear" c="example"> 
      <pattern> 
        <pattern-item n="months_n"/>
        <pattern-item n="semyear"/>
     </pattern>
      <action>
        <call-macro n="general-macro-2Param"> <with-param pos="1"/><with-param pos="2"/></call-macro>
         <let><clip pos="1" side="tl" part="a_case"/><lit-tag v="gen"/></let> 
        <let><clip pos="2" side="tl" part="sem_year"/><lit-tag v="arab"/></let>
                          <out>
          <chunk name="noun" case="caseFirstword">
            <tags>
              <tag><lit-tag v="NP"/></tag>
              <tag><var n="func"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="whole"/>
            </lu>
            <b pos="1"/>
            <lu>
              <clip pos="2" side="tl" part="whole"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

  <rule comment="C[LT]-ADV bealis_px" c="example">
    <pattern>
      <pattern-item n="bealis_px"/>
    </pattern>
    <action>
      <call-macro n="general-macro-1Param"><with-param pos="1"/></call-macro>
      <out>
        <chunk name="adv" case="caseFirstword">
          <tags>
            <tag><lit-tag v="SV"/></tag>
            <tag><var n="func"/></tag>
          </tags>
          <lu>
            <lit v="iesj"/>
            <lit-tag v="prn.ref.sg.gen"/>
            <clip pos="1" side="tl" part="a_poss"/>
          </lu>
          <b/>
          <lu>
            <clip pos="1" side="tl" part="whole"/>
          </lu>
        </chunk>
      </out>
    </action>
  </rule>

  <rule comment="C[_]-ADV adv" c="example">
    <pattern>
      <pattern-item n="adv"/>
    </pattern>
    <action>
      <call-macro n="general-macro-1Param"><with-param pos="1"/></call-macro>
      <let><var n="chunk_name"/><clip pos="1" side="sl" part="lem"/></let>
      <let><var n="chunk_name"/><clip pos="1" side="sl" part="lem"/></let>
      <let><clip pos="1" side="tl" part="a_poss"/><lit v=""/></let> <!-- remove Px, or should we add ref pronoun? -->
<!--      <choose>
        <when>
          <test><and><not><equal><clip pos="1" side="tl" part="lem"/><lit v=""/></equal></not>
                <not><contains-substring><clip pos="1" side="tl" part="lem"/><lit v="&gt;"/></contains-substring></not>
                </and></test> -->
            <out>
              <chunk namefrom="chunk_name" case="caseFirstword">
              <tags>
                <tag><lit-tag v="ADV"/></tag>
                <tag><var n="func"/></tag>
              </tags>
              <lu>
                <clip pos="1" side="tl" part="whole"/>
              </lu>
            </chunk>
          </out>
<!--         </when>
     </choose> -->
    </action>
  </rule>



  <rule comment="C[T]-PCLE pcle" c="example">
    <pattern>
      <pattern-item n="pcle"/>
    </pattern>
    <action>
      <call-macro n="general-macro-1Param"><with-param pos="1"/></call-macro>
      <choose>
        <when>
          <test>
            <equal><clip pos="1" side="sl" part="a_qst"/><lit-tag v="qst"/></equal>
          </test>
          <let><var n="qst"/><clip pos="1" side="sl" part="a_qst"/></let>
        </when>
        <when>
          <test>
            <not><equal><clip pos="1" side="sl" part="a_qst"/><lit-tag v="qst"/></equal></not>
          </test>
          <let><var n="qst"/><lit v=""/></let>
        </when>
      </choose>
        <let><var n="chunk_name"/><clip pos="1" side="sl" part="lem"/></let>
        <out>
          <chunk namefrom="chunk_name" case="caseFirstword">
          <tags>
            <tag><lit-tag v="PCLE"/></tag>
            <tag><var n="func"/></tag>
            <tag><var n="qst"/></tag>
          </tags>
          <lu>
            <clip pos="1" side="tl" part="whole"/>
          </lu>
        </chunk>
      </out>
    </action>
  </rule>

  <rule comment="C[W]-PRED boahtitverb fápmu_n_ill" c="example">
    <pattern>
      <pattern-item n="boahtit_vblex"/>
      <pattern-item n="fápmu_n_ill"/>
    </pattern>
    <action>

      <call-macro n="general-macro-2Param"><with-param pos="1"/><with-param pos="2"/></call-macro>
     <out>
        <chunk name="adv" case="caseFirstword">
          <tags>
            <tag><lit-tag v="ADVL"/></tag>
            <tag><var n="func"/></tag>
          </tags>
          <lu>
            <clip pos="2" side="tl" part="whole"/>
          </lu>
            <b pos="1"/>
          <lu>
            <clip pos="1" side="tl" part="whole"/>
          </lu>
        </chunk>
      </out>
    </action>
  </rule>

    <rule comment="C[T]-PP eará_seammá_prn ladje_post" c="example">
      <pattern>
        <pattern-item n="eará_seammá_prn"/>  
        <pattern-item n="ladje_post"/>  
      </pattern>
      <action>
        <call-macro n="general-macro-2Param"><with-param pos="1"/><with-param pos="2"/></call-macro>
        <call-macro n="foc-1Param"><with-param pos="1"/></call-macro>
        <let><clip pos="1" side="tl" part="tags"/><lit-tag v="prn.ind.attr"/></let>
       <out>
          <chunk name="prn" case="caseFirstword">
            <tags>
              <tag><lit-tag v="NP"/></tag>
              <tag><var n="func"/></tag>
<!--              <tag><var n="case"/></tag>  -->
              <tag><clip pos="1" side="sl" part="a_foc-ge"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="whole"/>
            </lu>
            <b pos="1"/>
             <lu>
              <clip pos="2" side="tl" part="whole"/>
            </lu>
         </chunk>
        </out>
      </action>
    </rule>


    <rule comment="C[_]-N prn" c="example">
      <pattern>
        <pattern-item n="prn"/>  
      </pattern>
      <action>
        <call-macro n="assign-case-1Param"><with-param pos="1"/></call-macro>
        <call-macro n="general-macro-1Param"><with-param pos="1"/></call-macro>
        <call-macro n="foc-1Param"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="prn" case="caseFirstword">
            <tags>
              <tag><lit-tag v="NP"/></tag>
              <tag><var n="func"/></tag>
              <tag><clip pos="1" side="sl" part="a_prn_type"/></tag>
<!--              <tag><var n="case"/></tag>  -->
              <tag><clip pos="1" side="sl" part="a_foc-ge"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="whole"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>



    <rule comment="C[T]-NUM prn_num noun" c="example">
      <pattern>
        <pattern-item n="prn_num"/>  
        <pattern-item n="noun"/>  
      </pattern>
      <action>
        <call-macro n="general-macro-2Param"><with-param pos="1"/><with-param pos="2"/></call-macro>
        <call-macro n="assign-case-1Param"><with-param pos="1"/></call-macro>
        <call-macro n="assign-case-1Param"><with-param pos="2"/></call-macro>
        <choose>
          <when>
              <test><and>
                <not><equal><clip pos="1" side="sl" part="a_num_type"/><lit-tag v="arab"/></equal></not>
                  <equal><clip pos="2" side="sl" part="a_sem"/><lit-tag v="sem_route"/></equal>
                  <equal><clip pos="2" side="sl" part="a_case"/><lit-tag v="gen"/></equal>
                 </and></test>
              <let><clip pos="1" side="tl" part="a_case"/><lit-tag v="acc"/></let>
          </when>
          <when>
              <test>
                <and>
                  <not><equal><clip pos="1" side="sl" part="a_num_type"/><lit-tag v="arab"/></equal></not>
                    <not><equal><clip pos="2" side="sl" part="a_sem"/><lit-tag v="sem_route"/></equal></not>
                    <equal><clip pos="2" side="sl" part="a_case"/><lit-tag v="loc"/></equal>
                    <or>
                    <equal><clip pos="2" side="sl" part="a_func"/><lit-tag v="@←ADVL-ela"/></equal>
                    <equal><clip pos="2" side="sl" part="a_func"/><lit-tag v="@ADVL-ela→"/></equal>
                      <equal><clip pos="2" side="sl" part="a_func"/><lit-tag v="@-F←ADVL-ela"/></equal>
                      </or>
                </and>
              </test>
              <let><clip pos="1" side="tl" part="a_case"/><lit-tag v="ela"/></let>
          </when>
          <when>
              <test>
              <and>
             <not><equal><clip pos="1" side="sl" part="a_num_type"/><lit-tag v="arab"/></equal></not>
             <not><equal><clip pos="2" side="sl" part="a_sem"/><lit-tag v="sem_route"/></equal></not>
              <equal><clip pos="2" side="sl" part="a_case"/><lit-tag v="loc"/></equal>
              <not><equal><clip pos="2" side="sl" part="a_func"/><lit-tag v="@←ADVL-ela"/></equal></not>
              <not><equal><clip pos="2" side="sl" part="a_func"/><lit-tag v="@ADVL-ela→"/></equal></not>
              <not><equal><clip pos="2" side="sl" part="a_func"/><lit-tag v="@-F←ADVL-ela"/></equal></not>
             </and>
             </test>
              <let><clip pos="1" side="tl" part="a_case"/><lit-tag v="ine"/></let>
          </when>
          <when>
              <test>
              <and>
             <not><equal><clip pos="1" side="sl" part="a_num_type"/><lit-tag v="arab"/></equal></not>
             <not><equal><clip pos="2" side="sl" part="a_sem"/><lit-tag v="sem_route"/></equal></not>
              <equal><clip pos="1" side="sl" part="a_case"/><lit-tag v="acc"/></equal>
              <equal><clip pos="2" side="sl" part="a_case"/><lit-tag v="gen"/></equal>
             </and>
             </test>
              <let><clip pos="2" side="tl" part="a_case"/><lit-tag v="acc"/></let>
          </when>
           <when> 
            <test><and>
            <equal><clip pos="1" side="sl" part="a_num_type"/><lit-tag v="arab"/></equal>
            <equal><clip pos="1" side="sl" part="a_case"/><lit-tag v="acc"/></equal>
            </and></test>
             <let><clip pos="1" side="tl" part="a_case"/><lit-tag v="nom"/></let>
             </when>
          </choose> 
          <out>
            <chunk name="noun" case="caseFirstword">
              <tags>
                <tag><lit-tag v="NP"/></tag>
                <tag><var n="func"/></tag>
                <tag><var n="ext"/></tag>
              </tags>
              <lu>
                <clip pos="1" side="tl" part="whole"/>
              </lu>
            <b pos="1"/>
               <lu>
                <clip pos="2" side="tl" part="whole"/>
              </lu>
           </chunk>
          </out>
      </action>
    </rule> 
 
     <rule comment="C[T]-NUM mod_num prn_num noun" c="example">
      <pattern>
        <pattern-item n="mod_num"/>  
        <pattern-item n="prn_num"/> 
        <pattern-item n="noun"/>  
      </pattern>
      <action>
      <call-macro n="general-macro-3Param"><with-param pos="1"/><with-param pos="2"/><with-param pos="3"/></call-macro>
        <call-macro n="assign-case-1Param"><with-param pos="1"/></call-macro>
        <call-macro n="assign-case-1Param"><with-param pos="2"/></call-macro>
        <call-macro n="assign-case-1Param"><with-param pos="3"/></call-macro>
      <choose>
      <when>
          <test><and>
        <not><equal><clip pos="2" side="sl" part="a_num_type"/><lit-tag v="arab"/></equal></not>
          <equal><clip pos="3" side="sl" part="a_sem"/><lit-tag v="sem_route"/></equal>
          <equal><clip pos="3" side="sl" part="a_case"/><lit-tag v="gen"/></equal>
          </and></test>
          <let><clip pos="2" side="tl" part="a_case"/><lit-tag v="acc"/></let>
      </when>
      <when>
          <test>
          <and>
        <not><equal><clip pos="2" side="sl" part="a_num_type"/><lit-tag v="arab"/></equal></not>
          <not><equal><clip pos="3" side="sl" part="a_sem"/><lit-tag v="sem_route"/></equal></not>
          <equal><clip pos="3" side="sl" part="a_case"/><lit-tag v="loc"/></equal>
          <or>
          <equal><clip pos="3" side="sl" part="a_func"/><lit-tag v="@←ADVL-ela"/></equal>
          <equal><clip pos="3" side="sl" part="a_func"/><lit-tag v="@ADVL-ela→"/></equal>
            <equal><clip pos="3" side="sl" part="a_func"/><lit-tag v="@-F←ADVL-ela"/></equal>
            </or>
         </and>
         </test>
          <let><clip pos="2" side="tl" part="a_case"/><lit-tag v="ela"/></let>
      </when>
      <when>
          <test>
          <and>
         <not><equal><clip pos="2" side="sl" part="a_num_type"/><lit-tag v="arab"/></equal></not>
         <not><equal><clip pos="3" side="sl" part="a_sem"/><lit-tag v="sem_route"/></equal></not>
          <equal><clip pos="3" side="sl" part="a_case"/><lit-tag v="loc"/></equal>
          <not><equal><clip pos="3" side="sl" part="a_func"/><lit-tag v="@←ADVL-ela"/></equal></not>
          <not><equal><clip pos="3" side="sl" part="a_func"/><lit-tag v="@ADVL-ela→"/></equal></not>
          <not><equal><clip pos="3" side="sl" part="a_func"/><lit-tag v="@-F←ADVL-ela"/></equal></not>
         </and>
         </test>
          <let><clip pos="2" side="tl" part="a_case"/><lit-tag v="ine"/></let>
      </when>
      <when>
          <test>
          <and>
         <not><equal><clip pos="2" side="sl" part="a_num_type"/><lit-tag v="arab"/></equal></not>
         <not><equal><clip pos="3" side="sl" part="a_sem"/><lit-tag v="sem_route"/></equal></not>
          <equal><clip pos="2" side="sl" part="a_case"/><lit-tag v="acc"/></equal>
          <equal><clip pos="3" side="sl" part="a_case"/><lit-tag v="gen"/></equal>
         </and>
         </test>
          <let><clip pos="3" side="tl" part="a_case"/><lit-tag v="acc"/></let>
      </when>
       <when><test><and>
        <equal><clip pos="2" side="sl" part="a_num_type"/><lit-tag v="arab"/></equal>
        <equal><clip pos="2" side="sl" part="a_case"/><lit-tag v="acc"/></equal>
        </and></test>
         <let><clip pos="2" side="tl" part="a_case"/><lit-tag v="nom"/></let>
         </when>
        </choose> 
        <out>
          <chunk name="noun" case="caseFirstword">
            <tags>
              <tag><lit-tag v="NP"/></tag>
              <tag><var n="func"/></tag>
              <tag><var n="ext"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="whole"/>
            </lu>
            <b pos="1"/>
             <lu>
              <clip pos="2" side="tl" part="whole"/>
            </lu>
            <b pos="2"/>
             <lu>
              <clip pos="3" side="tl" part="whole"/>
            </lu>
        </chunk>
        </out>
      </action>
    </rule> 

 
    <rule comment="C[T]-NUM prn_num n_cmp noun" c="example">
      <pattern>
        <pattern-item n="prn_num"/>  
        <pattern-item n="n_cmp"/>          
        <pattern-item n="noun"/>  
      </pattern>
      <action>
      <call-macro n="general-macro-3Param"><with-param pos="1"/><with-param pos="2"/><with-param pos="3"/></call-macro>
        <call-macro n="assign-case-1Param"><with-param pos="1"/></call-macro>
        <call-macro n="assign-case-1Param"><with-param pos="3"/></call-macro>
      <choose>
      <when>
          <test>
          <and>
        <not><equal><clip pos="1" side="sl" part="a_num_type"/><lit-tag v="arab"/></equal></not>
          <not><equal><clip pos="3" side="sl" part="a_sem"/><lit-tag v="sem_route"/></equal></not>
          <equal><clip pos="3" side="sl" part="a_case"/><lit-tag v="loc"/></equal>
          <or>
          <equal><clip pos="3" side="sl" part="a_func"/><lit-tag v="@←ADVL-ela"/></equal>
          <equal><clip pos="3" side="sl" part="a_func"/><lit-tag v="@ADVL-ela→"/></equal>
            <equal><clip pos="3" side="sl" part="a_func"/><lit-tag v="@-F←ADVL-ela"/></equal>
            </or>
         </and>
         </test>
          <let><clip pos="1" side="tl" part="a_case"/><lit-tag v="ela"/></let>
      </when>
      <when>
          <test>
          <and>
         <not><equal><clip pos="1" side="sl" part="a_num_type"/><lit-tag v="arab"/></equal></not>
         <not><equal><clip pos="3" side="sl" part="a_sem"/><lit-tag v="sem_route"/></equal></not>
          <equal><clip pos="3" side="sl" part="a_case"/><lit-tag v="loc"/></equal>
          <not><equal><clip pos="3" side="sl" part="a_func"/><lit-tag v="@←ADVL-ela"/></equal></not>
          <not><equal><clip pos="3" side="sl" part="a_func"/><lit-tag v="@ADVL-ela→"/></equal></not>
          <not><equal><clip pos="3" side="sl" part="a_func"/><lit-tag v="@-F←ADVL-ela"/></equal></not>
         </and>
         </test>
          <let><clip pos="1" side="tl" part="a_case"/><lit-tag v="ine"/></let>
      </when>
      <when>
          <test>
          <and>
         <not><equal><clip pos="1" side="sl" part="a_num_type"/><lit-tag v="arab"/></equal></not>
         <not><equal><clip pos="3" side="sl" part="a_sem"/><lit-tag v="sem_route"/></equal></not>
          <equal><clip pos="1" side="sl" part="a_case"/><lit-tag v="acc"/></equal>
          <equal><clip pos="3" side="sl" part="a_case"/><lit-tag v="gen"/></equal>
         </and>
         </test>
          <let><clip pos="3" side="tl" part="a_case"/><lit-tag v="acc"/></let>
      </when>
       <when><test><and>
        <equal><clip pos="1" side="sl" part="a_num_type"/><lit-tag v="arab"/></equal>
        <equal><clip pos="1" side="sl" part="a_case"/><lit-tag v="acc"/></equal>
        </and></test>
         <let><clip pos="1" side="tl" part="a_case"/><lit-tag v="nom"/></let>
         </when>
        </choose> 
        <out>
          <chunk name="noun" case="caseFirstword">
            <tags>
              <tag><lit-tag v="NP"/></tag>
              <tag><var n="func"/></tag>
              <tag><var n="ext"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="whole"/>
            </lu>
            <b pos="1"/>
            <mlu>
             <lu>
              <clip pos="2" side="tl" part="whole"/>
            </lu>
             <lu>
              <clip pos="3" side="tl" part="whole"/>
            </lu>
            </mlu>
         </chunk>
        </out>
      </action>
    </rule> 

    <rule comment="C[T]-NUM prn_dem prn_dem noun" c="example">
      <pattern>
        <pattern-item n="prn_dem"/>  
        <pattern-item n="prn_num"/>  
        <pattern-item n="noun"/>  
      </pattern>
      <action>
      <call-macro n="general-macro-3Param"><with-param pos="1"/><with-param pos="2"/><with-param pos="3"/></call-macro>
        <call-macro n="assign-case-1Param"><with-param pos="1"/></call-macro>
        <call-macro n="assign-case-1Param"><with-param pos="2"/></call-macro>
        <call-macro n="assign-case-1Param"><with-param pos="3"/></call-macro>
      <choose>
      <when>
          <test><and>
          <equal><clip pos="3" side="sl" part="a_sem"/><lit-tag v="sem_route"/></equal>
          <equal><clip pos="3" side="sl" part="a_case"/><lit-tag v="gen"/></equal>
          </and></test>
          <let><clip pos="1" side="tl" part="a_case"/><lit-tag v="acc"/></let>
          <let><clip pos="2" side="tl" part="a_case"/><lit-tag v="acc"/></let>
          <let><clip pos="3" side="tl" part="a_case"/><lit-tag v="acc"/></let>
      </when>
      <when>
          <test>
          <and>
          <not><equal><clip pos="3" side="sl" part="a_sem"/><lit-tag v="sem_route"/></equal></not>
          <equal><clip pos="3" side="sl" part="a_case"/><lit-tag v="loc"/></equal>
          <or>
          <equal><clip pos="3" side="sl" part="a_func"/><lit-tag v="@←ADVL-ela"/></equal>
          <equal><clip pos="3" side="sl" part="a_func"/><lit-tag v="@ADVL-ela→"/></equal>
            <equal><clip pos="3" side="sl" part="a_func"/><lit-tag v="@-F←ADVL-ela"/></equal>
            </or>
         </and>
         </test>
          <let><clip pos="1" side="tl" part="a_case"/><lit-tag v="ela"/></let>
          <let><clip pos="2" side="tl" part="a_case"/><lit-tag v="ela"/></let>
      </when>
      <when>
          <test>
          <and>
          <not><equal><clip pos="3" side="sl" part="a_sem"/><lit-tag v="sem_route"/></equal></not>
          <equal><clip pos="3" side="sl" part="a_case"/><lit-tag v="loc"/></equal>
          <not><equal><clip pos="3" side="sl" part="a_func"/><lit-tag v="@←ADVL-ela"/></equal></not>
          <not><equal><clip pos="3" side="sl" part="a_func"/><lit-tag v="@ADVL-ela→"/></equal></not>
         <not><equal><clip pos="3" side="sl" part="a_func"/><lit-tag v="@-F←ADVL-ela"/></equal></not>
         </and>
         </test>
          <let><clip pos="1" side="tl" part="a_case"/><lit-tag v="ine"/></let>
          <let><clip pos="2" side="tl" part="a_case"/><lit-tag v="ine"/></let>
      </when>
      <when>
          <test>
          <and>
         <not><equal><clip pos="1" side="sl" part="a_num_type"/><lit-tag v="arab"/></equal></not>
         <not><equal><clip pos="3" side="sl" part="a_sem"/><lit-tag v="sem_route"/></equal></not>
          <equal><clip pos="1" side="sl" part="a_case"/><lit-tag v="acc"/></equal>
          <equal><clip pos="3" side="sl" part="a_case"/><lit-tag v="gen"/></equal>
         </and>
         </test>
          <let><clip pos="3" side="tl" part="a_case"/><lit-tag v="acc"/></let>
      </when>
      </choose>
        <out>
          <chunk name="noun" case="caseFirstword">
            <tags>
              <tag><lit-tag v="NP"/></tag>
              <tag><var n="func"/></tag>
              <tag><var n="ext"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="whole"/>
            </lu>
            <b pos="1"/>
             <lu>
              <clip pos="2" side="tl" part="whole"/>
            </lu>
            <b pos="2"/>
             <lu>
              <clip pos="3" side="tl" part="whole"/>
            </lu>
         </chunk>
        </out>
      </action>
    </rule>

   <rule comment="C[T]-NUM numeral prn_dem noun" c="luohkás lea okta dain olbmuin geat ledje doppe">
      <pattern>
        <pattern-item n="numeral"/>  
        <pattern-item n="prn_dem"/>  
        <pattern-item n="noun"/>  
      </pattern>
      <action>
      <call-macro n="general-macro-3Param"><with-param pos="1"/><with-param pos="2"/><with-param pos="3"/></call-macro>
        <call-macro n="assign-case-1Param"><with-param pos="1"/></call-macro>
        <call-macro n="assign-case-1Param"><with-param pos="2"/></call-macro>
        <call-macro n="assign-case-1Param"><with-param pos="3"/></call-macro>
      <choose>
      <when>
          <test>
          <equal><clip pos="3" side="tl" part="a_case"/><lit-tag v="ela"/></equal>
          </test>
            <let><clip pos="2" side="tl" part="a_case"/><lit-tag v="ela"/></let>
      </when> 
      </choose> 
        <out>
          <chunk name="nounNEW" case="caseFirstword">
            <tags>
              <tag><lit-tag v="NP"/></tag>
              <tag><var n="func"/></tag>
              <tag><var n="ext"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="whole"/>
            </lu>
            <b pos="1"/>
             <lu>
              <clip pos="2" side="tl" part="whole"/>
            </lu>
            <b pos="2"/>
             <lu>
              <clip pos="3" side="tl" part="whole"/>
            </lu>
         </chunk>
        </out>
      </action>
    </rule>


    <rule comment="C[DT]-PP gen váste_post" c="illative instead of pp with váste">
      <pattern>
        <pattern-item n="gen"/>
        <pattern-item n="váste_post"/>
      </pattern>
      <action>
           <let><clip pos="1" side="tl" part="a_case"/><lit-tag v="ill"/></let>
         <call-macro n="general-macro-2Param"><with-param pos="1"/><with-param pos="2"/></call-macro>
           <let><var n="func"/><clip pos="2" side="sl" part="a_func"/></let>
       <out>
          <chunk name="noun" case="caseFirstword">
             <tags>
              <tag><lit-tag v="NP"/></tag>
              <tag><var n="func"/></tag>
            </tags>
           <lu>
            <clip pos="1" side="tl" part="whole"/>            
           </lu>
          </chunk>
        </out>
      </action>
    </rule>

    <rule comment="C[DT]-PP n_cmp gen váste_post" c="illative instead of pp with váste"> 
      <pattern>
        <pattern-item n="n_cmp"/>
        <pattern-item n="gen"/>
        <pattern-item n="váste_post"/>
      </pattern>
      <action>
           <let><clip pos="2" side="tl" part="a_case"/><lit-tag v="ill"/></let>
         <call-macro n="general-macro-3Param"><with-param pos="1"/><with-param pos="2"/><with-param pos="3"/></call-macro>
           <let><var n="func"/><clip pos="3" side="sl" part="a_func"/></let>
       <out>
          <chunk name="noun" case="caseFirstword">
             <tags>
              <tag><lit-tag v="NP"/></tag>
              <tag><var n="func"/></tag>
            </tags>
           <mlu>
           <lu>
            <clip pos="1" side="tl" part="whole"/>            
           </lu>
           <lu>
            <clip pos="2" side="tl" part="whole"/>            
           </lu>
           </mlu>
          </chunk>
        </out>
      </action>
    </rule>
 
    <rule comment="C[T]-NUM numeral" c="example">
      <pattern>
        <pattern-item n="numeral"/>
      </pattern>
      <action>
        <call-macro n="general-macro-1Param">
          <with-param pos="1"/>
        </call-macro>
        <let><clip pos="1" side="tl" part="sem_year"/><lit-tag v="arab"/></let>
        <let><clip pos="1" side="tl" part="a_nbr"/><lit-tag v="sg"/></let>
        <choose><when><test>
        <equal><clip pos="1" side="tl" part="a_num_type"/><lit-tag v="arab"/></equal></test>
         <let><clip pos="1" side="tl" part="a_case"/><lit-tag v="nom"/></let></when></choose> 
       <call-macro n="assign-case-1Param"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="num" case="caseFirstword">
            <tags>
              <tag><lit-tag v="NP"/></tag>
              <tag><var n="func"/></tag>
              <tag><var n="ext"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="whole"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

    <rule comment="C[_]-A adj" c="example">
      <pattern>
        <pattern-item n="adj"/>
      </pattern>
      <action>
        <call-macro n="assign-case-1Param"><with-param pos="1"/></call-macro>
        <call-macro n="general-macro-1Param"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="adj" case="caseFirstword">
            <tags>
              <tag><lit-tag v="NP"/></tag>
              <tag><var n="func"/></tag>
               <tag><var n="ext"/></tag>
           </tags>
            <lu>
              <clip pos="1" side="tl" part="whole"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="C[_]-N noun" c="example">
      <pattern>
        <pattern-item n="noun"/>
      </pattern>
      <action>
        <call-macro n="general-macro-1Param"><with-param pos="1"/></call-macro>
        <call-macro n="assign-case-1Param"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="noun" case="caseFirstword">
            <tags>
              <tag><lit-tag v="NP"/></tag>
              <tag><var n="func"/></tag>
              <tag><var n="ext"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="whole"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

    <rule comment="C[_]-A n_cmp adj" c="example">
      <pattern>
        <pattern-item n="n_cmp"/>
        <pattern-item n="adj"/> <!-- usually derivated from noun -->
      </pattern>
      <action>
        <call-macro n="general-macro-2Param"><with-param pos="1"/><with-param pos="2"/></call-macro>
        <call-macro n="assign-case-1Param"><with-param pos="2"/></call-macro>
        <out>
          <chunk name="noun" case="caseFirstword">
            <tags>
              <tag><lit-tag v="NP"/></tag>
              <tag><var n="func"/></tag>
               <tag><var n="ext"/></tag>
           </tags>
            <mlu>
              <lu>
                <clip pos="1" side="tl" part="whole"/>
              </lu>
              <lu>
                <clip pos="2" side="tl" part="whole"/>
              </lu>
            </mlu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="C[S]-N n_cmp noun" c="example">
      <pattern>
        <pattern-item n="n_cmp"/>
        <pattern-item n="noun"/>
      </pattern>
      <action>
        <call-macro n="general-macro-2Param"><with-param pos="1"/><with-param pos="2"/></call-macro>
        <call-macro n="assign-case-1Param"><with-param pos="2"/></call-macro>
        <out>
          <chunk name="noun" case="caseFirstword">
            <tags>
              <tag><lit-tag v="NP"/></tag>
              <tag><var n="func"/></tag>
              <tag><var n="ext"/></tag>
            </tags>
            <mlu>
              <lu>
                <clip pos="1" side="tl" part="whole"/>
              </lu>
              <lu>
                <clip pos="2" side="tl" part="whole"/>
              </lu>
            </mlu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="C[S]-N n_cmp n_cmp noun" c="example">
      <pattern>
        <pattern-item n="n_cmp"/>
        <pattern-item n="n_cmp"/>
        <pattern-item n="noun"/>
      </pattern>
      <action>
        <call-macro n="general-macro-3Param"><with-param pos="1"/><with-param pos="2"/><with-param pos="3"/></call-macro>
        <call-macro n="assign-case-1Param"><with-param pos="3"/></call-macro>
        <out>
          <chunk name="noun" case="caseFirstword">
            <tags>
              <tag><lit-tag v="NP"/></tag>
              <tag><var n="func"/></tag>
              <tag><var n="ext"/></tag>
            </tags>
            <mlu>
              <lu>
                <clip pos="1" side="tl" part="whole"/>
              </lu>
              <lu>
                <clip pos="2" side="tl" part="whole"/>
              </lu>
              <lu>
                <clip pos="3" side="tl" part="whole"/>
              </lu>
            </mlu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="C[S]-N n_cmp n_cmp n_cmp noun" c="bieggamillofápmorusttet">
      <pattern>
        <pattern-item n="n_cmp"/>
        <pattern-item n="n_cmp"/>
        <pattern-item n="n_cmp"/>
        <pattern-item n="noun"/>
      </pattern>
      <action>
        <call-macro n="general-macro-4Param"><with-param pos="1"/><with-param pos="2"/><with-param pos="3"/><with-param pos="4"/></call-macro>
        <call-macro n="assign-case-1Param"><with-param pos="4"/></call-macro>
        <out>
          <chunk name="noun" case="caseFirstword">
            <tags>
              <tag><lit-tag v="NP"/></tag>
              <tag><var n="func"/></tag>
              <tag><var n="ext"/></tag>
            </tags>
            <mlu>
              <lu>
                <clip pos="1" side="tl" part="whole"/>
              </lu>
              <lu>
                <clip pos="2" side="tl" part="whole"/>
              </lu>
              <lu>
                <clip pos="3" side="tl" part="whole"/>
              </lu>
              <lu>
                <clip pos="4" side="tl" part="whole"/>
              </lu>
            </mlu>
          </chunk>
        </out>
      </action>
    </rule>
    
    <rule comment="C[T]-NP mod_n n_not_cmp" c="example">
      <pattern>
        <pattern-item n="mod_n"/>
        <pattern-item n="n_not_cmp"/>
      </pattern>
      <action>
        <call-macro n="general-macro-2Param"><with-param pos="1"/><with-param pos="2"/></call-macro>
        <call-macro n="assign-case-1Param"><with-param pos="1"/></call-macro>
        <call-macro n="assign-case-1Param"><with-param pos="2"/></call-macro>
              <choose>  
     <when><test><and>
     <equal><clip pos="1" side="sl" part="lem"/><lit v="Buorre"/></equal>
     <equal><clip pos="2" side="sl" part="lem"/><lit v="beaivi"/></equal>
     </and></test>
        <let><clip pos="1" side="tl" part="a_nbr"/><lit v=""/></let>
        <let><clip pos="1" side="tl" part="a_case"/><lit-tag v="attr"/></let>
         <let><clip pos="2" side="tl" part="a_case"/><lit-tag v="nom"/></let>
         </when>

        <when><test><and>
        <equal><clip pos="1" side="sl" part="a_case"/><lit-tag v="loc"/></equal>
        <equal><clip pos="1" side="sl" part="a_func"/><lit-tag v="@→N"/></equal>
        <not><equal><clip pos="1" side="sl" part="a_sem"/><lit-tag v="sem_time"/></equal></not>
        <or>
        <equal><clip pos="2" side="sl" part="a_func"/><lit-tag v="@-F←ADVL-ela"/></equal>
        <equal><clip pos="2" side="sl" part="a_func"/><lit-tag v="@ADVL-ela→"/></equal>
        <equal><clip pos="2" side="sl" part="a_func"/><lit-tag v="@←ADVL-ela"/></equal>
        </or>
        </and>
        </test>
        <let><clip pos="1" side="tl" part="a_case"/><lit-tag v="ela"/></let>
        </when>
        <when>
        <test><and>
        <equal><clip pos="1" side="sl" part="a_sem"/><lit-tag v="sem_time"/></equal>
        <equal><clip pos="2" side="sl" part="lem"/><lit v="loahppa"/></equal>
        </and></test>
        <let><clip pos="2" side="tl" part="a_case"/><lit-tag v="gen"/></let>
        </when>
      </choose>  
        <let><clip pos="1" side="tl" part="sem_year"/><lit-tag v="arab"/></let>
        <out>
          <chunk name="noun" case="caseFirstword">
            <tags>
              <tag><lit-tag v="NP"/></tag>
              <tag><var n="func"/></tag>
              <tag><var n="ext"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="whole"/>
            </lu>
            <b pos="1"/>
            <lu>
              <clip pos="2" side="tl" part="whole"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

    <rule comment="C[ST]-NP n_cmp mod_n n_not_cmp" c="example">
      <pattern>
        <pattern-item n="n_cmp"/>
        <pattern-item n="mod_n"/>
        <pattern-item n="n_not_cmp"/>
      </pattern>
      <action>
        <call-macro n="general-macro-3Param"><with-param pos="1"/><with-param pos="2"/><with-param pos="3"/></call-macro>
        <call-macro n="assign-case-1Param"><with-param pos="2"/></call-macro>
        <call-macro n="assign-case-1Param"><with-param pos="3"/></call-macro>
              <choose>  
        <when><test><and>
        <equal><clip pos="2" side="sl" part="a_case"/><lit-tag v="loc"/></equal>
        <equal><clip pos="2" side="sl" part="a_func"/><lit-tag v="@→N"/></equal>
        <or>
        <equal><clip pos="3" side="sl" part="a_func"/><lit-tag v="@ADVL-ela→"/></equal>
        <equal><clip pos="3" side="sl" part="a_func"/><lit-tag v="@←ADVL-ela"/></equal>
        <equal><clip pos="3" side="sl" part="a_func"/><lit-tag v="@-F←ADVL-ela"/></equal>
        </or>
        </and>
        </test>
        <let><clip pos="2" side="tl" part="a_case"/><lit-tag v="ela"/></let>
        </when>
        <when>
        <test><and>
        <equal><clip pos="2" side="sl" part="a_sem"/><lit-tag v="sem_time"/></equal>
        <equal><clip pos="3" side="sl" part="lem"/><lit v="loahppa"/></equal>
        </and></test>
        <let><clip pos="3" side="tl" part="a_case"/><lit-tag v="gen"/></let>
        </when>
      </choose>  
        <out>
          <chunk name="noun" case="caseFirstword">
            <tags>
              <tag><lit-tag v="NP"/></tag>
              <tag><var n="func"/></tag>
              <tag><var n="ext"/></tag>
            </tags>
            <mlu>
            <lu>
              <clip pos="1" side="tl" part="whole"/>
            </lu>
            <lu>
              <clip pos="2" side="tl" part="whole"/>
            </lu>
            </mlu>
            <b pos="2"/>
            <lu>
              <clip pos="3" side="tl" part="whole"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>



   <rule comment="C[S]-NP mod_n n_not_cmp prop_nom_pers" c="example">
      <pattern>
        <pattern-item n="mod_n"/>
        <pattern-item n="n_not_cmp"/>
        <pattern-item n="prop_nom_pers"/>
      </pattern>
      <action>
        <call-macro n="general-macro-3Param"><with-param pos="1"/><with-param pos="2"/><with-param pos="3"/></call-macro>
        <call-macro n="assign-case-1Param"><with-param pos="1"/></call-macro>
        <call-macro n="assign-case-1Param"><with-param pos="2"/></call-macro>
        <out>
          <chunk name="noun" case="caseFirstword">
            <tags>
              <tag><lit-tag v="NP"/></tag>
              <tag><var n="func"/></tag>
              <tag><var n="ext"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="whole"/>
            </lu>
            <b pos="1"/>
            <lu>
              <clip pos="2" side="tl" part="whole"/>
            </lu>
            <b pos="2"/>
            <lu>
              <clip pos="3" side="tl" part="whole"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>


   <rule comment="C[_]-NP n_not_cmp prop_attr prop_nom_pers" c="example">
      <pattern>
        <pattern-item n="n_not_cmp"/>
        <pattern-item n="prop_attr"/>
        <pattern-item n="prop_nom_pers"/>
      </pattern>
      <action>
        <call-macro n="general-macro-3Param"><with-param pos="1"/><with-param pos="2"/><with-param pos="3"/></call-macro>
        <call-macro n="assign-case-1Param"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="noun" case="caseFirstword">
            <tags>
              <tag><lit-tag v="NP"/></tag>
              <tag><var n="func"/></tag>
              <tag><var n="ext"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="whole"/>
            </lu>
            <b pos="1"/>
            <lu>
              <clip pos="2" side="tl" part="whole"/>
            </lu>
            <b pos="2"/>
            <lu>
              <clip pos="3" side="tl" part="whole"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

   <rule comment="C[_]-NP mod_n n_not_cmp prop_attr prop_nom_pers" c="example">
      <pattern>
        <pattern-item n="mod_n"/>
        <pattern-item n="n_not_cmp"/>
        <pattern-item n="prop_attr"/>
        <pattern-item n="prop_nom_pers"/>
      </pattern>
      <action>
        <call-macro n="general-macro-4Param"><with-param pos="1"/><with-param pos="2"/><with-param pos="3"/><with-param pos="4"/></call-macro>
        <call-macro n="assign-case-1Param"><with-param pos="1"/></call-macro>
        <call-macro n="assign-case-1Param"><with-param pos="2"/></call-macro>
        <out>
          <chunk name="noun" case="caseFirstword">
            <tags>
              <tag><lit-tag v="NP"/></tag>
              <tag><var n="func"/></tag>
              <tag><var n="ext"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="whole"/>
            </lu>
            <b pos="1"/>
            <lu>
              <clip pos="2" side="tl" part="whole"/>
            </lu>
            <b pos="2"/>
            <lu>
              <clip pos="3" side="tl" part="whole"/>
            </lu>
            <b pos="3"/>
            <lu>
              <clip pos="4" side="tl" part="whole"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

   <rule comment="C[_]-NP mod_n n_not_cmp prop_attr prop_attr prop_nom_pers" c="example">
      <pattern>
        <pattern-item n="mod_n"/>
        <pattern-item n="n_not_cmp"/>
        <pattern-item n="prop_attr"/>
        <pattern-item n="prop_attr"/>
        <pattern-item n="prop_nom_pers"/>
      </pattern>
      <action>
        <call-macro n="general-macro-4Param"><with-param pos="1"/><with-param pos="2"/><with-param pos="3"/><with-param pos="4"/></call-macro>
        <call-macro n="general-macro-1Param"><with-param pos="5"/></call-macro>
        <call-macro n="assign-case-1Param"><with-param pos="1"/></call-macro>
        <call-macro n="assign-case-1Param"><with-param pos="2"/></call-macro>
       <out>
          <chunk name="noun" case="caseFirstword">
            <tags>
              <tag><lit-tag v="LongNP"/></tag>
              <tag><var n="func"/></tag>
              <tag><var n="ext"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="whole"/>
            </lu>
            <b pos="1"/>
            <lu>
              <clip pos="2" side="tl" part="whole"/>
            </lu>
            <b pos="2"/>
            <lu>
              <clip pos="3" side="tl" part="whole"/>
            </lu>
            <b pos="3"/>
            <lu>
              <clip pos="4" side="tl" part="whole"/>
            </lu>
            <b pos="4"/>
            <lu>
              <clip pos="5" side="tl" part="whole"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

   <rule comment="C[_]-NP n_not_cmp prop_attr prop_attr prop_nom_pers" c="sámedikkeráde Silje Karine Muotka">
      <pattern>
        <pattern-item n="n_not_cmp"/>
        <pattern-item n="prop_attr"/>
        <pattern-item n="prop_attr"/>
        <pattern-item n="prop_nom_pers"/>
      </pattern>
      <action>
        <call-macro n="general-macro-4Param"><with-param pos="1"/><with-param pos="2"/><with-param pos="3"/><with-param pos="4"/></call-macro>
        <call-macro n="assign-case-1Param"><with-param pos="1"/></call-macro>
       <out>
          <chunk name="noun" case="caseFirstword">
            <tags>
              <tag><lit-tag v="LongNP"/></tag>
              <tag><var n="func"/></tag>
              <tag><var n="ext"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="whole"/>
            </lu>
            <b pos="1"/>
            <lu>
              <clip pos="2" side="tl" part="whole"/>
            </lu>
            <b pos="2"/>
            <lu>
              <clip pos="3" side="tl" part="whole"/>
            </lu>
            <b pos="3"/>
            <lu>
              <clip pos="4" side="tl" part="whole"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

    <rule comment="C[S]-NP mod_n n_cmp n_not_cmp" c="example">
      <pattern>
        <pattern-item n="mod_n"/> 
        <pattern-item n="n_cmp"/>
        <pattern-item n="n_not_cmp"/>
      </pattern>
      <action>
        <call-macro n="general-macro-3Param"><with-param pos="1"/><with-param pos="2"/><with-param pos="3"/></call-macro>
        <call-macro n="assign-case-1Param"><with-param pos="1"/></call-macro>
        <call-macro n="assign-case-1Param"><with-param pos="3"/></call-macro>
        <out>
          <chunk name="noun" case="caseFirstword">
            <tags>
              <tag><lit-tag v="NP"/></tag>
              <tag><var n="func"/></tag>
              <tag><var n="ext"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="whole"/>
            </lu>
            <b pos="1"/>
            <mlu>
            <lu>
              <clip pos="2" side="tl" part="whole"/>
            </lu>
            <lu>
              <clip pos="3" side="tl" part="whole"/>
            </lu>
            </mlu>
          </chunk>
        </out>
      </action>
    </rule>

    <rule comment="C[S]-NP mod_n mod_n n_cmp n_not_cmp" c="example">
      <pattern>
        <pattern-item n="mod_n"/> 
        <pattern-item n="mod_n"/> 
        <pattern-item n="n_cmp"/>
        <pattern-item n="n_not_cmp"/>
      </pattern>
      <action>
        <call-macro n="general-macro-4Param"><with-param pos="1"/><with-param pos="2"/><with-param pos="3"/><with-param pos="4"/></call-macro>
        <call-macro n="assign-case-1Param"><with-param pos="1"/></call-macro>
        <call-macro n="assign-case-1Param"><with-param pos="2"/></call-macro>
        <call-macro n="assign-case-1Param"><with-param pos="4"/></call-macro>
        <out>
          <chunk name="noun" case="caseFirstword">
            <tags>
              <tag><lit-tag v="NP"/></tag>
              <tag><var n="func"/></tag>
              <tag><var n="ext"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="whole"/>
            </lu>
            <b pos="1"/>
            <lu>
              <clip pos="2" side="tl" part="whole"/>
            </lu>
            <b pos="2"/>
            <mlu>
            <lu>
              <clip pos="3" side="tl" part="whole"/>
            </lu>
            <lu>
              <clip pos="4" side="tl" part="whole"/>
            </lu>
            </mlu>
          </chunk>
        </out>
      </action>
    </rule>


    <rule comment="C[_]-NP mod_n mod_n n_not_cmp" c="example">
      <pattern>
        <pattern-item n="mod_n"/> 
        <pattern-item n="mod_n"/> 
        <pattern-item n="n_not_cmp"/>
      </pattern>
      <action>
        <call-macro n="general-macro-3Param"><with-param pos="1"/><with-param pos="2"/><with-param pos="3"/></call-macro>
        <call-macro n="assign-case-1Param"><with-param pos="1"/></call-macro>
        <call-macro n="assign-case-1Param"><with-param pos="2"/></call-macro>
        <call-macro n="assign-case-1Param"><with-param pos="3"/></call-macro>
        <out>
          <chunk name="noun" case="caseFirstword">
            <tags>
              <tag><lit-tag v="NP"/></tag>
              <tag><var n="func"/></tag>
              <tag><var n="ext"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="whole"/>
            </lu>
            <b pos="1"/>
            <lu>
              <clip pos="2" side="tl" part="whole"/>
            </lu>
            <b pos="2"/>
            <lu>
              <clip pos="3" side="tl" part="whole"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="C[S]-NP mod_n mod_n mod_n n_not_cmp" c="example">
      <pattern>
        <pattern-item n="mod_n"/> 
        <pattern-item n="mod_n"/> 
        <pattern-item n="mod_n"/> 
        <pattern-item n="n_not_cmp"/>
      </pattern>
      <action>
        <call-macro n="general-macro-4Param"><with-param pos="1"/><with-param pos="2"/><with-param pos="3"/><with-param pos="4"/></call-macro>
        <call-macro n="assign-case-1Param"><with-param pos="1"/></call-macro>
        <call-macro n="assign-case-1Param"><with-param pos="2"/></call-macro>
        <call-macro n="assign-case-1Param"><with-param pos="3"/></call-macro>
        <call-macro n="assign-case-1Param"><with-param pos="4"/></call-macro>
        <out>
          <chunk name="noun" case="caseFirstword">
            <tags>
              <tag><lit-tag v="NP"/></tag>
              <tag><var n="func"/></tag>
              <tag><var n="ext"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="whole"/>
            </lu>
            <b pos="1"/>
            <lu>
              <clip pos="2" side="tl" part="whole"/>
            </lu>
            <b pos="2"/>
            <lu>
              <clip pos="3" side="tl" part="whole"/>
            </lu>
            <b pos="3"/>
            <lu>
              <clip pos="4" side="tl" part="whole"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>


    <rule comment="C[_]-NUM noun num-ldep" c="example">
      <pattern>
        <pattern-item n="noun"/>
        <pattern-item n="num_ldep"/>
      </pattern>
      <action>
        <call-macro n="general-macro-2Param"><with-param pos="1"/><with-param pos="2"/></call-macro>
        <call-macro n="assign-case-1Param"><with-param pos="1"/></call-macro>
        <call-macro n="assign-case-1Param"><with-param pos="2"/></call-macro>
        <let><clip pos="2" side="tl" part="sem_year"/><lit-tag v="arab"/></let>
        <out>
          <chunk name="noun-num" case="caseFirstword">
            <tags>
              <tag><lit-tag v="NP"/></tag>
              <tag><var n="func"/></tag>
              <tag><var n="ext"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="whole"/>
            </lu>
            <b pos="1"/>
            <lu>
              <clip pos="2" side="tl" part="whole"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    
    <rule comment="C[_]-V leat_aux" c="example">
      <pattern>
        <pattern-item n="leat_aux"/>
      </pattern>
      <action>
        <call-macro n="general-macro-1Param"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="cop-auxv" case="caseFirstword">
            <tags>
              <tag><lit-tag v="SV"/></tag>
              <tag><var n="func"/></tag>
 <!--             <tag><var n="tense"/></tag> -->
            </tags>

            <lu>
              <clip pos="1" side="tl" part="whole"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule> 




    <rule comment="C[T]-V verb_actio" c="example">
      <pattern>
        <pattern-item n="verb_actio"/>
      </pattern>
      <action>
        <call-macro n="convert-deriv-1Param"><with-param pos="1"/></call-macro>
        <call-macro n="general-macro-1Param"><with-param pos="1"/></call-macro>
        <choose><when><test>
        <equal><clip pos="1" side="sl" part="a_case"/><lit-tag v="loc"/></equal>
        </test>
        <let><clip pos="1" side="tl" part="a_case"/><lit-tag v="ela"/></let>
        </when></choose>
        <out>
          <chunk name="actio" case="caseFirstword">
            <tags>
              <tag><lit-tag v="SV"/></tag>
              <tag><var n="func"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="whole"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="C[T]-V verb_inf" c="example">
      <pattern>
        <pattern-item n="verb_inf"/>
      </pattern>
      <action>
      <choose><when><test>
	  <and>
      <equal><clip pos="1" side="sl" part="a_func"/><lit-tag v="@←ADVL"/></equal>
      <not><equal><clip pos="1" side="tl" part="lem"/><lit v="liehket"/></equal></not></and>
           </test>
       <let><clip pos="1" side="tl" part="a_infin"/><lit-tag v="supn"/></let>
     </when></choose>
        <call-macro n="convert-deriv-1Param"><with-param pos="1"/></call-macro>
        <call-macro n="general-macro-1Param"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="inf" case="caseFirstword">
            <tags>
              <tag><lit-tag v="SV"/></tag>
              <tag><var n="func"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="whole"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="C[_]-V verb_prfprc" c="example">
      <pattern>
        <pattern-item n="verb_prfprc"/>
      </pattern>
      <action>
        <call-macro n="convert-deriv-1Param"><with-param pos="1"/></call-macro>
        <call-macro n="general-macro-1Param"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="prfprc" case="caseFirstword">
            <tags>
              <tag><lit-tag v="SV"/></tag>
              <tag><var n="func"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="whole"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="C[AT]-V mainverbqst" c="example">
      <pattern>
        <pattern-item n="mainverbqst"/>
      </pattern>
      <action>
        <call-macro n="general-macro-1Param"><with-param pos="1"/></call-macro>
        <let><var n="current_verb"/><clip pos="1" side="sl" part="lem"/></let>
            <let><clip pos="1" side="tl" part="a_qst"/><lit v=""/></let>
        <out>
          <chunk name="mainverb" case="caseFirstword">
            <tags>
              <tag><lit-tag v="SV"/></tag>
              <tag><var n="func"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="whole"/>
            </lu>
          </chunk>
            <b pos="1"/>
          <chunk name="qst">
            <tags>
              <tag><lit-tag v="pcle"/></tag>
              <tag><lit-tag v="PCLE"/></tag>
            </tags>
         <lu>
            <lit v="gus"/>
            <lit-tag v="pcle.qst"/>
          </lu>
          </chunk>
        </out>
      </action>
    </rule>
    
    <rule comment="C[AT]-V verb_fin" c="example">
      <pattern>
        <pattern-item n="verb_fin"/>
      </pattern>
      <action>
        <call-macro n="general-macro-1Param">
          <with-param pos="1"/>
        </call-macro>
        <call-macro n="convert-deriv-1Param">
          <with-param pos="1"/>
        </call-macro>
        <choose><when><test><equal><clip pos="1" side="tl" part="a_mood"/><lit-tag v="cond"/></equal></test>
            <out>
              <chunk name="liehket_vblex" case="caseFirstword">
                <tags>
                  <tag><lit-tag v="SV"/></tag>
                  <tag><var n="func"/></tag>
                </tags>
                <lu>
                  <lit v="liehket"/>
                  <lit-tag v="vblex.iv.cond"/><var n="vblex_nbrpers"/>
                </lu>
                <b/>
                <lu>
                  <clip pos="1" side="tl" part="lem"/>
                  <lit-tag v="vblex.inf"/>
                </lu>
              </chunk>
            </out>
          </when>
          <otherwise>
            <out>
              <chunk name="vblex" case="caseFirstword">
                <tags>
                  <tag><lit-tag v="SV"/></tag>
                  <tag><var n="func"/></tag>
                </tags>
                <lu>
                  <clip pos="1" side="tl" part="whole"/>
                </lu>
              </chunk>
            </out>
          </otherwise>
        </choose>
      </action>
    </rule> 


    <rule comment="C[_]-T sent">
      <pattern>
        <pattern-item n="sent"/>
      </pattern>
      <action>
        <call-macro n="general-macro-1Param"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="sent" case="caseFirstword">
            <tags>
              <tag><lit-tag v="SENT"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="whole"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

    
     <rule comment="C[_]-PCLE dat_pcle" c="example">
      <pattern>
        <pattern-item n="dat_pcle"/>
      </pattern>
      <action>
      </action>
    </rule>

    <rule comment="C[TW] miehtá_adp nom_gen">
      <pattern>
        <pattern-item n="miehtá_adp"/>
        <pattern-item n="nom_gen"/>
      </pattern>
      <action>
        <call-macro n="general-macro-2Param"><with-param pos="1"/><with-param pos="2"/></call-macro>
        <let><clip pos="2" side="tl" part="a_case"/><lit-tag v="acc"/></let>
        <out>
          <chunk name="pp" case="caseFirstword">
            <tags>
              <tag><lit-tag v="NP"/></tag>
              <tag><var n="func"/></tag>
            </tags>
            <lu>
              <clip pos="2" side="tl" part="whole"/>
            </lu>
            <b pos="1"/>
            <lu>
              <clip pos="1" side="tl" part="whole"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

    <rule comment="C[T]-PP nom_gen miehtá_adp" c="example">
      <pattern>
        <pattern-item n="nom_gen"/>
        <pattern-item n="miehtá_adp"/>
      </pattern>
      <action>
        <call-macro n="general-macro-2Param"><with-param pos="1"/><with-param pos="2"/></call-macro>
        <let><clip pos="1" side="tl" part="a_case"/><lit-tag v="acc"/></let>
        <out>
          <chunk name="pp" case="caseFirstword">
            <tags>
              <tag><lit-tag v="NP"/></tag>
              <tag><var n="func"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="whole"/>
            </lu>
            <b pos="1"/>
            <lu>
              <clip pos="2" side="tl" part="whole"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="C[_] cnjcoo" c="example">
      <pattern>
        <pattern-item n="cnjcoo"/>
      </pattern>
      <action>
        <call-macro n="general-macro-1Param">
          <with-param pos="1"/>
        </call-macro> 
        <out>
          <chunk name="cnjcoo" case="caseFirstword">
            <tags>
              <tag><lit-tag v="cnjcoo"/></tag>
              <tag><var n="func"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="whole"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
     <rule comment="C[_]-CS cnjsub" c="example">
      <pattern>
        <pattern-item n="cnjsub"/>
      </pattern>
      <action>
        <call-macro n="general-macro-1Param">
          <with-param pos="1"/>
        </call-macro>
        <let><var n="chunk_name"/><clip pos="1" side="sl" part="lem"/></let>
        <out>
          <chunk namefrom="chunk_name" case="caseFirstword">
            <tags>
              <tag><lit-tag v="cnjsub"/></tag>
              <tag><var n="func"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="whole"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="C[_]-NUM numeral prosent" c="example">
      <pattern>
        <pattern-item n="numeral"/>
        <pattern-item n="prosent"/>
      </pattern>
      <action>
        <call-macro n="general-macro-2Param"><with-param pos="2"/><with-param pos="1"/></call-macro>
        <let><clip pos="1" side="tl" part="tags"/><lit-tag v="num.arab.sg.nom"/></let>
        <out>
          <chunk name="prosent" case="caseFirstword">
            <tags>
              <tag><lit-tag v="NP"/></tag>
              <tag><var n="func"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="whole"/>
            </lu>
            <b pos="1"/>
            <lu>
              <clip pos="2" side="tl" part="whole"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
   <rule comment="C[_]-NUM mod_num numeral prosent" c="example">
      <pattern>
        <pattern-item n="mod_num"/>
        <pattern-item n="numeral"/>
        <pattern-item n="prosent"/>
      </pattern>
      <action>
        <call-macro n="general-macro-3Param"><with-param pos="1"/><with-param pos="3"/><with-param pos="2"/></call-macro>
        <let><clip pos="2" side="tl" part="tags"/><lit-tag v="num.arab.sg.nom"/></let>
        <out>
          <chunk name="prosent" case="caseFirstword">
            <tags>
              <tag><lit-tag v="NP"/></tag>
              <tag><var n="func"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="whole"/>
            </lu>
            <b pos="1"/>
            <lu>
              <clip pos="2" side="tl" part="whole"/>
            </lu>
            <b pos="2"/>
            <lu>
              <clip pos="3" side="tl" part="whole"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="C[_]-T comma">
      <pattern>
        <pattern-item n="comma"/>
      </pattern>
      <action>
        <out>
          <chunk name="comma" case="caseFirstword">
            <tags>
              <tag><lit-tag v="CLB"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="whole"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    
   <rule comment="C[_]-T default">
      <pattern>
        <pattern-item n="default"/>
      </pattern>
      <action>
        <call-macro n="general-macro-1Param"><with-param pos="1"/></call-macro>
        <call-macro n="assign-case-1Param"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="default" case="caseFirstword">
            <tags>
              <tag><lit-tag v="DEFAULT"/></tag>
              <tag><var n="func"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="whole"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    

  </section-rules>
</transfer>
